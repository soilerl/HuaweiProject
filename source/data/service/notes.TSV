id	type	body	author_user_name	created_at	updated_at	isSystem	noteable_id	noteable_type	noteable_iid	change_trigger	repo	merge_request_id
gid://gitlab/DiffNote/382388460		"`&>` redirects both stdout and stderr to `/dev/null`. Is that what we want ?
Or just `2>` instead ?"	richard.bonichon	2020-07-20T15:14:01Z		False				0	tezos/tezos	1984
gid://gitlab/DiffNote/393245009		Thanks for the fix!	rafoo_	2020-08-10T12:33:48Z		False				-2	tezos/tezos	1984
gid://gitlab/DiffNote/384547406		"We should probably specify on which channels the notification will be sent (slack? newsletter? tezos.gitlab.io? release notes?).

In this notification it is also important to explicitely specify a date after which the endpoint can disappear at any time (what you refer to as the ""end of the deprecation period"")."	romain.nl	2020-07-23T14:31:30Z		False				-1	tezos/tezos	1982
gid://gitlab/DiffNote/384554128		"If the period is defined in terms of releases, it is a bit unreliable for users. Until now, we had roughly one major release every 3 months, so users would expect to have roughly 6 months to adapt. But if suddenly we make a major release after 1 month only, they could be taken by surprise.

I would instead state that an RPC call is deprecated in the first major version released at least 6 months after the deprecation was announced. Which translates to a simple rule for the merge team: do not merge a decommission in `master` before 6 months occurred since the release where the deprecation was announced. (Or 3 months, or 4 months, …)

However, announcing the deprecation in the changelog of the first version in which it is deprecated sounds good to me."	romain.nl	2020-07-23T14:41:20Z		False				-1	tezos/tezos	1982
gid://gitlab/DiffNote/384557068		"It's a good idea to leave us the possibility for breaking changes for security issues (provided we have no other option). But I don't know if specifying ""less than 30 days"" is a good idea. With the way we are handling security releases right now, we could very well make a breaking change without notice at all actually (since we don't make security patches public beforehand)."	romain.nl	2020-07-23T14:45:53Z		False				-1	tezos/tezos	1982
gid://gitlab/DiffNote/385941200		"```suggestion:-1+0
             | `A errors ->
                 List.map Error_monad.error_of_json errors
```"	mbouaziz	2020-07-27T12:53:56Z		False				0	tezos/tezos	1985
gid://gitlab/DiffNote/385139509		type annotations are missing.	bidinger	2020-07-24T13:29:29Z		False				0	tezos/tezos	1992
gid://gitlab/DiffNote/386695156		`config_dict` could be `None` too. (type annotations are missing in other parts of the file).	bidinger	2020-07-28T10:29:30Z		False				0	tezos/tezos	1992
gid://gitlab/DiffNote/386840158		"Just my personal preference so feel free to ignore, but I think that trying to cover both cases (no config file, and some config file) in the same test obfuscates the code. It leads to a special treatment for `config_file is None` in each test case. I would go with a separate test for each case (even if it leads to a little duplication).

Also if possible it's better to use a context manager (`with`) for temporary files instead of explicitly removing them in a `finally` block.

Example of context manager for temporary files
```
        with tempfile.NamedTemporaryFile(mode='w+', delete=False) as config_file:
            augmented_dict = dict(config_dict)  # Copy for safety
            augmented_dict[""base_dir""] = simple_client.base_dir
            json.dump(augmented_dict, config_file)
            config_file.close()
            cmd = ['--config-file', config_file.name, 'config', 'show']
            simple_client.run(cmd)
```
"	bidinger	2020-07-28T14:01:36Z		False				-1	tezos/tezos	1992
gid://gitlab/DiffNote/388211960		I've now put type annotations everywhere, thanks for the report!	smelc	2020-07-30T12:33:41Z		False				-2	tezos/tezos	1992
gid://gitlab/DiffNote/388232388		"If we drop covering both cases in the same test, we will also drop the use of `pytest.mark.parametrize` which I think is a nice abstraction.

Regarding the use of a context manager, I'd love to use one; but the problem is that `tempfile.NamedTemporaryFile` creates the file upon executing which is not what we want, because we create the files with `config init -o`, which requires the file not to exist already. This is for `test_config_init_roundtrip`. In the case of `test_show`, we could do it in the case where `config_dict` is not `None`, but it's impossible in the other case :crying_cat_face:

So I'd leave the code in its current state on both points. Please resolve this thread if this is fine by you."	smelc	2020-07-30T13:04:47Z		False				-2	tezos/tezos	1992
gid://gitlab/DiffNote/388242762		"We could have `class TestConfigInitNoFile` (no parameter) and `class TestConfigInitWithFile` (which would be parameterized by potentially several dict).

In the current form, it feels that we're trying too hard to fit two different behaviors in the same test, and it makes the code more complex (it took me more time to understand the code than if it was split).

But I'm ok to leave it like that too."	bidinger	2020-07-30T13:15:54Z		False				-1	tezos/tezos	1992
gid://gitlab/DiffNote/399287871		"```
diff --git a/src/proto_alpha/lib_delegate/client_baking_scheduling.ml b/src/proto_alpha/lib_delegate/client_baking_scheduling.ml
index b9723d201e..547914b35e 100644
--- a/src/proto_alpha/lib_delegate/client_baking_scheduling.ml
+++ b/src/proto_alpha/lib_delegate/client_baking_scheduling.ml
@@ -113,8 +113,6 @@ let main ~(name : string) ~(cctxt : #Protocol_client_context.full)
   in
   state_maker first_event
   >>=? fun state ->
-  log_errors_and_continue ~name @@ pre_loop cctxt state first_event
-  >>= fun () ->
   (* main loop *)
   let rec worker_loop () =
     (* event construction *)
@@ -161,4 +159,8 @@ let main ~(name : string) ~(cctxt : #Protocol_client_context.full)
       fun f ->
         f ""Starting %s daemon"" -% t event ""daemon_start"" -% s worker_tag name)
   >>= fun () ->
-  Lwt.finalize (fun () -> worker_loop ()) (fun () -> finalizer state)
+  Lwt.finalize
+    (fun () ->
+      log_errors_and_continue ~name @@ pre_loop cctxt state first_event
+      >>= fun () -> worker_loop ())
+    (fun () -> finalizer state)
```

This allows you to clean-up the state even if an exception is raised in `pre_loop` (caller-supplied) or `log_errors_and_continue` (which calls the logging functions which call all the registered sink handlers)."	raphael-proust	2020-08-20T09:43:30Z		False				0	tezos/tezos	1972
gid://gitlab/DiffNote/399375692		Indeed, thanks for catching this. Fixed up.	vbotbol	2020-08-20T12:00:30Z		False				-2	tezos/tezos	1972
gid://gitlab/DiffNote/383876622		You are shunting the existing documentation of `chain_id` here. After `using the following command:` there should be the block about `compute chain id from seed`. So I'd put the documentation of `timestamp` later on.	smelc	2020-07-22T15:25:48Z		False				0	tezos/tezos	1993
gid://gitlab/DiffNote/383876628		"You could extend this test so that it tests `--protocol-constants` too here (for example for both `chain_id` and `timestamp`). For some reason everything is prepared for this (`_test_create_mockup_init_show_roundtrip` has a `protocol_constants_json` parameter) but is unused. Likely my bad in the past when I introduct the roundtrip test :facepalm_tone3:.

Apart from that and the comment on the doc, everything LGTM :tropical_drink:"	smelc	2020-07-22T15:25:48Z		False				-1	tezos/tezos	1993
gid://gitlab/DiffNote/383891639		Indeed this is now fixed	richard.bonichon	2020-07-22T15:50:13Z		False				-2	tezos/tezos	1993
gid://gitlab/DiffNote/383892013		This is a good remark. This is now addressed !	richard.bonichon	2020-07-22T15:50:53Z		False				-2	tezos/tezos	1993
gid://gitlab/DiffNote/385789836		Is there no Time.Protocol.pp? Or is it to be consistent with the contents of the config file?	igarnier	2020-07-27T08:54:24Z		False				0	tezos/tezos	1993
gid://gitlab/DiffNote/385934373		Indeed. I blindly followed other printing elements. It's better to use the `Time.Protocol.pp_hum` - `config show` should use the JSON element so as to be `copy-and-paste`. It happens that the output here is the same, though.	richard.bonichon	2020-07-27T12:43:11Z		False				-2	tezos/tezos	1993
gid://gitlab/DiffNote/383697471		I can already hear a comment here. This is my preference to reduce the lines of code instead of adding one more event ...	abate	2020-07-22T11:50:14Z		False				-2	tezos/tezos	1987
gid://gitlab/DiffNote/383698179		Maybe there is a better way of doing this ... ?	abate	2020-07-22T11:51:33Z		False				-2	tezos/tezos	1987
gid://gitlab/DiffNote/383699110		this does not change the semantic of this test ( I think ) , but it add an addition log message.	abate	2020-07-22T11:53:17Z		False				-2	tezos/tezos	1987
gid://gitlab/DiffNote/383777573		"Why not use the string to indicate that the closing comes from a call to `cancel`?  
Other use of the same event indicate the name of the function that triggered the event. Maybe you can add an argument to `cancel` or maybe just naming it `cancel` is ok."	raphael-proust	2020-07-22T13:33:45Z		False				0	tezos/tezos	1987
gid://gitlab/DiffNote/383777578		"I'd say that it's better to use `dont_wait` on the logging that happens within `reset_quota` (and transitively `ReadScheduler.update_quota` and `WriteScheduler.update_quota`).

Maybe it's a bit heavy on the syntax. You could work around that with

```
module Events = struct
  include P2p_events.P2p_io_scheduler
  let emit_dont_wait e = dont_wait (…) (fun () -> emit e)
end
```

And that way you can just use `Events.emit_dont_wait` in those places."	raphael-proust	2020-07-22T13:33:45Z		False				0	tezos/tezos	1987
gid://gitlab/DiffNote/383805210		ok. We use this pattern a bit all over the places now. Maybe we should add it to simplelog.	abate	2020-07-22T13:48:49Z		False				-2	tezos/tezos	1987
gid://gitlab/DiffNote/383812118		fixed	abate	2020-07-22T13:58:58Z		False				-2	tezos/tezos	1987
gid://gitlab/DiffNote/383812206		fixed.	abate	2020-07-22T13:59:07Z		False				-2	tezos/tezos	1987
gid://gitlab/DiffNote/383828852		"Not for this MR, but instead of `Uncaught exception` we should indicate that it's just a logging error. Otherwise the messages when we Ctrl+C and some logging fails to happen because there is no more logging backend available are very scary. It looks like there are loads of errors.

We could even pretty-print the even so that the output is very readable. Something along the like of:

```
Logging failed (<exception here>), falling back to stderr logging: <event printed here>
```

but maybe a bit less verbose than that."	raphael-proust	2020-07-22T14:19:15Z		False				-1	tezos/tezos	1987
gid://gitlab/DiffNote/383828868		"This used to have two messages (for beginning and end), do we want something similar? Do we want to just have one event but with a `stage` (or `progress` or `state` or `phase`) payload that's `begin`/`end` (or `start`/`complete` or `begun`/`ended` or `do`/`done`)? Do we want to just change the message to say `shutdown {name} complete`?

The same thing happens in a couple of places below."	raphael-proust	2020-07-22T14:19:15Z		False				-1	tezos/tezos	1987
gid://gitlab/DiffNote/383831284		"removed on purpose. I don't think this adds much to the logging... i think it was more a fine grain debugging message added while developing and then left there ... The logs are filled with many ""<--"" ""-->"" and I doubt it's useful to leave them there"	abate	2020-07-22T14:22:03Z		False				-2	tezos/tezos	1987
gid://gitlab/DiffNote/383832557		"I don't know about adding it to simplelog. In this case here, we don't want to introduce potential yield-points to code that is very stateful and probably not reentrant.

But when introducing yield points is ok, using the Lwt version is cheaper (i.e., more efficient) and it gurantees we keep logs in order (whereas they can be a few lines that are mixed up when using `dont_wait`, depending on the logging backend and such)."	raphael-proust	2020-07-22T14:23:54Z		False				0	tezos/tezos	1987
gid://gitlab/DiffNote/384235237		Naive question: why is an int16 enough to number connections? Are these ids recycled? Or are we relying on modulo arithmetic together with the (reasonable) assumption that there won't be more than 2^15 simultaneous connections?	igarnier	2020-07-23T06:45:21Z		False				0	tezos/tezos	1987
gid://gitlab/DiffNote/384282822		 2^15 it's a lot of connections, but we can rightly put int31 at no additional cost. I made this change everywhere in p2p_events.ml	abate	2020-07-23T08:17:22Z		False				-2	tezos/tezos	1987
gid://gitlab/DiffNote/385784246		"In this function, we're not really sure that the protocol was passed through a command-line option. I think ""Protocol %a was requested yet ..."" is enough"	igarnier	2020-07-27T08:45:09Z		False				-1	tezos/tezos	1974
gid://gitlab/DiffNote/388260549		We're not locally sure, but is there another way to specify the protocol than specifying a command-line option? I see in `client_config.ml` that `default_cli_args` leaves `protocol` to `None` so I wonder where a protocol could be specified or defaulted, besides from the command line.	smelc	2020-07-30T13:37:26Z		False				-2	tezos/tezos	1974
gid://gitlab/DiffNote/389672214		If I had to guess, currently this is the only way to pass the protocol from the client. But maybe the baker has other ways of specifying this? It's not a big deal anyway, we can keep it as is.	igarnier	2020-08-03T09:47:15Z		False				-1	tezos/tezos	1974
gid://gitlab/DiffNote/394014965		"you could replace this with a  comprehension: 
`[ [p1, p2] for p1 in [ALPHA, CARTAGE] for p2 in [CARTHAGE, """", ALPHA  ]]` but I'm not sure it is worth it. 
Also, if the there are always 2 protocols, perhaps use a tuple instead?"	arvidnl	2020-08-11T11:05:53Z		False				0	tezos/tezos	1974
gid://gitlab/DiffNote/394014968		"```suggestion:-0+0
    This test covers 3 cases:
```"	arvidnl	2020-08-11T11:05:54Z		False				0	tezos/tezos	1974
gid://gitlab/DiffNote/394837080		"I went for the list comprehension:

```python
@pytest.mark.parametrize('protos',
                         [[proto1, proto2]
                          for proto1 in [ALPHA, CARTHAGE]
                          for proto2 in [ALPHA, CARTHAGE, """"]])
```"	smelc	2020-08-12T13:34:26Z		False				-2	tezos/tezos	1974
gid://gitlab/DiffNote/394837855		I changed it :+1_tone1:	smelc	2020-08-12T13:35:40Z		False				-2	tezos/tezos	1974
gid://gitlab/DiffNote/394913040		"How about 

```python
@pytest.mark.parametrize('protos',
                         [(proto1, proto2)
                          for proto1 in [ALPHA, CARTHAGE]
                          for proto2 in [ALPHA, CARTHAGE, """"]])
```

(since there are always 2 protocols?)"	arvidnl	2020-08-12T14:56:34Z		False				0	tezos/tezos	1974
gid://gitlab/DiffNote/395318239		"Done. Thanks for insisting, I was in the mood ""there's no tuple comprehension"" :joy_cat: I'm hereby resolving this thread."	smelc	2020-08-13T08:24:57Z		False				-2	tezos/tezos	1974
gid://gitlab/DiffNote/377467031		"We avoid using `async` now. The mempool branch hasn't been updated, but you should use `Error_monad.dont_wait`

`async` appears a couple other times."	raphael-proust	2020-07-10T16:56:07Z		False				-1	tezos/tezos	1959
gid://gitlab/DiffNote/377467034		"That's a good way to isolate the errors. I have two comments though:

- I'm not sure `Prevalidator_worker_state` is the right module to isolate things in. But I don't know where's a better module.

- Maybe avoiding the word `error` would be good in the type name and the variant name. I'd go for `type result = Applied of … | Not_applied of reason`. It's more in-line with the narrative of prevalidation."	raphael-proust	2020-07-10T16:56:07Z		False				-1	tezos/tezos	1959
gid://gitlab/DiffNote/377467036		This definitely needs a comment along the lines of `[fitness ()] may fail with an [Error] if …`	raphael-proust	2020-07-10T16:56:07Z		False				-1	tezos/tezos	1959
gid://gitlab/DiffNote/377467040		"That change (and others similar to it) mean that exceptions may actually escape.

I understand the drive to not expose `tzresult` to caller of `push_request` and other such functions. But I don't think an Lwt-wrapped exception is better.

One alternative I can see is that the functor `Worker.Make` should take a type `failed_request_result` (generally it'd be a sum type along the lines of `type failed_request_result = | Connection_closed | Inconsistent_this | Unknown`, and then `on_error` should take a `trace` and output a `failed_request_result`. And with this, when a request has some Lwt exn or a tzresult mishap, we call `on_error` on the exc/error which (after presumably doing some logging) does a very light matching on the `error` at the top of the trace. Calling `push_request` would either return `Ok …` or `Error (… : failed_request_result)`.

It's a bit heavy. And I don't like that all workers would have to go through those hoops even those that ""cannot fail""."	raphael-proust	2020-07-10T16:56:08Z		False				-1	tezos/tezos	1959
gid://gitlab/DiffNote/379811410		"> I'm not sure `Prevalidator_worker_state` is the right module to isolate things in. But I don't know where's a better module.

Yes I put it there by default, I did not want to create a new file for this type."	Saroupille	2020-07-15T11:42:37Z		False				-1	tezos/tezos	1959
gid://gitlab/DiffNote/379856942		Considering the `Prevalidator_worker_state` doesn't really hold state so much as `Request`, `Event` and `view`, we could simply rename it `Prevalidator_worker_types`. I think that then a type `application_result` would fit nicely.	raphael-proust	2020-07-15T12:32:14Z		False				-1	tezos/tezos	1959
gid://gitlab/DiffNote/391979971		"I thought we recommended another style for such code
```suggestion:-0+0
  Lwt.return @@ record_trace (Invalid_remote_signer s) @@ parse_base_uri s
```
I don't mind much, just yet another useless style question"	mbouaziz	2020-08-06T15:43:02Z		False				3	tezos/tezos	1990
gid://gitlab/DiffNote/391979975		So it couldn't?	mbouaziz	2020-08-06T15:43:02Z		False				-1	tezos/tezos	1990
gid://gitlab/DiffNote/391979980		Actually a decoding, even with `_opt` can throw exceptions	mbouaziz	2020-08-06T15:43:02Z		False				-1	tezos/tezos	1990
gid://gitlab/DiffNote/391980525		Should this be a `try_bind`?	mbouaziz	2020-08-06T15:43:53Z		False				0	tezos/tezos	1990
gid://gitlab/DiffNote/392075224		My understanding was that we recommend `|>` and ban `@@` (?)	smondet	2020-08-06T18:50:33Z		False				3	tezos/tezos	1990
gid://gitlab/DiffNote/392410228		"I tend to use the two for different purposes. I use `@@` to avoid having to introduce parentheses when applying a function to a structured argument. I use `|>` to give a sense of data-flow to the reader.

So in this specific case, the function first `parse_base_uri` and then passes the result “through” filters (a bit like pipes in a shell).

I don't mind too much for this case. I have a mild preference for the `|>` because of the going through filters mentioned above but also because `record_trace` feels very much like some thing that should fit in the error monad but can't. The infix `|>` is a nod to that."	raphael-proust	2020-08-07T12:20:21Z		False				-2	tezos/tezos	1990
gid://gitlab/DiffNote/392410232		I read through and indeed it could not. But I welcome reviews and second opinions.	raphael-proust	2020-08-07T12:20:22Z		False				-2	tezos/tezos	1990
gid://gitlab/DiffNote/392410234		"```
let of_bytes_opt encoding buffer =
  try Some (of_bytes_exn encoding buffer) with Read_error _ -> None
```

That's litteraly the definition of `Data_encoding.Binary.of_bytes_opt`.

If your worry is that there is no static proof of that in the type system, we could alternatively replace `_opt` with `_exn` and keep the `try`-`with` (with a comment explaining that we don't trust that `_opt` wouldn't throw an exception."	raphael-proust	2020-08-07T12:20:22Z		False				-2	tezos/tezos	1990
gid://gitlab/DiffNote/392410237		"It could be yes. That's probably better performance.

(OTOH, it places the exception handler (`(fun _ -> raise Not_found)`) further away from where the exception may be raised in the first place. But that's a minor concern on this scale and it's how the code was before anyway. Fixed.)"	raphael-proust	2020-08-07T12:20:22Z		False				-2	tezos/tezos	1990
gid://gitlab/DiffNote/393068231		There won't be `Read_error` exceptions, but there may be exceptions thrown by a user-provided function, e.g. in `conv`	mbouaziz	2020-08-10T07:32:59Z		False				-1	tezos/tezos	1990
gid://gitlab/DiffNote/393068233		"I suppose the style differs from a part of the code to another.

Closing the thread"	mbouaziz	2020-08-10T07:33:00Z		False				3	tezos/tezos	1990
gid://gitlab/DiffNote/393068235		"I was actually thinking about the inner `Lwt.catch`

You're right, it moves the exception handling pretty far :disappointed: 

Whatever..."	mbouaziz	2020-08-10T07:33:00Z		False				0	tezos/tezos	1990
gid://gitlab/DiffNote/393072069		I don't know whether you were trying to get rid of all `try ....find with Not_found`, this is the last one of this file	mbouaziz	2020-08-10T07:40:57Z		False				-1	tezos/tezos	1990
gid://gitlab/DiffNote/393072072		:heavy_check_mark:	mbouaziz	2020-08-10T07:40:57Z		False				-1	tezos/tezos	1990
gid://gitlab/DiffNote/393173368		Fixed. I'm making a small change: to avoid attaching two separate exception handlers I'm calling `_exn` and wrapping `Some` here.	raphael-proust	2020-08-10T10:20:05Z		False				-2	tezos/tezos	1990
gid://gitlab/DiffNote/393173370		"I think I left this one because it wasn't immediately obvious that `P2p_peer_state.Info.peer_metadata` cannot raise `Not_found` and because there is some non-trivial code in the exception handler. Unfortunately `Option.fold` takes `none:'a` as an argument instead of `none:(unit -> 'a)` or `none: 'a Lazy.t`. As a result this transformation would require a match on `Some _`/`None` which is not necessarily better than a `try`-`with`.

I don't mind changing it though."	raphael-proust	2020-08-10T10:20:05Z		False				-2	tezos/tezos	1990
gid://gitlab/DiffNote/393220810		![image](/uploads/c834ec85b9aadd4d3f16921d6a2244ef/image.png)	mbouaziz	2020-08-10T11:50:22Z		False				-1	tezos/tezos	1990
gid://gitlab/DiffNote/393222004		Btw: throwing from a `conv` is probably not what we want but is currently pretty common throughout the codebase, should be discussed some day	mbouaziz	2020-08-10T11:52:46Z		False				-1	tezos/tezos	1990
gid://gitlab/DiffNote/393222826		"There was an idea of adding a variant to `read_` and `write_error`: `User_invariant_error of exception`

Might be that it's that simple."	raphael-proust	2020-08-10T11:54:19Z		False				-2	tezos/tezos	1990
gid://gitlab/DiffNote/395531282		`of_bytes` may still throw an exception	mbouaziz	2020-08-13T13:09:07Z		False				0	tezos/tezos	1990
gid://gitlab/DiffNote/395531284		"```suggestion:-0+0
      above comment *)
```
![image](/uploads/ef4bde166cc02a4808328adee6355e95/image.png)"	mbouaziz	2020-08-13T13:09:07Z		False				0	tezos/tezos	1990
gid://gitlab/DiffNote/395531287		Here you could use `match with exception` and avoid the bind	mbouaziz	2020-08-13T13:09:08Z		False				0	tezos/tezos	1990
gid://gitlab/DiffNote/400186639		this has nothing to do with the rest of the patch	klakplok	2020-08-21T16:45:03Z		False				-1	tezos/tezos	1990
gid://gitlab/DiffNote/400186643		"Is `raise` the recommended way to raise an exception in the catch block instead of `Lwt.fail`?

I don't see this in the Lwt doc."	klakplok	2020-08-21T16:45:03Z		False				0	tezos/tezos	1990
gid://gitlab/DiffNote/400841310		"From `lwt.mli`:

```
val fail : exn -> _ t
(** [Lwt.fail exn] is like {!Lwt.return}, except the new {{: #TYPEt} promise}
    that is {e already rejected} with [exn].

    Whenever possible, it is recommended to use [raise exn] instead, as [raise]
    captures a backtrace, while [Lwt.fail] does not. If you call [raise exn] in
    a callback that is expected by Lwt to return a promise, Lwt will
    automatically wrap [exn] in a rejected promise, but the backtrace will have
    been recorded by the OCaml runtime. Use [Lwt.fail] only when you
    specifically want to create a rejected promise, to pass to another function,
    or store in a data structure. *)
```"	raphael-proust	2020-08-24T07:39:53Z		False				-2	tezos/tezos	1990
gid://gitlab/DiffNote/400841316		"My intent was to make it obvious that the excption-handling case (which is changed into an option-match case here) more similar to the normal case. It turns out the only differences are: we have an empty set of peers to start with (hence `add`-vs-`singleton`), we know it exists in the table (hence `replace`-vs-`add`), and we the log message also says that.

The difference in style between the value that was added to/replaced in the table obfuscated the fact that we are essentially handling the same value. This is the issue that this line change is addressing. (I also changed the order of the record fields so that they are more identical.

I can separate that change into its own commit if you think it's better.

------------------------------------

Also, considering `replace` is equivalent to `add` when the key is not bound in the table, I think we could factor both branches way more. It's a bit annoying for the log, hence why I kept it this way. But opinions welcome on whether we should just extract the peer and then have a single branch after that."	raphael-proust	2020-08-24T07:39:53Z		False				-2	tezos/tezos	1990
gid://gitlab/DiffNote/402432323		Thanks Mr Lwt maintainer.	klakplok	2020-08-26T12:37:34Z		False				0	tezos/tezos	1990
gid://gitlab/DiffNote/402432950		Ok.	klakplok	2020-08-26T12:38:36Z		False				-1	tezos/tezos	1990
gid://gitlab/DiffNote/399268376		The directory is called `examples`, but the content is more like a test. Any reason for the discrepancy?	raphael-proust	2020-08-20T09:16:30Z		False				-1	tezos/tezos	1952
gid://gitlab/DiffNote/399334209		The idea is to write a tutorial for clic. So the programs are not meant to test the functionality of clic, but to demonstrate it. The naming is incoherent though, the files should be called `clic_example` and `clic_example_1`. I think (it was a while since I started this), that `clic_test` is no longer used. The MR is currently in WIP, we wanted to add some more parts.	arvidnl	2020-08-20T11:00:42Z		False				-1	tezos/tezos	1952
gid://gitlab/DiffNote/380958245		"Would it make sens to change the short description as follows ?
```suggestion:-0+1
(** [dont_wait handler f] evalates [f ()] until it yields and then immediately returns
    to the call point, without waiting for the promise to resolve.
```"	julien.t	2020-07-16T20:32:16Z		False				0	tezos/tezos	1973
gid://gitlab/DiffNote/381099642		"`dont_wait` actually evaluates the whole of `f ()`, not just the part until it yields. It's just that

1. `f ()` evaluates to a promise (as guaranteed by the type system: `f: unit -> unit Lwt.t`) and
2. promise evaluation is eager: it evaluates as much as it can before a yield point at which point it
    a. creates a pending promise,
    b. attaches some callbacks to tie the yield point to the pending promise, and
    c. return (i.e., evaluates to) the pending promise.

Maybe I can add a warning just after this paragraph. Something along the lines of

> Because of Lwt's eager evaluation strategy, a part of the promise returned by `f ()` is evaluated immediately. Specifically, all the side-effects that appear in the body of `f` above the first yielding point happen before the call to `dont_wait` returns.
> 
> For example, in `dont_wait handler (fun () -> progress := 0; Lwt.pause () >>= fun () -> ..); <e>`, the expression `e` sees `progress` as set to `0`."	raphael-proust	2020-07-17T07:08:50Z		False				-2	tezos/tezos	1973
gid://gitlab/DiffNote/382177992		"I added a bit of detail in the doc.


----------------------------------------------

But more than documentation, I'm considering the following options:

- Inserting a call `Lwt.pause ()` at the beginning of the definition of `dont_wait`:

    ```
    let dont_wait handler f =
        let p = Lwt.pause () >>= f in
        on_failure p handler
    ```

- Adding a `~later` (or `~delayed` or `~with_pause`) named (or optional?) parameter to indicate whether to add a `pause` at the beginning of the call.

The first option is a bit annoying because in a lot of cases we really don't care. E.g., we often use `dont_wait` for logging in a non-Lwt environment and if the log actually doesn't yield (e.g. inserts the even in a ring) then it's much more efficient to not yield at all.

The second option is more flexible (and in particular allows us to avoid yeilding when we don't care). But it makes the interface more complex which is very rarely the solution to reduce confusion.

--------------------------------------------------

Opinions?"	raphael-proust	2020-07-20T10:14:08Z		False				-2	tezos/tezos	1973
gid://gitlab/DiffNote/389673434		"The efficiency argument make me think that the second solution seems to be better.

I would be inclined toward an optional `~delayed` option, false by default. 
In most case you indeed don't care to pause or not, but having this option in the interface would be a reminder that if it is not set, the evaluation of f is not delayed."	julien.t	2020-08-03T09:49:31Z		False				0	tezos/tezos	1973
gid://gitlab/DiffNote/393475216		I added an optional parameter. I don't know that we actually need it. But maybe just including it points to the fact that there is something strange to look out for.	raphael-proust	2020-08-10T16:16:48Z		False				-2	tezos/tezos	1973
gid://gitlab/DiffNote/395286893		"I went through the different uses of `dont_wait` and I can't find a place where it'd be useful.

There are a few places where we do a sleep (`Lwt_unix.sleep` or `cctxt#sleep`) at the beginning of the promise (so in those promises there's no point in setting `later`)."	raphael-proust	2020-08-13T07:27:47Z		False				-2	tezos/tezos	1973
gid://gitlab/DiffNote/401455122		Why is `later` an optional argument instead of say a boolean with a default value of `false`?	arvidnl	2020-08-25T05:43:14Z		False				0	tezos/tezos	1973
gid://gitlab/DiffNote/401456263		Here, it would be nice if you add a small phrase explaining how the execution of the example above will be different when `later` is set. I suppose that it ensures that `side_effect ()` on line 87 will become `(* second *)` and that of line 83 will become `(* third *)` (or `(* delayed *)`?) etc?	arvidnl	2020-08-25T05:47:55Z		False				0	tezos/tezos	1973
gid://gitlab/DiffNote/401480784		"`dont_wait : ?later:bool -> (exn -> unit) -> (unit -> unit tzresult Lwt.t) -> unit` doesn't tell you what the default value is and you have to look it up.

OTOH `dont_wait : ?later:unit -> (exn -> unit) -> (unit -> unit tzresult Lwt.t) -> unit` implies that by default it's not later and that you are able to switch `later` on.

Basically, an optional unit has the same UI as a flag on the command-line: it's there (meaning it's on) or it's not (meaning it's off).

---------------------------

Also note that OCaml allows to make the following call `dont_wait ?later:None …` if you want to be explicit at the call-site that `later` should be off (as default).

----------------------------

I can change it to a boolean. It just means mentioning the default value in the doc. It might also be worth making it non-optional if we go for the boolean, just to avoid confusion around defaults."	raphael-proust	2020-08-25T06:55:16Z		False				-2	tezos/tezos	1973
gid://gitlab/DiffNote/401664941		Okay, I see what you mean. I still think it is confusing (`Some ()` has no intuitive semantics to me). Lets delay until we decide whether `later` is included or not, and I agree with your argument below that it should not.	arvidnl	2020-08-25T11:47:23Z		False				0	tezos/tezos	1973
gid://gitlab/DiffNote/402980185		There's no `later` for now. If we open a new MR for it, I'll have a more idiomatic boolean instead of `~later:()`.	raphael-proust	2020-08-27T06:56:16Z		False				-2	tezos/tezos	1973
gid://gitlab/DiffNote/374974522		"```suggestion:-0+0
  - The description of merge requests must include instructions for
```"	mbouaziz	2020-07-07T12:36:15Z		False				0	tezos/tezos	1957
gid://gitlab/DiffNote/374974527		"```suggestion:-0+0
    - Bug fixes should include a test that exposes that the bug has been fixed
```"	mbouaziz	2020-07-07T12:36:15Z		False				0	tezos/tezos	1957
gid://gitlab/DiffNote/375495250		"How about:
```suggestion:-0+0
    - Bug fixes should include a test that demonstrates that the bug has been fixed
```
?"	arvidnl	2020-07-08T07:03:19Z		False				-2	tezos/tezos	1957
gid://gitlab/DiffNote/375559872		Better	mbouaziz	2020-07-08T08:24:08Z		False				0	tezos/tezos	1957
gid://gitlab/DiffNote/372282048		Btw, this link seems to be dead. And I can't find the correct link.	arvidnl	2020-07-02T08:37:41Z		False				-1	tezos/tezos	1948
gid://gitlab/DiffNote/381147808		"```suggestion:-0+0
          ""fetch operation %a failed before being prevalidated: %a""
```"	romain.nl	2020-07-17T08:33:12Z		False				0	tezos/tezos	1970
gid://gitlab/DiffNote/381148958		Unless it is a GADT you could share the three cases with `Error ((Timeout _ | Canceled _ | Missing_data _) :: _ as err)`.	romain.nl	2020-07-17T08:34:48Z		False				-1	tezos/tezos	1970
gid://gitlab/DiffNote/381150122		"```suggestion:-0+0
    requested operation from the queue. The caller is responsible for
```"	romain.nl	2020-07-17T08:36:56Z		False				0	tezos/tezos	1970
gid://gitlab/DiffNote/381188235		yeah sure. I made them explicit here on purpose as we might want to have a different handling for each of these errors. But it's a good point. We can always split them later if needed. Fixed.	abate	2020-07-17T09:31:03Z		False				-2	tezos/tezos	1970
gid://gitlab/DiffNote/396923372		no big deal but this should better be squashed into previous commit for a cleaner history	bidinger	2020-08-17T12:17:27Z		False				-1	tezos/tezos	1970
gid://gitlab/DiffNote/396936253		"This should be squashed with previous commit (and it is unrelated to the commit message).

"	bidinger	2020-08-17T12:36:21Z		False				-1	tezos/tezos	1970
gid://gitlab/DiffNote/396939742		Typo in commit message: `exists` -> `exists`	bidinger	2020-08-17T12:41:43Z		False				-1	tezos/tezos	1970
gid://gitlab/DiffNote/396984771		I don't see what can trigger this error (and if it can be triggered, the documentation for [fetch] is incomplete)	bidinger	2020-08-17T13:27:29Z		False				-1	tezos/tezos	1970
gid://gitlab/DiffNote/396997524		"I wonder if this is a desirable behavior. Imagine this scenario :

Thread A fetches k, with a timeout of 1s.
Thread B fetches k, with a timeout of 10s.

After 1s, the first timeout will expire, and cancel thread B."	bidinger	2020-08-17T13:36:31Z		False				-1	tezos/tezos	1970
gid://gitlab/DiffNote/396999326		If `Canceled` occurs on one blocked fetch, it means the request has been canceled and the error should be raised on all other blocked fetch. So this `clear_or_cancel` is redundant.	bidinger	2020-08-17T13:39:05Z		False				-1	tezos/tezos	1970
gid://gitlab/DiffNote/397006169		"*if* this is useful/needed (see other comments), I wonder if it is the right place. Not a strong opinion, but I'd rather put it either in `Prevalidator`, or in `Requester`.

If this is the semantics that we always want for fetch, it should be enforced at the requester level. And if we want to leave the choice to the caller, it should be in `prevalidator` along with the other calls to `clear_or_cancel`.

I think it could be confusing to have two different semantics for fetch (the well-documented one in `Requester.REQUESTER`, and the one in `Distributed_db`)."	bidinger	2020-08-17T13:49:28Z		False				-1	tezos/tezos	1970
gid://gitlab/DiffNote/381361213		Maybe it wouldn't hurt to add labels to these functions	mbouaziz	2020-07-17T13:08:35Z		False				0	tezos/tezos	1968
gid://gitlab/DiffNote/381361215		"```suggestion:-2+1
      StringTable.find preloaded_cmis (String.capitalize_ascii unit_name)
```
Isn't it just this?"	mbouaziz	2020-07-17T13:08:35Z		False				0	tezos/tezos	1968
gid://gitlab/DiffNote/381409722		I made that change (although it's `find_opt` because this module doesn't use lwtreslib/tzpervasives so it has vanilla Hashtbls instead)	raphael-proust	2020-07-17T14:17:15Z		False				-2	tezos/tezos	1968
gid://gitlab/DiffNote/381409724		"I'm hesitant to rewrite the effective interface of existing functions that we simply re-export. I even considered not exporting `find` to force the use of `find_opt`.

That being said, I'm open to make a few changes. Especially when those changes are compatible with the previous interface as is the case with added labels: it is always possible to call with no labels at all."	raphael-proust	2020-07-17T14:17:15Z		False				-2	tezos/tezos	1968
gid://gitlab/DiffNote/385872111		Not pushing strongly, but you already made changes to existing interfaces, e.g. `Set`s `find`.	mbouaziz	2020-07-27T11:04:50Z		False				0	tezos/tezos	1968
gid://gitlab/DiffNote/389647018		I started doing the work of adding the labels (and keeping the parameter order intact to have partial backwards compatibility) but then I realised that these functions are not actually meant to be used directly. They are generally meant to be passed to the `Make`/`MakeSeeded`. And so I did not label the `seed` parameter. This allows the easy specialisation for hash (with custom traversal limits) but it keeps the function general w.r.t. seededness so it can be used in the functors easily.	raphael-proust	2020-08-03T09:01:10Z		False				-2	tezos/tezos	1968
gid://gitlab/DiffNote/394088136		"It is sad that the whole signature has to be copied. Can't you say that 
```
module type SeededS = 
sig
    include S
    val create : ?random:bool -> int -> 'a t
end
```
?

With the current state, it is not easy to spot the difference between the two signatures also."	Saroupille	2020-08-11T13:01:52Z		False				-1	tezos/tezos	1968
gid://gitlab/DiffNote/394095415		I am not sure to see the difference with `String.Hashtbl`. If this is different or not, a comment to explain why it is redefined here would be nice.	Saroupille	2020-08-11T13:11:25Z		False				0	tezos/tezos	1968
gid://gitlab/DiffNote/394102869		"There's no way in OCaml you can (easily) remove something from a signature or change its type, but I agree we could do better here, like:
```ocaml
module type S0 = sig
  type create

  val create : create

  ...everything else...
end

module type S = S0 with type create := int -> 'a t

module type SeededS = S0 with type create := ?random:bool -> int -> 'a t
```"	mbouaziz	2020-08-11T13:23:06Z		False				-1	tezos/tezos	1968
gid://gitlab/DiffNote/394121243		"Whilst those DRY (don't repeat yourself) tricks are good for syntactic conciseness, they are often worse for other metrics. The issue is that conciseness is only a mean to an end: in order to reduce the work of reviewing, you reduce the amount of code that needs to be reviewed. Conciseness is not an end in itself. In this specific case, the concise version has the following issues:

- It's not beginner friendly because (a) it uses more advanced features of the language and because (b) it doesn't mimic the write-up of the Stdlib which this library provides a kind of replacement for.
- It doesn't play well with documentation because the documentation for the module `SeededS` is a link to the documentation for `S0` but then once you reach `S0` there's no more context about the create part. (This is also valid if you are simply exploring the files with `MerlinLocate`, not just if you click on links in generated HTML pages.)

I can make a more compact version, but I prefer the explicit, unrolled version."	raphael-proust	2020-08-11T13:50:01Z		False				-2	tezos/tezos	1968
gid://gitlab/DiffNote/394121245		"Fixed.

(I think I hadn't noticed that TzPervasives was available here.)"	raphael-proust	2020-08-11T13:50:01Z		False				-2	tezos/tezos	1968
gid://gitlab/DiffNote/394124052		I agree, it is a bit sad because it is hard to notice the differences between two signatures but it is a limitation of OCaml I guess.	Saroupille	2020-08-11T13:54:11Z		False				-1	tezos/tezos	1968
gid://gitlab/DiffNote/394127457		"It's also a question of copy-paste, which is a maintenance issue: you add something to `S` then forget to add it to `SeededS`.

![img](https://www.slate.fr/sites/default/files/photos/anigif_enhanced-25449-1430095732-2.gif)"	mbouaziz	2020-08-11T13:59:16Z		False				-1	tezos/tezos	1968
gid://gitlab/DiffNote/371542645		"(I'm nitpicking)

```suggestion:-0+1
  let choose ~from_config_file = Option.value from_config_file ~default:dummy
```"	smelc	2020-07-01T09:47:49Z		False				0	tezos/tezos	1944
gid://gitlab/DiffNote/383820535		*An unmatched left parenthesis creates an unresolved tension that will stay with you all day*	vect0r	2020-07-22T14:08:23Z		False				0	tezos/tezos	1989
gid://gitlab/DiffNote/383820550		"I think that this matching is a bit weird. I understand that, as the target is `0`, the promise will be resolved ""instantly"" without any yield. As it is an assumption regarding the current implementation, should we expose and use a non-lwt and non-yield version of `generate` (using the non-exported `generate_proof_of_work_n_attempts`) function instead?"	vect0r	2020-07-22T14:08:23Z		False				0	tezos/tezos	1989
gid://gitlab/DiffNote/383867270		sorry, here you go )	raphael-proust	2020-07-22T15:11:05Z		False				-2	tezos/tezos	1989
gid://gitlab/DiffNote/383867273		"I wanted to avoid exposing the non-yielding version to prevent future uses. But it does makes that matching a bit strange.

Maybe we could have a `P2p_identity.generate_target_0` that does not yield? I think target-0 is the only case where I use this kind matching. I'll make a commit towards this and we can see if it's ok."	raphael-proust	2020-07-22T15:11:05Z		False				-2	tezos/tezos	1989
gid://gitlab/DiffNote/383874307		"Event if it not super elegant, it seems better to me that way!

To avoid future uses, why not adding a comment such as: 
`[generate_proof_of_work_with_target_0 pk] generates a proof of work for the public key [pk] following a (hardcoded) 0 target. Warning: generate_proof_of_work_with_target_0 aims to be used when generating fake identities and in tests only.`"	vect0r	2020-07-22T15:21:56Z		False				0	tezos/tezos	1989
gid://gitlab/DiffNote/383880531		Done. (Not the exact same words, but similar in spirit. I also added a doc-string for `generate_with_bound` and I mentioned `yield_every` in the doc-string of `generate`.	raphael-proust	2020-07-22T15:32:24Z		False				-2	tezos/tezos	1989
gid://gitlab/DiffNote/389639093		"This open is used for `>|=`? Which occurs only once, right? If you don't use the one of the error monad, I suppose it is because this combinator is mapped to another function?

In that case, maybe it would be better to use the explicit function instead of this combinator?"	Saroupille	2020-08-03T08:49:01Z		False				-1	tezos/tezos	1989
gid://gitlab/DiffNote/389642412		Same comment here.	Saroupille	2020-08-03T08:54:26Z		False				-1	tezos/tezos	1989
gid://gitlab/DiffNote/389672796		"Yes, it is only used for `>|=` once.

I could use the one from the `Error_monad` but that would just replace `let open Lwt.Infix in` with `let open Error_monad in`. I'd rather open the smaller `Lwt.Infix` that has been designed to be open rather than the bigger `Error_monad` that's meant as a general addition to the stdlib.

The issue with using the fully named function is that it's an infix operator which is more readable than the prefix function. This is compounded by the fact that the prefix function takes the function as the first argument and the promise as the second argument (`Lwt.map (fun proof_of_work -> …) (generate_proof_of_work …)`).

I can do `… |> Lwt.map @@ …` instead of `>|=` (but that's a bit heavy and I don't think it improves readability).

-------------------------

Do you have a preference? An other suggestion?"	raphael-proust	2020-08-03T09:48:23Z		False				-2	tezos/tezos	1989
gid://gitlab/DiffNote/391083817		With your explanations I changed my mind and we can keep as it is now.	Saroupille	2020-08-05T07:45:15Z		False				-1	tezos/tezos	1989
gid://gitlab/DiffNote/369867105		Can't we detect this and discriminate in this function ?	abate	2020-06-29T11:25:38Z		False				-1	tezos/tezos	1940
gid://gitlab/DiffNote/369872885		to make the code a bit more readable, I suggest you add here a small comment with the unregistration condition, so we know when this `maybe` function is fired without the need of going up and check the function.	abate	2020-06-29T11:31:54Z		False				1	tezos/tezos	1940
gid://gitlab/DiffNote/370028250		I don't think so. Information for version negotiation arrive only later in the handshake.	julien.t	2020-06-29T14:37:58Z		False				-2	tezos/tezos	1940
gid://gitlab/DiffNote/370028260		is it ok like that ?	julien.t	2020-06-29T14:37:58Z		False				-2	tezos/tezos	1940
gid://gitlab/DiffNote/370040846		ok. I see	abate	2020-06-29T14:53:27Z		False				-1	tezos/tezos	1940
gid://gitlab/DiffNote/373964664		Looks ok for me with that new comment. @abate feel free to reopen thread if it's not satisfying to you.	raphael-proust	2020-07-06T06:41:16Z		False				1	tezos/tezos	1940
gid://gitlab/DiffNote/373975864		Nitpick: In order to mirror the `union`/`case` encoding below, can you place this variant at the end of the sum? (Also applies to the pretty-printing.)	raphael-proust	2020-07-06T07:05:06Z		False				0	tezos/tezos	1940
gid://gitlab/DiffNote/373975869		Note for the future (not for this MR): we should look into having single logging.	raphael-proust	2020-07-06T07:05:06Z		False				-1	tezos/tezos	1940
gid://gitlab/DiffNote/373975872		"I'm not a fan of the fact that registration is not tested directly (e.g., not through a `P2p_pool.point_is_registered` or something similar) but indirectly (through “the field `id_point` is set which means that earlier in the code it went through this control structure which causes registration”).

- What about race-conditions? Can the field be modified during one of the yield that separates the two calls?
- Even if the point is owned by this function and not shared with any other part of the code (which is not easy to check), it's still difficult to review.

Alternatives:
- (preferred) match `remote_point_info` (which is `Some` if the point has been registered)
- (also possible_ return a more complex value from `register_maybe_point` (e.g., an unregistration token, or even an unregistration callback) and use that"	raphael-proust	2020-07-06T07:05:06Z		False				1	tezos/tezos	1940
gid://gitlab/DiffNote/373975877		"Nit: expand wildcards: `(_, None)`

Or, `let (addr, port_opt) = … in Option.bind port_opt (fun port -> …)` but this seems overly complex."	raphael-proust	2020-07-06T07:05:06Z		False				0	tezos/tezos	1940
gid://gitlab/DiffNote/373975879		Nit: expand wildcard patterns (`(_, None)`)	raphael-proust	2020-07-06T07:05:06Z		False				0	tezos/tezos	1940
gid://gitlab/DiffNote/374055396		At the point of unregistration, either we do have the port of the point, then we unregister the point, or we don't , in wich case we can't unregister it because it has no Point_id. I changed the comments on unregister function and at unregister point. I hope they are more clear.	julien.t	2020-07-06T09:01:59Z		False				-2	tezos/tezos	1940
gid://gitlab/DiffNote/374055405		done.	julien.t	2020-07-06T09:01:59Z		False				-2	tezos/tezos	1940
gid://gitlab/DiffNote/374055407		"I agree that the duplication is weird, but it might not be that simple. 
Although the function is called  `log`, it is used more as an event notifier for other components, especially in the tests, where it triggers some code."	julien.t	2020-07-06T09:01:59Z		False				-2	tezos/tezos	1940
gid://gitlab/DiffNote/374055412		done	julien.t	2020-07-06T09:02:00Z		False				-2	tezos/tezos	1940
gid://gitlab/DiffNote/374055414		done	julien.t	2020-07-06T09:02:00Z		False				-2	tezos/tezos	1940
gid://gitlab/DiffNote/374068389		"The comment is a clearer. But it's the control-flow I find disturbing: basically

```
let maybe_do p = match p.foo with Some blah -> do p | None -> None
let maybe_undo p = match p.foo with Some blah -> undo p | None -> ()

let main p =
 …
 let result_of_do = maybe_do p in
 …
 … (* lots of things happen here *)
 … (* some yielding even *)
 … (* some possible failures even *)
 …
 maybe_undo p
```

The difficult thing to review is: What happens if `p.foo` is modified between `maybe_do` and `maybe_undo`? Can it be modified?

E.g., What happens if the point tries to connect twice and we're running two of these authentications concurrently?"	raphael-proust	2020-07-06T09:20:22Z		False				1	tezos/tezos	1940
gid://gitlab/DiffNote/374068393		"Maybe one of the code that it triggers is emitting the event?

Or maybe we just wrap `Events.emit` in a function that does both?

But that's for a future MR anyway."	raphael-proust	2020-07-06T09:20:22Z		False				-1	tezos/tezos	1940
gid://gitlab/DiffNote/374310349		"Well, you are right, and there was actually a minor concurrency issue:
A concurrent connection attempt scheduled after unregistration but before changing the connection status would have led to a re-registration of the point in the concurrent thread, without unregistration as it would fail on  `Already_connected` error. I moved the unregistration at the very end of the error handling.

Otherwise, undo is impotent so it doesn't matter to have it applied twice (though I can't think of a situation that would lead to that). Any other thread will either come to the same conclusion that the point should be forgotten, or find out that there is an ongoing connection request and stop its connection attempt.

In case of failure we would not unregister the point. That's not perfect.
We could use a protect that encapsulate the whole process following the initial meta-data exchange.

I do agree that the control-flow is inelegant. "	julien.t	2020-07-06T14:34:57Z		False				-2	tezos/tezos	1940
gid://gitlab/DiffNote/367979257		Here is another instance of `pipelines` encoded as `int8`. Should it also change? I think I agree with Mehdi that it would be good to understand the root cause before changing the encoding (which would make it easier to add a regression test).	arvidnl	2020-06-25T08:47:13Z		False				0	tezos/tezos	1928
gid://gitlab/DiffNote/367982987		I''ve changed this one as well. I think that there is no harm to use a slightly larger int representation if we can avoid these kind of failures. I wasn't able to come up with a reproducible  test to trigger this problem. But I've witnessed it a few times on a test machine... If somebody has an idea how to force the overflow of this counter I'll be happy to implement the test.	abate	2020-06-25T08:52:01Z		False				-2	tezos/tezos	1928
gid://gitlab/DiffNote/367984630		If i understand correctly, looking at `worker_directory.ml`, `pipelines` comes from `Chain_validator.pending_requests_length w` on line 112. Which returns an integer. Is there some guarantee that the number of pending requests are less than a certain number (i.e. 256)? Otherwise, even int16 does not seem to be the correct encoding. To make the regression tests, post >255 requests, and call the RPC?	arvidnl	2020-06-25T08:53:55Z		False				-1	tezos/tezos	1928
gid://gitlab/DiffNote/367990579		"@raphael-proust maybe you can answer this question ? i don't think we have any such guarantees on the length of the  `pending_requests` . At the same time, I don't think we cared much to check if the an integer can really overflow in other parts of the code, and we rely more on intuition. I think this encoding is no different. The intuition was that these pipelines could not overflow int8, but it seems that our intuition was wrong ...

Maybe this opens up an issue where we should check for each encoding if the integer represented could overflow the encoding and in that case either change the encoding or cap the value ?"	abate	2020-06-25T09:01:26Z		False				-2	tezos/tezos	1928
gid://gitlab/DiffNote/368215713		"@pietro I think you are correct: these are encodings for “numbers that should normally be in a reasonable range”. It's a bit like encoding time as an `int64`: it should be fine, right?

In practice these are only for Json (unless we have RPC format over RPC??). And in Json `int8`, `int16`, and `int31` are all the same size: they are represented as a `float` (the native format for numbers in Javascript). Actually, even `int53` (the limit for all-integers float density).

So two things:

- We could use `int31` here for even more safety without any additional cost.
- Should we require `Json_encoding.t` for RPC arguments so we can make use of special constructs such as `int53`?"	raphael-proust	2020-06-25T13:39:37Z		False				-1	tezos/tezos	1928
gid://gitlab/DiffNote/369825902		Anyway, `int16` is fine for me if you feel confident that it should suffice to hold reasonable values for `pipelines`.	arvidnl	2020-06-29T10:21:42Z		False				-1	tezos/tezos	1928
gid://gitlab/DiffNote/369892198		"I think that it's (a) a likely working solution and (b) a readily available solution.

@abate  if you think `int31` is warranted, it comes at no additional cost in terms of representation so you can change to that. I think `int16` should be ok (~32k maximum) so I'm ok with the current change. Feel free to resolve this thread and the other one."	raphael-proust	2020-06-29T11:57:53Z		False				-1	tezos/tezos	1928
gid://gitlab/DiffNote/369894361		I think as well `int16` is ok. If the pipeline gets bigger than 32K elements, the node will have much bigger problems to handle than a simple rpc error	abate	2020-06-29T12:00:23Z		False				-2	tezos/tezos	1928
gid://gitlab/DiffNote/374084452		"```suggestion:-0+0
script_dir=""$(cd ""$(dirname ""$0"")"" && pwd -P)""
```"	mbouaziz	2020-07-06T09:42:05Z		False				0	tezos/tezos	1949
gid://gitlab/DiffNote/374084464		"```suggestion:-0+0
When passing a high level (greater than 28082), it assumes that you are using a mainnet
```"	mbouaziz	2020-07-06T09:42:06Z		False				0	tezos/tezos	1949
gid://gitlab/DiffNote/374084472		Why isn't this in `src/`?	mbouaziz	2020-07-06T09:42:06Z		False				-1	tezos/tezos	1949
gid://gitlab/DiffNote/374084476		This file doesn't look ocamlformat-ed	mbouaziz	2020-07-06T09:42:06Z		False				-1	tezos/tezos	1949
gid://gitlab/DiffNote/374147814		Why not reference the new scripts?	arvidnl	2020-07-06T11:14:26Z		False				0	tezos/tezos	1949
gid://gitlab/DiffNote/374157172		"I'm not sure where it should be, I left it where the previous version used to be.

I think it doesn't really belong to the tezos code base

I would say that it's used as a script, it's just written in ocaml

Where do you think this should be ?"	sribar	2020-07-06T11:29:29Z		False				-2	tezos/tezos	1949
gid://gitlab/DiffNote/374157173		True, fixed	sribar	2020-07-06T11:29:29Z		False				-2	tezos/tezos	1949
gid://gitlab/DiffNote/374166052		![shrug](https://i.pinimg.com/originals/88/83/a8/8883a80ce975b8452bf1ee415479cd82.gif)	mbouaziz	2020-07-06T11:37:44Z		False				-1	tezos/tezos	1949
gid://gitlab/DiffNote/370266314		"If we switch to `bash` we need `#! /usr/bin/env bash` (some distros don't have `bash` in `/bin`).

(the rest of the changes do indeed use many bashisms so yes this is necessary)"	smondet	2020-06-29T19:28:38Z		False				0	tezos/tezos	1929
gid://gitlab/DiffNote/370266323		I guess this needs backquotes to be consistent with the markdown-ish of the above.	smondet	2020-06-29T19:28:38Z		False				0	tezos/tezos	1929
gid://gitlab/DiffNote/370266326		This output seems to make a gigantic single line when running `make check-linting`.	smondet	2020-06-29T19:28:38Z		False				0	tezos/tezos	1929
gid://gitlab/DiffNote/370525142		Done	mbouaziz	2020-06-30T06:57:30Z		False				-2	tezos/tezos	1929
gid://gitlab/DiffNote/370525146		Done	mbouaziz	2020-06-30T06:57:30Z		False				-2	tezos/tezos	1929
gid://gitlab/DiffNote/370525150		Done	mbouaziz	2020-06-30T06:57:30Z		False				-2	tezos/tezos	1929
gid://gitlab/DiffNote/391126124		"```suggestion:-0+0
``.rolling``), although the script also accepts snapshot files taken with
```"	tzemanovic	2020-08-05T08:57:19Z		False				0	tezos/tezos	1975
gid://gitlab/DiffNote/391126402		"```suggestion:-0+0
our example ``/tmp``) with the same name as the snapshot file, and imports the
```"	tzemanovic	2020-08-05T08:57:45Z		False				-1	tezos/tezos	1975
gid://gitlab/DiffNote/391126778		"```suggestion:-0+0
as the snapshot file, then the script assumes that the context was already
```"	tzemanovic	2020-08-05T08:58:24Z		False				-1	tezos/tezos	1975
gid://gitlab/DiffNote/391128503		"```suggestion:-0+0
already, then it creates it and imports the context from the snapshot
```"	tzemanovic	2020-08-05T09:01:13Z		False				0	tezos/tezos	1975
gid://gitlab/DiffNote/391130444		"Does it have to be before? If not, then just:
```suggestion:-0+2
cycle. This behaviour can be personalised by modifying test file
``tezt/manual_tests/migration.ml``.
```"	tzemanovic	2020-08-05T09:04:33Z		False				0	tezos/tezos	1975
gid://gitlab/DiffNote/391132136		What are the pending operations, is that the migration? Why does it need to bake until a new cycle?	tzemanovic	2020-08-05T09:07:27Z		False				0	tezos/tezos	1975
gid://gitlab/DiffNote/391133942		"Verbose mode doesn't affect what's written to a log file, no?
```suggestion:-0+1
use a log file when the migration is expected to produce a lot of output. 
In our example, we can collect the
```"	tzemanovic	2020-08-05T09:10:38Z		False				0	tezos/tezos	1975
gid://gitlab/DiffNote/391135544		"```suggestion:-0+0
the developer can start a node with the migrated context by invoking::
```"	tzemanovic	2020-08-05T09:13:28Z		False				0	tezos/tezos	1975
gid://gitlab/DiffNote/391136864		"I thought you suggested to change ""a node"" with ""the node"", but it was precisely the opposite.

What about ""the node with the migrated context""? The node is determinate, there is only the one you imported and then migrated."	alvarogarciaperez	2020-08-05T09:15:38Z		False				0	tezos/tezos	1975
gid://gitlab/DiffNote/391139061		"Used ""any of such operations to the storage that is pending has been successfully applied"".

In the line before I already explain that those ""operations to the storage are internally triggered by the protocol""."	alvarogarciaperez	2020-08-05T09:19:15Z		False				0	tezos/tezos	1975
gid://gitlab/DiffNote/391139146		I'm not entirely sure. I guess the migration test has to be compiled, in which case the edit has to be before preparation.	alvarogarciaperez	2020-08-05T09:19:26Z		False				0	tezos/tezos	1975
gid://gitlab/DiffNote/391139628		"I don't think that this adds much, it just kinda repeats what was already explained above.
```suggestion:-0+16
```"	tzemanovic	2020-08-05T09:20:16Z		False				-1	tezos/tezos	1975
gid://gitlab/DiffNote/391139989		"Used ""it creates that folder"", never mind the repetition. Using two ""it""'s is confusing."	alvarogarciaperez	2020-08-05T09:20:56Z		False				0	tezos/tezos	1975
gid://gitlab/DiffNote/391140133		Done.	alvarogarciaperez	2020-08-05T09:21:11Z		False				-1	tezos/tezos	1975
gid://gitlab/DiffNote/391140197		Done.	alvarogarciaperez	2020-08-05T09:21:16Z		False				-1	tezos/tezos	1975
gid://gitlab/DiffNote/391140240		Done.	alvarogarciaperez	2020-08-05T09:21:21Z		False				0	tezos/tezos	1975
gid://gitlab/DiffNote/391141825		"Migration doesn't output anything (except ""SUCCESS"""") unless you specify -v. If you do, and since the migration test is generally very long, so are the logs, and then it is recommended to collect the output in a log file. I'll rewrite this line to be more precise."	alvarogarciaperez	2020-08-05T09:23:53Z		False				0	tezos/tezos	1975
gid://gitlab/DiffNote/391142693		`dune exec` will compile it, if needed	tzemanovic	2020-08-05T09:25:26Z		False				0	tezos/tezos	1975
gid://gitlab/DiffNote/391145649		"I think the use of the word ""operations"" may be a bit misleading, it might be better to just use ""migration"". Either way, the migration runs on the last block of the predecessor protocol, so I don't think that baking until a new cycle is required (although it performs a good sanity check that migration went well and we can keep baking)"	tzemanovic	2020-08-05T09:30:30Z		False				0	tezos/tezos	1975
gid://gitlab/DiffNote/391147539		Could we use a CLI argument to pass the protocol hash and context dir (below) to the test rather than rewriting it?	tzemanovic	2020-08-05T09:33:18Z		False				-1	tezos/tezos	1975
gid://gitlab/DiffNote/391148086		"Do you mean the explanation of ``--keep-temp`` or the details on how to test the migration again?

I believe the first paragraph in your suggested change is needed to complete the explanation of how ``--keep-temp`` should be used. The explanation of how to test again is only for uniformity with the rest of the document, but it can be sumarised as follows:

""The migration can be tested again by stopping the node (if it was previously up) and running the test file ``tezt/manual_tests/main.exe``."""	alvarogarciaperez	2020-08-05T09:34:08Z		False				-1	tezos/tezos	1975
gid://gitlab/DiffNote/391153081		:thumbsup: What I meant is that verbose mode doesn't affect the what's written to the `--log-file`, only in stdout	tzemanovic	2020-08-05T09:41:26Z		False				0	tezos/tezos	1975
gid://gitlab/DiffNote/391153225		"Do you mean passing CLI arguments for variables ``proto_dir`` and ``proto_version``? These are calculated in a fixed way, which is in the spirit of the automatisation.

I cannot guarantee correct behavior of the scripts if we modify them, I didn't develop them myself and they are enormously tricky, so I wouldn't change them significantly without @sribst."	alvarogarciaperez	2020-08-05T09:41:37Z		False				-1	tezos/tezos	1975
gid://gitlab/DiffNote/391154673		Yup, the `--keep-temp` is explained above. Your suggestion sounds good to me!	tzemanovic	2020-08-05T09:43:53Z		False				-1	tezos/tezos	1975
gid://gitlab/DiffNote/391158152		"> Do you mean passing CLI arguments for variables `proto_dir` and `proto_version`?
Yup, tezt has Cli module for that.

I think we would only be modifying the automated test, which we can re-run at will. It's not a biggie though, because other things like yes-node modify the code in place as well, so I don't mind keeping this as is."	tzemanovic	2020-08-05T09:49:21Z		False				-1	tezos/tezos	1975
gid://gitlab/DiffNote/391159300		"The cli option are Tezt wide no? 

I'm not sure it's really worth adding a global option for that test?"	sribar	2020-08-05T09:51:08Z		False				-2	tezos/tezos	1975
gid://gitlab/DiffNote/391159305		Baking until the next cycle is not required but as you said it's mainly to check that action triggered at the end of a cycle where not broken by the migration	sribar	2020-08-05T09:51:08Z		False				-2	tezos/tezos	1975
gid://gitlab/DiffNote/391162978		"True, I removed the ""before"" sentence."	alvarogarciaperez	2020-08-05T09:57:17Z		False				0	tezos/tezos	1975
gid://gitlab/DiffNote/391163507		I see, I'll polish this sentence too.	alvarogarciaperez	2020-08-05T09:58:16Z		False				0	tezos/tezos	1975
gid://gitlab/DiffNote/391167971		I see. No, ``-v`` is not required if you specify a log file. I'll polish the sentence.	alvarogarciaperez	2020-08-05T10:04:35Z		False				0	tezos/tezos	1975
gid://gitlab/DiffNote/391173045		True, agreed	tzemanovic	2020-08-05T10:12:57Z		False				-1	tezos/tezos	1975
gid://gitlab/DiffNote/391181397		"Let me be a bit more precise. I used:

The migration can be tested again by stopping the node (if it was up) and
running the test file with::

  $ dune exec ./tezt/manual_tests/main.exe -- --keep-temp migration

There is no need to prepare the migration again."	alvarogarciaperez	2020-08-05T10:27:42Z		False				-1	tezos/tezos	1975
gid://gitlab/DiffNote/391181456		Done.	alvarogarciaperez	2020-08-05T10:27:49Z		False				0	tezos/tezos	1975
gid://gitlab/DiffNote/391181683		Please check the new sentence.	alvarogarciaperez	2020-08-05T10:28:14Z		False				0	tezos/tezos	1975
gid://gitlab/DiffNote/391181725		Please check the new paragraph.	alvarogarciaperez	2020-08-05T10:28:20Z		False				0	tezos/tezos	1975
gid://gitlab/DiffNote/391189984		"```suggestion:-0+0
file). Each time the automatic test is run, Tezt creates a temporary folder
```"	tzemanovic	2020-08-05T10:45:07Z		False				0	tezos/tezos	1975
gid://gitlab/DiffNote/391191070		actually, I think this was a new paragraph	tzemanovic	2020-08-05T10:47:29Z		False				0	tezos/tezos	1975
gid://gitlab/DiffNote/391193654		Fat fingers... Done!	alvarogarciaperez	2020-08-05T10:52:55Z		False				0	tezos/tezos	1975
gid://gitlab/DiffNote/391213342		"```suggestion:-1+0
  let yes_wallet = Temp.dir ""yes-wallet"" in
```
(now that `//` is in `Base`)"	romain.nl	2020-08-05T11:25:29Z		False				0	tezos/tezos	1975
gid://gitlab/DiffNote/391286887		Done.	alvarogarciaperez	2020-08-05T13:21:13Z		False				0	tezos/tezos	1975
gid://gitlab/DiffNote/391720011		"It's the node that have been patch not the protocol.
```suggestion:-0+0
4. patch the shell to obtain a `yes-node` that can fake baker
```"	sribar	2020-08-06T08:44:47Z		False				-2	tezos/tezos	1975
gid://gitlab/DiffNote/391720014		"Same, 

it's the node that have been patch not the protocol"	sribar	2020-08-06T08:44:47Z		False				-2	tezos/tezos	1975
gid://gitlab/DiffNote/391720017		"Actually here we compile both the shell and the protocol.

```suggestion:-0+0
6. Compile the project
```"	sribar	2020-08-06T08:44:47Z		False				-2	tezos/tezos	1975
gid://gitlab/DiffNote/391720021		Same here we need to compile the project (with the yes patch and the possibly new snapshoted protocol)	sribar	2020-08-06T08:44:47Z		False				-2	tezos/tezos	1975
gid://gitlab/DiffNote/391720027		"This is not true, I've not implemented that in the script.
It could be a nice add-on but maybe for another time ?

If it's given a directory the script should fail"	sribar	2020-08-06T08:44:48Z		False				-2	tezos/tezos	1975
gid://gitlab/DiffNote/391720031		"```suggestion:-0+0
Run the resulting node (assuming temp folder ``/tmp/tezt-526039``)::
```"	sribar	2020-08-06T08:44:48Z		False				-2	tezos/tezos	1975
gid://gitlab/DiffNote/391778792		Done.	alvarogarciaperez	2020-08-06T10:18:47Z		False				0	tezos/tezos	1975
gid://gitlab/DiffNote/391778904		Fixed.	alvarogarciaperez	2020-08-06T10:18:58Z		False				0	tezos/tezos	1975
gid://gitlab/DiffNote/391778991		Done.	alvarogarciaperez	2020-08-06T10:19:09Z		False				-1	tezos/tezos	1975
gid://gitlab/DiffNote/391779120		"I'll use ""compile the project"", which is more precise."	alvarogarciaperez	2020-08-06T10:19:24Z		False				0	tezos/tezos	1975
gid://gitlab/DiffNote/391779215		Done.	alvarogarciaperez	2020-08-06T10:19:33Z		False				0	tezos/tezos	1975
gid://gitlab/DiffNote/391779282		Done.	alvarogarciaperez	2020-08-06T10:19:40Z		False				0	tezos/tezos	1975
gid://gitlab/DiffNote/391914740		"As this service has some issues regarding the snapshot size, what do you think about switching to tulip.tools?
```
block_height=$(wget https://snaps.tulip.tools/snapshots.json -O - | jq -r .Snapshots.mainnet_rolling.Block)
block_hash=$(wget https://snaps.tulip.tools/snapshots.json -O - | jq -r .Snapshots.mainnet_rolling.Blockhash)
filename=$(wget https://snaps.tulip.tools/snapshots.json -O - | jq -r .Snapshots.mainnet_rolling.Filename)
wget https://snaps.tulip.tools/$filename  
```"	dannywillems	2020-08-06T14:07:35Z		False				0	tezos/tezos	1975
gid://gitlab/DiffNote/391941047		"I'm untroubled with which service we use for the snapshots. @sribst, do you see any incompatibility with TulipTools and the scripts?

I believe the issue with the size was fixed in the latest update to ``tezt/manual_tests/migration.ml``."	alvarogarciaperez	2020-08-06T14:41:43Z		False				0	tezos/tezos	1975
gid://gitlab/DiffNote/393022938		"I have no issue with using TulipTools over phlogi

done in 7e50d3fb32

I'll fix-up commit when this thread is resolved"	sribar	2020-08-10T06:10:53Z		False				-2	tezos/tezos	1975
gid://gitlab/DiffNote/396752591		resolving as this is done and tested in the CI	tzemanovic	2020-08-17T08:07:14Z		False				0	tezos/tezos	1975
gid://gitlab/DiffNote/376672217		"Eventually, we'll need the traces to become abstract. It's the source of too many problems.

In the meantime, this is ok. But let's think about the future a bit:

- We could have an `error` type and a `trace` type. The idea is that errors are what you emit, what you put in, what you construct. And traces are what you receive, what you get, what you observe. That's what the `lwt-res-lib` used to do before this patch.

- We could use just `'err`, but then provide `inj : error -> trace` and force the type to be `trace` at some higher-level of the program.

- Anything else?"	raphael-proust	2020-07-09T15:13:23Z		False				0	tezos/tezos	1961
gid://gitlab/DiffNote/376672223		"Here's something:

- The `tzresult` being hardcoded had a kind of meaning. Specifically, the way traces were combined was sort of reliant on the meaning of traces. The `tzresult` combined in a certain way.

- The new version, because it is agnostic to the `'trace` type, is a bit strange. Sort of under-documented. The only way to be generic in regards to that type is to just pick one of the multiple. But it needs more documentation.

Alternatively, we might want to pass a `combine: 'trace -> 'trace -> 'trace`. Or something of the sort. Possibly at a higher-level as a functor application."	raphael-proust	2020-07-09T15:13:24Z		False				5	tezos/tezos	1961
gid://gitlab/DiffNote/376672228		"Why `'err list` rather than `'trace`? That forces a specific shape of errors rather than staying agnostic to it.

It requires some changes to the error-monad as well, but these changes are ok. I'll push a commit on top so we can discuss that."	raphael-proust	2020-07-09T15:13:24Z		False				0	tezos/tezos	1961
gid://gitlab/DiffNote/376672231		"(Because this is an RFC, I'm just chatting about possible designs, even though it's not related to current MR.)

So one thing I was considering is renaming those into `false_e: (bool, 'trace) result` and `false_s: bool Lwt.t` and `false_es: (bool, 'trace) result Lwt.t`. This would use the same suffixes as the functions because they are 0-ary functions.

It's not the best because it's basically just trying to work-around the `return` keyword when we have three monads mixed together. But I think it beats `ok_false`, `Lwt.return_false` and `return_false` which is kind of all over the place.

Maybe we can rename the returns `e`, `s`, and `es`. It's a bit terse and less readable I think. Maybe `return_e`, `return_s`, and `return_es`.

----------------------------

Also, we could have `Infix_e`, `Infix_s`, and `Infix_es` to open locally to say in this function I'm using only the error monad so give me the error-only monad operators."	raphael-proust	2020-07-09T15:13:24Z		False				2	tezos/tezos	1961
gid://gitlab/DiffNote/376690096		I agree. Though in the spirit of this MR, instead of the `trace` type, it could be parameterized by the `error`: `type 'err trace` with `type tztrace = error trace`	mbouaziz	2020-07-09T15:34:34Z		False				-2	tezos/tezos	1961
gid://gitlab/DiffNote/376693281		Right, the implementation being wrong I was able to write a type more generic than it should be. I'll write a `combine` and change `join_e` type with `'err trace`	mbouaziz	2020-07-09T15:39:09Z		False				-2	tezos/tezos	1961
gid://gitlab/DiffNote/376693282		All `_p` functions combine (or should) traces in some way then can't be generic in the trace type	mbouaziz	2020-07-09T15:39:09Z		False				-2	tezos/tezos	1961
gid://gitlab/DiffNote/376693284		I like it, though I guess it requires discussion with more people :)	mbouaziz	2020-07-09T15:39:09Z		False				-2	tezos/tezos	1961
gid://gitlab/DiffNote/377055088		And also it's not urgent so wecan deal with that later.	raphael-proust	2020-07-10T07:24:10Z		False				2	tezos/tezos	1961
gid://gitlab/DiffNote/377131388		Done in 248f121ea454ed4265c11f654dc6265784eeaa84	mbouaziz	2020-07-10T09:05:06Z		False				-2	tezos/tezos	1961
gid://gitlab/DiffNote/377131393		"I agree for `both_e` but not for `join_e`: there is no combining of traces in `join_e`, it just stops at the first error and return the given trace.

Do we want something else? I think it's the same question as for `iter_(e)p`"	mbouaziz	2020-07-10T09:05:06Z		False				-2	tezos/tezos	1961
gid://gitlab/DiffNote/378476422		"Right now this “pick one (unspecified) error from them all” fits the way Lwt does exception management. That's (1) good because it makes it somewhat uniform, (2) irrelevant because very few people even think about how Lwt manages exceptions, and (3) bad because we should provide something better and if that means avoiding `Lwt.join` in favour of our custom `join_p` then so be it.

AFAIC, this is all very theoretical until we have a good way to combine traces. We still don't.

And so the more fundamental question we have to answer is: What is a combined trace? How do we combine traces? How do we inspect a combined trace?"	raphael-proust	2020-07-13T14:36:21Z		False				5	tezos/tezos	1961
gid://gitlab/DiffNote/378548892		Is the aim to eventually lift that and make it a parameter of the monad? Or is it to ease readability? Or is it to ease future transition to a more precise semantic by centralising the place where the change is made?	raphael-proust	2020-07-13T16:06:35Z		False				0	tezos/tezos	1961
gid://gitlab/DiffNote/378548897		That's good. We can later evolve that type to be abstract and/or to carry more info and/or to change shape. I like it.	raphael-proust	2020-07-13T16:06:35Z		False				0	tezos/tezos	1961
gid://gitlab/DiffNote/378548900		When/If we make the trace abstract, this will be a wrapper around a sequential constructor for traces. And `combine` will be a concurrent constructor for traces.	raphael-proust	2020-07-13T16:06:36Z		False				-1	tezos/tezos	1961
gid://gitlab/DiffNote/378548901		"Thinking more about this…

In lwtreslib, after some discussion, we settled on a best-effort semantic for `_p`/`_ep` functions (but an early escape for `_s`/`_es`). This means that when a `_p`/`_ep` function returns, all the errors are known. Does it make sense to throw away the info that's already there, available? Should we combine them?

For `_e`, because there is no yielding at all, the traversal is actually closer to the `_s`/`_es` form. And so an early escape seems more appropriate.

OTOH, I do find it strange to have `both` and `join`/`all` distinct on this deep a level. It bothers me some."	raphael-proust	2020-07-13T16:06:36Z		False				5	tezos/tezos	1961
gid://gitlab/DiffNote/378548902		"`'in_error out_error` is a bit strange. The idea of in/out was to differentiate what you inject into the system and what you observe coming out of the system.

Maybe `'error wrap` or even `'error trace` or something along those lines."	raphael-proust	2020-07-13T16:06:36Z		False				0	tezos/tezos	1961
gid://gitlab/DiffNote/380035844		One, several or all of the above :)	mbouaziz	2020-07-15T15:42:39Z		False				-2	tezos/tezos	1961
gid://gitlab/DiffNote/380035845		Indeed	mbouaziz	2020-07-15T15:42:39Z		False				-2	tezos/tezos	1961
gid://gitlab/DiffNote/380035848		Right :grin:	mbouaziz	2020-07-15T15:42:39Z		False				-2	tezos/tezos	1961
gid://gitlab/DiffNote/380035852		"That's not clear to me. Inspecting errors (or traces) of *parallel* execution seems hard, maybe we'd want both versions:
1. stop at first (any) error, or
2. create a combined trace.

1 is good when I don't really care about the errors and I just want to fail fast. 2 is better if I want to pretty-print all of them.

I'm also think about a 3rd possibility: fail fast on the first error but also return a promise to retrieve the other ones. Not sure it's easily usable though."	mbouaziz	2020-07-15T15:42:39Z		False				-2	tezos/tezos	1961
gid://gitlab/DiffNote/380520691		"Having both version makes it hard to design a good interface: Do we have `policy:[`Best_effort | `Fail_early]` named parameter? An optional parameter? With what default? Do we have two modules for each collection we might want to traverse `{List,Seq,Array,…}.{Best_effort,Fail_early}`? Or two sets of collections `{Best_effort,Fail_early}.{List,Seq,…}`?)

It also requires more documentation, more code, more tests, etc.

The ""3rd possibility"" is just another way to provide both versions. Instead of different call points you return a tuple which basically corresponds to returning two return points. I.e., `iter_ep ~policy:`Best_effort f xs = snd @@ iter_ep_return_both f xs` and `iter_ep ~policy:`Fail_early f xs = fst @@ iter_ep_return_both f xs`.


------------------------------------

The big question with 1 is: What happens with the unresolved promises when we fail early? Consider the following (obviously artificial) example:

```
iter_ep
  (fun f -> f ())
  [ (fun () -> fail …);
    (fun () ->
      Lwt_unix.sleep 1. >>= fun () ->
      some_side_effect () >|= fun () ->
      Ok () ]
```

When the promise returned by the call to that function, do we cancel the other promise or not? Implicitly cancelling promises makes programs really difficult to reason about, but so does concurrent side-effects from a call that's done somewhere far removed from the execution point.


**IMO**: It's important to have one solid semantic that is consistent across all our traversors.

--------------------------------------

With 2 the difficulty is inspecting the trace. Having first-class patterns would help us design better handlers, but in the mean time here are a few admittedly clunky ways to deal with combined traces. Note that they are all meant to be used as `… >>= f args` with the last ommitted argument being

```
(** [recover f (Ok ())] is a promise already resolved to [()]
    [recover f (Error trace)] is [Lwt_list.iter_p f es] where [es] are all the
                              top errors of the multiple parallelly-composed
                              subtraces of [trace]. (If [trace] is not made of
                              a single sequential trace, then [es] has a single
                              element.)
*)
val recover: ('error -> unit Lwt.t) -> (unit, 'error trace) result -> unit Lwt.t

(** [salvage f (Ok ())] is a promise already resolved to [Ok ()]
    [salvage f (Error trace)] concurrently ([_p]) applies [f] to each [e] in [es]
                              (with the same [es] as in [recover]). If all the
                              [f e] resolve to [Ok ()] then the promise as a whole
                              resolves to [Ok ()], otherwise it resovles to
                              [Error new_trace] where [new_trace] is a parallel
                              composition of all the resulting traces.
*)
val salvage: ('error -> 'error trace -> (unit, 'error trace) result Lwt.t)
          -> (unit, 'error trace) result
          -> (unit, 'error trace) result Lwt.t

(** [log_and_discard_errors f (Ok ())] is a promise already resolved to [Ok ()]
    [log_and_discard_errors f (Error trace)] is a promise that resolves to
                                             [Error new_trace] where [new_trace]
                                             is a parallel composition of the
                                             sequential traces of [trace] that
                                             [f] returned [false] (i.e, ""do not
                                             discard"") for. If [new_trace] would
                                             be empty, the whole promise
                                             resolves to [Ok ()] instead.
*)
val log_and_discard_errors: ('error -> 'error trace -> bool Lwt.t)
                         -> (unit, 'error trace) result
                         -> (unit, 'error trace) result Lwt.t
```

We can also have handlers for checking that all top errors verify a predicate (e.g., “all errors are Timeouts or Cancellations” or “all errors are benign I/O errors”), for checking that one of the top errors verifies a predicate (e.g., “at least one of the errors is an economic error”), for folding over the errors to build another value of the same type as the one carried by `Ok`, etc.

Again, those are sort of clunky. But they all rely on some sound concepts: a fully sequential trace is just a parallel composition of traces with a single trace that has been composed into the whole, an empty parallel composition of traces is just [Ok ()]. And based on that, you can make generic ways to handle traces whatever their composition.

**IMO**: This still needs work but I think we can make usable, useful error handlers for parallel traces."	raphael-proust	2020-07-16T09:15:09Z		False				5	tezos/tezos	1961
gid://gitlab/DiffNote/380520696		"Ok. So that means we can't use just a type parameter.

But using `list` specifically means that you restrict yourself to a few possible ways to combine traces (selection, concatenation).

We need a middle ground."	raphael-proust	2020-07-16T09:15:09Z		False				0	tezos/tezos	1961
gid://gitlab/DiffNote/380520702		Sounds good!	raphael-proust	2020-07-16T09:15:10Z		False				0	tezos/tezos	1961
gid://gitlab/DiffNote/381105528		This has been changed in the last commit	mbouaziz	2020-07-17T07:20:46Z		False				-2	tezos/tezos	1961
gid://gitlab/DiffNote/381418635		I pushed one (1) commit to change this to `'error`/`trace`.	raphael-proust	2020-07-17T14:31:08Z		False				0	tezos/tezos	1961
gid://gitlab/DiffNote/381418637		I'm resolving this and other threads that we seem to agree on.	raphael-proust	2020-07-17T14:31:08Z		False				0	tezos/tezos	1961
gid://gitlab/DiffNote/365714553		"```suggestion:-0+0
              head. A non empty list allows to request one or more specific \
```"	mbouaziz	2020-06-22T13:51:41Z		False				0	tezos/tezos	1916
gid://gitlab/DiffNote/376591611		Should use Simple_events instead?	arvidnl	2020-07-09T13:42:25Z		False				-1	tezos/tezos	1936
gid://gitlab/DiffNote/376591619		Add comment here that meta data is pruned under certain circumstances?	arvidnl	2020-07-09T13:42:25Z		False				0	tezos/tezos	1936
gid://gitlab/DiffNote/376702907		In the daemons, we keep using the DSL because obsidian tools rely on that (not sure if still true). So this is, in my opinion, out of scope and the event system rehaul (if possible at all) deserve a separate rehauling MR.	vbotbol	2020-07-09T15:52:57Z		False				-2	tezos/tezos	1936
gid://gitlab/DiffNote/376702912		Done	vbotbol	2020-07-09T15:52:58Z		False				-2	tezos/tezos	1936
gid://gitlab/DiffNote/376724460		"This catch is a bit weird. It seems to be a good idea to add a comment.

I suggest to do something like:

```
let metadata = (function | Ok metadata -> return_some metadata | Error _ -> return_none) in 
…
match metadata with | Some _ -> (* with meta*) | None -> (* without*)
```

What do you think? (Same remark for the next two `Lwt.catch`)."	vect0r	2020-07-09T16:25:18Z		False				-1	tezos/tezos	1936
gid://gitlab/DiffNote/376724461		"Is it a good idea to be more explicit? Like `Pruned metadata. The operation receipt was removed accordingly to the node's history mode`.

Same remark for all the `lib_client` errors."	vect0r	2020-07-09T16:25:18Z		False				0	tezos/tezos	1936
gid://gitlab/DiffNote/377187541		Okay, works for me.	arvidnl	2020-07-10T10:13:29Z		False				-1	tezos/tezos	1936
gid://gitlab/DiffNote/378410279		I did not understand the suggestion. `State.Block.all_operations_metadata` might raise an exception, not an error monad. A proper way of doing that would be to implement `all_operations_metadata` to return a tzresult or provide a `..._opt` version. I felt it was a bit out of scope as it requires a lot of refactoring. That and the fact that a proper refactoring exist in the new store made be go for the simple solution	vbotbol	2020-07-13T13:29:06Z		False				-2	tezos/tezos	1936
gid://gitlab/DiffNote/378410280		"I tried to be consistent with the previous error ""handling"". I'll add your suggestion, it looks better."	vbotbol	2020-07-13T13:29:07Z		False				-2	tezos/tezos	1936
gid://gitlab/DiffNote/361854198		"Why not use a single timestamp for this whole chunk?  
There's no yielding here so it should be close enough as to not matter. And similar patterns of using a single timestamp in similar situations exist above."	raphael-proust	2020-06-16T09:24:21Z		False				-1	tezos/tezos	1902
gid://gitlab/DiffNote/361859864		Ah, I forgot to factor these, good catch! I'll push a fix asap	igarnier	2020-06-16T09:31:12Z		False				-2	tezos/tezos	1902
gid://gitlab/DiffNote/362030782		Done	raphael-proust	2020-06-16T12:34:00Z		False				-1	tezos/tezos	1902
gid://gitlab/DiffNote/419832753		"About the different versions of `combine`:

- I think that `combine_give` is actually more general than `combine_k` and easier to use. Indeed you can write `let combined, leftovers = combine_give a b in 42` but you cannot write `combine_k a b @@ fun ~combined ~leftovers -> 42`. Maybe I'm missing the value of CPS here?

- I'm not sure about the name `combine_give` though (give what?). Maybe `combine_partial`?

- I feel that `combine_pad` could be useful but I don't actually have a real use case to show."	romain.nl	2020-09-28T15:53:37Z		False				4	tezos/tezos	1967
gid://gitlab/DiffNote/419875179		We should almost provide a `List.random_elt` but it would still return an option because of the empty list case...	mbouaziz	2020-09-28T17:12:42Z		False				-1	tezos/tezos	1967
gid://gitlab/DiffNote/419875185		I guess returning `false` would be enough here	mbouaziz	2020-09-28T17:12:43Z		False				0	tezos/tezos	1967
gid://gitlab/DiffNote/419875192		Could we make a linter to enforce this?	mbouaziz	2020-09-28T17:12:43Z		False				-1	tezos/tezos	1967
gid://gitlab/DiffNote/419875202		"Move the `return` to the `Ok` case
```suggestion:-0+0
        List.map2_e
             ~when_different_lengths:(Exn Not_found)
             (List.map2
                ~when_different_lengths:(Exn Not_found)
                (convert_with_metadata chain_id))
             ops
             ops_metadata
        |> function
        | Ok v ->
            return v
        | Error (Exn Not_found) ->
            raise Not_found
        | Error _ ->
            assert false)
```"	mbouaziz	2020-09-28T17:12:43Z		False				0	tezos/tezos	1967
gid://gitlab/DiffNote/419875208		Adding an `assert false` is quite ugly, can't we do better?	mbouaziz	2020-09-28T17:12:44Z		False				0	tezos/tezos	1967
gid://gitlab/DiffNote/419875215		That's not what `List.map2` used to throw, is it?	mbouaziz	2020-09-28T17:12:44Z		False				0	tezos/tezos	1967
gid://gitlab/DiffNote/419875222		"Nit
```suggestion:-0+0
      Format.pp_print_string ppf ""Inconsistent operation hashes lengths"")
```"	mbouaziz	2020-09-28T17:12:44Z		False				0	tezos/tezos	1967
gid://gitlab/DiffNote/419875231		"It's a bit more efficient than `List.last rest |> Option.value ~default:one`.

Something I'd love is OCaml allowing `f x ~default` as a shortcut for `f x |> Option.value ~default`, in most cases it could also be automatically inlined."	mbouaziz	2020-09-28T17:12:45Z		False				-1	tezos/tezos	1967
gid://gitlab/DiffNote/419875250		"Wowowow, why isn't this just ""0"" o_O"	mbouaziz	2020-09-28T17:12:45Z		False				-1	tezos/tezos	1967
gid://gitlab/DiffNote/419875618		Fixed in 53fda61a	mbouaziz	2020-09-28T17:13:22Z		False				0	tezos/tezos	1967
gid://gitlab/DiffNote/419906482		"Instead of building pairs, I could just build options. I'm not sure how much better it is, but possibly a bit?

```
rev_map_ep (fun x -> f x >|? fun b -> if b then Some x else None) l
>|=? fold_left (fun acc vo -> match vo with None -> acc | Some v -> v :: acc)
```

I went for that rn, let me know if you think it's ok"	raphael-proust	2020-09-28T18:22:31Z		False				-2	tezos/tezos	1967
gid://gitlab/DiffNote/419906484		I added a whole lot of `rev_` variants to a whole lot of traversors. And this is one of them and I also changed the commit to start using it.	raphael-proust	2020-09-28T18:22:31Z		False				-2	tezos/tezos	1967
gid://gitlab/DiffNote/419906486		"I haven't added that yet. But I guess I will.

Also, I'd rather call it `filter_some` (as in keep the `Some` values) and `filter_ok` and also provide a `filter_error` and `partition_result`."	raphael-proust	2020-09-28T18:22:31Z		False				-2	tezos/tezos	1967
gid://gitlab/DiffNote/419906489		"I guess `combine_k` shouldn't have a named argument, and then we can just do `combine_k a b @@ fun ~rev_combined ~leftovers ->…` Fixing that.

Also, `combine_give` gives you the left overs and I picked the name after `combine_drop`. Basically `drop` drops the suffix and `give` gives you the suffix. But maybe just `combine_with_leftovers`?

Yeah, I removed `combine_pad`. It seemed less important. And I wanted `combine` variants to be more focused on error management: I kind of intend drop to be used to ignore the error and k/with_leftovers to be used to produce a detailed error message with info about the different lengths and stuff. So pad didn't really work with that."	raphael-proust	2020-09-28T18:22:32Z		False				-2	tezos/tezos	1967
gid://gitlab/DiffNote/419906493		"I think it's ok to remove stuff from v0 that is not used from any of the released protocols.

Calling @paracetamolo to check?"	raphael-proust	2020-09-28T18:22:32Z		False				-2	tezos/tezos	1967
gid://gitlab/DiffNote/419906497		"Oh, true! fixed!

Btw, for `for_all`, `exists` and `iter`, I think that having a more general `when_diff_len` that can take an `Ok _`/`Error _` value would make sense because for those the accumulator that is carried during traversal is trivial. But I think that uniformity in handling different list lengths is better than optimal special cases for certain traversors."	raphael-proust	2020-09-28T18:22:32Z		False				-2	tezos/tezos	1967
gid://gitlab/DiffNote/419906500		Good catch! Fixed!	raphael-proust	2020-09-28T18:22:32Z		False				-2	tezos/tezos	1967
gid://gitlab/DiffNote/419907742		"Instead of building pairs, I could just build options. I'm not sure how much better it is, but possibly a bit?

```
rev_map_ep (fun x -> f x >|? fun b -> if b then Some x else None) l
>|=? fold_left (fun acc vo -> match vo with None -> acc | Some v -> v :: acc)
```

I went for that rn, let me know if you think it's ok"	raphael-proust	2020-09-28T18:25:39Z		False				-2	tezos/tezos	1967
gid://gitlab/DiffNote/419907744		I added a whole lot of `rev_` variants to a whole lot of traversors. And this is one of them and I also changed the commit to start using it.	raphael-proust	2020-09-28T18:25:40Z		False				-2	tezos/tezos	1967
gid://gitlab/DiffNote/419907746		"I haven't added that yet. But I guess I will.

Also, I'd rather call it `filter_some` (as in keep the `Some` values) and `filter_ok` and also provide a `filter_error` and `partition_result`."	raphael-proust	2020-09-28T18:25:40Z		False				-2	tezos/tezos	1967
gid://gitlab/DiffNote/419907747		"I guess `combine_k` shouldn't have a named argument, and then we can just do `combine_k a b @@ fun ~rev_combined ~leftovers ->…` Fixing that.

Also, `combine_give` gives you the left overs and I picked the name after `combine_drop`. Basically `drop` drops the suffix and `give` gives you the suffix. But maybe just `combine_with_leftovers`?

Yeah, I removed `combine_pad`. It seemed less important. And I wanted `combine` variants to be more focused on error management: I kind of intend drop to be used to ignore the error and k/with_leftovers to be used to produce a detailed error message with info about the different lengths and stuff. So pad didn't really work with that."	raphael-proust	2020-09-28T18:25:40Z		False				-2	tezos/tezos	1967
gid://gitlab/DiffNote/419907750		"I think it's ok to remove stuff from v0 that is not used from any of the released protocols.

Calling @paracetamolo to check?"	raphael-proust	2020-09-28T18:25:40Z		False				-2	tezos/tezos	1967
gid://gitlab/DiffNote/419907751		"Oh, true! fixed!

Btw, for `for_all`, `exists` and `iter`, I think that having a more general `when_diff_len` that can take an `Ok _`/`Error _` value would make sense because for those the accumulator that is carried during traversal is trivial. But I think that uniformity in handling different list lengths is better than optimal special cases for certain traversors."	raphael-proust	2020-09-28T18:25:40Z		False				-2	tezos/tezos	1967
gid://gitlab/DiffNote/419907755		Good catch! Fixed!	raphael-proust	2020-09-28T18:25:40Z		False				-2	tezos/tezos	1967
gid://gitlab/DiffNote/419907758		I don't know. I think dune is released as a library as well so we could probably do something clever scanning the AST of the dune files directly. (For a future MR obviously.)	raphael-proust	2020-09-28T18:25:41Z		False				-2	tezos/tezos	1967
gid://gitlab/DiffNote/419907761		"No, however

- it's within a wildcard `Lwt.catch` that recovers from it anyway
- if these lists are of different lengths, it's indicative of storage being inconsistent and at that point, we have bigger problems
- the correct solution here is to change the storage abstraction layer so that it can return one list of list of pairs rather than a pair of lists of lists and deal with different lengths there (but it's a bit more complicated because actually the storage may return the ops successfully but not the metadata (due to history modes) and so it actually need to return (`(op * metadata) list list, op list list) either)`)."	raphael-proust	2020-09-28T18:25:41Z		False				-2	tezos/tezos	1967
gid://gitlab/DiffNote/419907765		"I was thinking about adding `List.last_already_destructed_list ~hd ~tl` that is meant to be used specifically for this and similar cases. Basically for `match l with [] -> <something complticated> | hd :: tl -> last_already_destructed ~hd ~tl`.

Style:
- I don't like the named arguments here so they'd just go in my opinion
- What's a good name for `List.last_already_destructed_list`? `last_non_empty`? `last_default`? `last_def`? `last_dft`?
- Or should this be the new `last` and we rename the old one as `last_opt`?"	raphael-proust	2020-09-28T18:25:41Z		False				-2	tezos/tezos	1967
gid://gitlab/DiffNote/419907768		"Often the `String.make 1 '<some char>'` is a way to force dynamic allocation. But in this case it's not in a function so it doesn't really work this way. Another possibility is to have avoided it living in the static memory and actually being on the heap. But I can't see why it'd be useful.

What I think is the actual reason is to have partially-self-documenting code. The comment above it explains that this value is the immediate successor of '/' in ascii-based lexicographic string comparison. So I think the aim is to make it more clear that this value is intended as an immediate successor in the discrete space of strings or something like that.

However,
- a good comment would be better
- the name given to the value mentions its content, not its role which makes it confusing.

My recommendation would be to:
1. write a better comment
2. name the variable `immediate_lexicographic_successor_of_path_splitter` (or something like that)
3. use `""0""` directly

(Note that I also would like for this to happen in a separate MR, and by someone with knowledge of the storage code because the above is kinda a guess.)"	raphael-proust	2020-09-28T18:25:41Z		False				-2	tezos/tezos	1967
gid://gitlab/DiffNote/419911623		Added, but now I have to use them internally.	raphael-proust	2020-09-28T18:34:43Z		False				-2	tezos/tezos	1967
gid://gitlab/DiffNote/420239564		Done	raphael-proust	2020-09-29T07:04:13Z		False				-2	tezos/tezos	1967
gid://gitlab/DiffNote/420239567		"Also, this function unopts but then it's wrapped inside a `Some` so I'm just simplifying that and removing the assert.

I now have the following that could reasonably be added to the List module, but I'm not sure it's the most efficient.

```
  let random_elt = function
     | [] -> None
     | _ :: _ as l ->
       let n = List.length l in
       let r = Random.int n in
       List.nth l r
```"	raphael-proust	2020-09-29T07:04:13Z		False				-2	tezos/tezos	1967
gid://gitlab/DiffNote/420241999		I'll remove the commit next time I do a rebase.	raphael-proust	2020-09-29T07:06:16Z		False				-2	tezos/tezos	1967
gid://gitlab/DiffNote/420298358		"Note that what I meant when I said we cannot write `combine_k a b @@ fun ~combined ~leftovers -> 42` is that we cannot have the continuation return `42` because it is not a list of pairs :) I guess the continuation could return `'c` though. (CPS newbie question: is it called a continuation if it has restrictions on the result type?)

My real question though was: why provide the continuation version at all? Do you see a specific use case for it that cannot be as easily written with `combine_give`? I feel like I'm missing something obvious here :D

Dropping `combine_pad` seems reasonable to me. It's not like it is hard to implement locally if needed anyway."	romain.nl	2020-09-29T08:19:08Z		False				4	tezos/tezos	1967
gid://gitlab/DiffNote/420310898		"Answering @mbouaziz 's remark about `f x ~default` as a shortcut for `f x |> Option.value ~default`: I usually define `let default x = function None -> x | Some x -> x` and they I can write `f x |> default` and find it very convenient.

Answering @raphael-proust :
- agreed, the labels are not needed because there is no ambiguity: messing up the order of hd and tl would cause a type error;
- I like all your choices (except the long one `last_already_destructed_list`), I would probably go with `last_default` unless we think that we will use the suffix `_default` often enough that shortening it to `_def` or `_dft` makes sense;
- I also like the option of this being the new `last`, especially since it would make sense to have the version which returns an option be named `last_opt`."	romain.nl	2020-09-29T08:32:39Z		False				-1	tezos/tezos	1967
gid://gitlab/DiffNote/420315999		Yes, options will be cheaper than pairs	mbouaziz	2020-09-29T08:40:20Z		False				0	tezos/tezos	1967
gid://gitlab/DiffNote/420316003		"Removing from the interface will probably fail compilation.

Removing from the implementation (i.e. replacing with a failure) will ok only once v1 is in use."	mbouaziz	2020-09-29T08:40:20Z		False				0	tezos/tezos	1967
gid://gitlab/DiffNote/420316006		:+1:	mbouaziz	2020-09-29T08:40:20Z		False				-1	tezos/tezos	1967
gid://gitlab/DiffNote/420316009		I agree, so here you would have `~when_diff_len:ok_false`, and you can cast the result to `(bool, empty) result` and trivially unwrap the `Ok`?	mbouaziz	2020-09-29T08:40:21Z		False				0	tezos/tezos	1967
gid://gitlab/DiffNote/420316012		Let's try not to generalize every single use case, let's add something for it only if there's a real need	mbouaziz	2020-09-29T08:40:21Z		False				-1	tezos/tezos	1967
gid://gitlab/DiffNote/420591865		"Oh yes, I changed the return type recently to allow to return anything. It's real CPS now.

When there were more variants of `combine`, I wrote them all using `combine_k`. It's still the case that `_drop` and `_give` are returned this way. So that's why in my mind it's the more general one. In fact, `combine_give` is just as expressive. One thing that `combine_k` does relatively well is to self-document the fact that it returns a reversed combined prefix (through the `~rev_combined` label) (there's also documentation documentation btw).

I also liked the `_k` version because it has a sort of exception-handler form: you have to pass an expression to specifically deal with the weird case. In fact, an early version of this had two separate continuations: one without leftover and one with a non-optional leftover."	raphael-proust	2020-09-29T14:22:23Z		False				-2	tezos/tezos	1967
gid://gitlab/DiffNote/420591866		I've made `last`/`last_opt`. I dislike the asymmetry with `hd` but I guess the functions are fundamentally dissimilar enough that it justifies a different interface.	raphael-proust	2020-09-29T14:22:24Z		False				-2	tezos/tezos	1967
gid://gitlab/DiffNote/421278760		Latest version of `combine`s looks good to me!	romain.nl	2020-09-30T11:43:23Z		False				4	tezos/tezos	1967
gid://gitlab/DiffNote/421309355		Ok, I'm rebasing and squashing now!	raphael-proust	2020-09-30T12:28:40Z		False				-2	tezos/tezos	1967
gid://gitlab/DiffNote/424232320		Or add it to `OLD_PROTOCOLS`?	mbouaziz	2020-10-06T08:18:49Z		False				-1	tezos/tezos	1967
gid://gitlab/DiffNote/424244208		"Well we could. And it would have the same effect. It's just that (a) it's not an old protocol at all and (b) it's actually not instrumentable because it uses a pattern of code that doesn't go through the ppx.

If the aim is to have a single variable, we could also just have one variable `DO_NOT_INSTRUMENT` and a comment that says that old-protocols and anything that cannot be instrumented should go there. IMHO, that'd be cleaner than placing a new non-instrumentable protocol out of the non-instrumentable category and into the old category."	raphael-proust	2020-10-06T08:31:46Z		False				-1	tezos/tezos	1967
gid://gitlab/DiffNote/424356510		"Tentative of giving sens to 2 variables:
- `OLD_PROTOCOLS` is add-only since we cannot change the code
- `NOT_INSTRUMENTABLE` may be temporary

This is obviously wrong if we manage to fix the issue in the ppx.

To conclude:
![watev](https://i.pinimg.com/originals/32/29/d0/3229d01d55a4d32a0ad979271755dc9e.gif)"	mbouaziz	2020-10-06T10:33:54Z		False				-1	tezos/tezos	1967
gid://gitlab/DiffNote/424387479		"So we should put it in `NOT_INSTRUMENTABLE` but then move it¹ as soon as we release `OLD_PROTOCOLS`??

¹ I am looking forward to tagging you as a reviewer in the no-op MR that will make that change :wink:"	raphael-proust	2020-10-06T11:23:41Z		False				-1	tezos/tezos	1967
gid://gitlab/DiffNote/363416635		This one is deprecated but it won't hurt to keep it...	mbouaziz	2020-06-18T07:28:57Z		False				-1	tezos/tezos	1913
gid://gitlab/DiffNote/360482287		Why did you remove this check?	rafoo_	2020-06-12T21:34:24Z		False				-1	tezos/tezos	1896
gid://gitlab/DiffNote/360483336		I think we usually write `Lwt.return @@ ...` instead of `... |> Lwt.return`.	rafoo_	2020-06-12T21:39:07Z		False				-1	tezos/tezos	1896
gid://gitlab/DiffNote/360484332		I find it a bit sad to have all the machinery to compute the remaining gas and stop just before displaying it. You can use `Alpha_context.Gas.pp` to do it (see the `typecheck data` command for an example).	rafoo_	2020-06-12T21:43:30Z		False				-1	tezos/tezos	1896
gid://gitlab/DiffNote/360587944		oops, it was a mistake. i meant to keep the test on the locally executed untyped unpacking, but apparently got a copy-paste mistake here. will be fixed in metastatedev/tezos!202	haochenxie	2020-06-13T13:17:00Z		False				-1	tezos/tezos	1896
gid://gitlab/DiffNote/360587954		gotcha	haochenxie	2020-06-13T13:17:07Z		False				-1	tezos/tezos	1896
gid://gitlab/DiffNote/360590231		"the rationale was to better facilitate integration with other commandline tools by not having noisy information. we could probably do one of the following

1. display the gas info to stdout, then other commandline tools will have a terrible time cleaning out the output
2. display the gas info to stderr, i am not sure which method in `#Client_context.printer` to be used (`#warning`/`#error` doesn't sound right but is there an alternative?)
3. defaults to display gas info, but suppressible by a `--quite`-kind of argument
4. defaults to display no gas info, but do print by a `--verbose`-kind of argument

i am personally strongly against 1., but not sure which in 2~4 would be the best given the traditions and conventions of this project"	haochenxie	2020-06-13T13:32:33Z		False				-1	tezos/tezos	1896
gid://gitlab/DiffNote/360591030		See https://gitlab.com/tezos/tezos/-/issues/734 and in particular https://gitlab.com/tezos/tezos/-/issues/734#note_303170419 for a discussion on scriptability of the client.	rafoo_	2020-06-13T13:37:44Z		False				-1	tezos/tezos	1896
gid://gitlab/DiffNote/360591809		checking `src/lib_clic/unix/scriptable.mli`	haochenxie	2020-06-13T13:45:03Z		False				-1	tezos/tezos	1896
gid://gitlab/DiffNote/360592086		"an coincidence: i was also trying to propose the addition of a `pack` sub-command[1]

do you think it's a good idea to do them together in the same MR?

[1]: https://tezos-dev.slack.com/archives/C596FGNUR/p1591979349028500"	haochenxie	2020-06-13T13:47:34Z		False				-1	tezos/tezos	1896
gid://gitlab/DiffNote/360592719		"`scriptable.mli` seems to assume the output being a table of values. not sure it fits too well with this use case where there is only a single value output.

maybe extending `scriptable.mli` is the correct way to go?"	haochenxie	2020-06-13T13:53:15Z		False				-1	tezos/tezos	1896
gid://gitlab/DiffNote/360593207		"> do you think it's a good idea to do them together in the same MR?

Probably not, I think the `pack` one will be purely client-side so it does not need a protocol amendment and can target tezos/tezos/master."	rafoo_	2020-06-13T13:57:39Z		False				-1	tezos/tezos	1896
gid://gitlab/DiffNote/360593345		"> there is only a single value output.

I see two values in output: remaining gas and unpacked expression; am I missing something?"	rafoo_	2020-06-13T13:58:46Z		False				-1	tezos/tezos	1896
gid://gitlab/DiffNote/360594431		ahh, sorry i was having the mindset that the gas info isn't an interesting value so forgot it being a decent output..	haochenxie	2020-06-13T14:07:40Z		False				-1	tezos/tezos	1896
gid://gitlab/DiffNote/361887208		added support for `--script-for` in the newest changeset in metastatedev/tezos!202	haochenxie	2020-06-16T10:05:17Z		False				-1	tezos/tezos	1896
gid://gitlab/DiffNote/361894597		I guess you mean `--for-script`.	rafoo_	2020-06-16T10:10:06Z		False				-1	tezos/tezos	1896
gid://gitlab/DiffNote/361866440		"```suggestion:-0+0
    let ( >>|? ) = ( >|=? ) (* for backward compatibility *)
```"	rafoo_	2020-06-16T09:39:02Z		False				0	tezos/tezos	1903
gid://gitlab/DiffNote/361869944		Fixed	raphael-proust	2020-06-16T09:43:18Z		False				-2	tezos/tezos	1903
gid://gitlab/DiffNote/361872678		How is this better than appending the error traces (as done for example here: https://gitlab.com/tezos/tezos/-/blob/master/src/lib_client_base/client_aliases.ml#L263)?	rafoo_	2020-06-16T09:46:53Z		False				-1	tezos/tezos	1903
gid://gitlab/DiffNote/361879556		"It's mostly because

- That's not what traces are supposed to be.
- That's closer to what Lwt does when handling parallel rejections."	raphael-proust	2020-06-16T09:55:35Z		False				-2	tezos/tezos	1903
gid://gitlab/DiffNote/362869992		OK, this shouldn't block this MR anyway.	rafoo_	2020-06-17T12:21:52Z		False				-1	tezos/tezos	1903
gid://gitlab/DiffNote/395333072		"```suggestion:-0+0
  Process.on_process_log := Some capture ;
```"	romain.nl	2020-08-13T08:47:53Z		False				0	tezos/tezos	1997
gid://gitlab/DiffNote/395338399		"If `capture_f` or `Process.wait` raises an exception (or never finishes), this file is never removed.

I suggest that instead of `Filename.get_temp_dir_name` you use `Temp.file`. `Temp` is a module of `lib_tezt`. `Test.run` ensures that all temporary files are deleted at the end of each test, except if `--keep-temp` is specified."	romain.nl	2020-08-13T08:54:42Z		False				-1	tezos/tezos	1997
gid://gitlab/DiffNote/395344055		"```suggestion:-0+0
To run all the regression tests, use the ``regression`` tag::
```"	romain.nl	2020-08-13T09:02:41Z		False				0	tezos/tezos	1997
gid://gitlab/DiffNote/395344271		"```suggestion:-0+0
done with the ``--reset-regressions`` option, e.g.:: 
```"	romain.nl	2020-08-13T09:03:06Z		False				0	tezos/tezos	1997
gid://gitlab/DiffNote/395396977		done using `Lwt.finalize`	tzemanovic	2020-08-13T09:52:55Z		False				-2	tezos/tezos	1997
gid://gitlab/DiffNote/395398926		done	tzemanovic	2020-08-13T09:53:30Z		False				-2	tezos/tezos	1997
gid://gitlab/DiffNote/395400478		removed and inlined	tzemanovic	2020-08-13T09:53:51Z		False				-2	tezos/tezos	1997
gid://gitlab/DiffNote/395400964		done	tzemanovic	2020-08-13T09:53:59Z		False				-2	tezos/tezos	1997
gid://gitlab/DiffNote/395401576		done	tzemanovic	2020-08-13T09:54:07Z		False				-2	tezos/tezos	1997
gid://gitlab/DiffNote/395402331		good point! done	tzemanovic	2020-08-13T09:54:18Z		False				-2	tezos/tezos	1997
gid://gitlab/DiffNote/395403596		it was indeed, un-done	tzemanovic	2020-08-13T09:54:40Z		False				-2	tezos/tezos	1997
gid://gitlab/DiffNote/395404004		done	tzemanovic	2020-08-13T09:54:48Z		False				-2	tezos/tezos	1997
gid://gitlab/DiffNote/395411475		I've changed the output path to `tezt/_regressions`	tzemanovic	2020-08-13T09:56:17Z		False				-2	tezos/tezos	1997
gid://gitlab/DiffNote/395412938		it was, removed	tzemanovic	2020-08-13T09:57:07Z		False				-2	tezos/tezos	1997
gid://gitlab/DiffNote/395414363		Changed to regular comments. I've changed the comment for `run_and_capture`, as this is different from `run` exposed in `.mli`	tzemanovic	2020-08-13T09:58:09Z		False				-2	tezos/tezos	1997
gid://gitlab/DiffNote/395414715		done	tzemanovic	2020-08-13T09:58:24Z		False				-2	tezos/tezos	1997
gid://gitlab/DiffNote/395415036		done	tzemanovic	2020-08-13T09:58:36Z		False				-2	tezos/tezos	1997
gid://gitlab/DiffNote/395415244		done	tzemanovic	2020-08-13T09:58:42Z		False				-2	tezos/tezos	1997
gid://gitlab/DiffNote/395415349		done	tzemanovic	2020-08-13T09:58:47Z		False				-2	tezos/tezos	1997
gid://gitlab/DiffNote/406087481		Note that you could remove the call to `Sys.remove`. It would allow users to view it if they use `--keep-temp` (provided the file was not overridden by another regression test run by the same Tezt process). But removing it explicitely is not wrong either; just choose what you prefer and consider this thread resolved ;)	romain.nl	2020-09-02T14:23:02Z		False				-1	tezos/tezos	1997
gid://gitlab/DiffNote/406096983		"```suggestion:-0+0
(** A hook that is called whenever a process is being spawned. *)
```"	romain.nl	2020-09-02T14:31:18Z		False				0	tezos/tezos	1997
gid://gitlab/DiffNote/406571690		I forgot to remove this, thank you!	tzemanovic	2020-09-03T08:31:58Z		False				-2	tezos/tezos	1997
gid://gitlab/DiffNote/406746510		This should mention `data-encoding` and `ezjsonm` which are both direct dependencies now.	raphael-proust	2020-09-03T12:38:55Z		False				-1	tezos/tezos	1997
gid://gitlab/DiffNote/406746519		"Is the lambda here solely to catch exceptions triggered in the creation of the samples?

Shouldn't each sample be committed to a file instead anyway?"	raphael-proust	2020-09-03T12:38:55Z		False				-1	tezos/tezos	1997
gid://gitlab/DiffNote/406746524		"Why is this equality tested?

Note that this equality may hold even if regression is broken (e.g., the json input, which is generated dynamically by `sample.jsons` may have change in which case the roundtrip might still be correct but the regression is still borken; e.g., the json may be ok but the binary has changed)

Testing for this equality is useful (it tests that the encodings roundtrip) but is not testing for regression."	raphael-proust	2020-09-03T12:38:56Z		False				-1	tezos/tezos	1997
gid://gitlab/DiffNote/407366097		added in 72596f2b	tzemanovic	2020-09-04T08:37:33Z		False				-2	tezos/tezos	1997
gid://gitlab/DiffNote/407379874		It is, yes. The samples are right now a bit of a mix of using the types' encoding to construct the jsons, some default values and ezjsonm values. Perhaps it would be better to just inline all in ezjsonm or to commit them to some file as you suggest. Either way, I think it should something that's easy to modify and add to	tzemanovic	2020-09-04T08:59:37Z		False				-2	tezos/tezos	1997
gid://gitlab/DiffNote/407381436		Yup, the equality test is there to check the roundtrip. If the regression is broken, the test will fail even if the equality holds.	tzemanovic	2020-09-04T09:02:18Z		False				-2	tezos/tezos	1997
gid://gitlab/DiffNote/407391538		"I think it'd be better (but we can leave it for another MR if you prefer) to have the json values statically there. Otherwise there is a potential for the case where the generation of these values changes and it makes it harder to interpret the test failures/success.

I also think having static values might help if we need to change an encoding but in a backwards compatible way (introducing a new encoding, making sure new nodes can decode old values, waiting long enough that we are confident all nodes have updated, making the new representation the default, waiting again, etc.). In that case we'll want to try on static, non-generated values anyway."	raphael-proust	2020-09-04T09:19:24Z		False				-1	tezos/tezos	1997
gid://gitlab/DiffNote/407391540		Ok, I guess we can leave it.	raphael-proust	2020-09-04T09:19:24Z		False				-1	tezos/tezos	1997
gid://gitlab/DiffNote/407393266		Instead of introducing this flag to prevent the output of diff then reprint it with a special function you could use the option `--color=always`. It gives more or less the same output	sribar	2020-09-04T09:22:27Z		False				-1	tezos/tezos	1997
gid://gitlab/DiffNote/407393270		Maybe it would be nice to add this path as a argument to the main `Regression.run` function. In case wwe want to have different directory output for different regression test	sribar	2020-09-04T09:22:27Z		False				0	tezos/tezos	1997
gid://gitlab/DiffNote/407393272		This could use the `Base.with_open_out` function instead	sribar	2020-09-04T09:22:27Z		False				-1	tezos/tezos	1997
gid://gitlab/DiffNote/407399194		Is the coloring of `diff` available cross platform? Is it POSIX or is it a GNU extension? What platform does `tezt` target?	raphael-proust	2020-09-04T09:32:19Z		False				-1	tezos/tezos	1997
gid://gitlab/DiffNote/407403014		"It's a GNU extension...
So I guess in that case it's better to leave it as it is.

Is tezt 100% POSIX ompatible ? 
@romain.nl"	sribar	2020-09-04T09:38:54Z		False				-1	tezos/tezos	1997
gid://gitlab/DiffNote/407403351		sounds good, I will make the change	tzemanovic	2020-09-04T09:39:31Z		False				-2	tezos/tezos	1997
gid://gitlab/DiffNote/407407710		"Tezt uses the ANSI escape codes (https://en.wikipedia.org/wiki/ANSI_escape_code#Colors). I don't know if it's 100% POSIX but when you run Tezt you have the option of using `--no-color` if the codes are not good for your terminal.

Which is an argument in favor of keeping the code like it is currently (parse the result of `diff` to use Tezt's color): it will allow the user to keep using Tezt's `--no-color` option."	romain.nl	2020-09-04T09:46:54Z		False				-1	tezos/tezos	1997
gid://gitlab/DiffNote/408531294		I've moved the tested samples to JSON files in 6e67bfaf	tzemanovic	2020-09-07T12:33:43Z		False				-2	tezos/tezos	1997
gid://gitlab/DiffNote/408535952		I've turned it into an optional argument in d1f4b77e	tzemanovic	2020-09-07T12:40:10Z		False				-2	tezos/tezos	1997
gid://gitlab/DiffNote/408550377		Unfortunately, I cannot use that as the `f` is in `Lwt.t`. I could us functions from `Lwt_io` instead, but I'm not sure if it would be much of an improvement?	tzemanovic	2020-09-07T13:00:40Z		False				-2	tezos/tezos	1997
gid://gitlab/DiffNote/409982373		Looks good!	raphael-proust	2020-09-09T15:37:39Z		False				-1	tezos/tezos	1997
gid://gitlab/DiffNote/410038610		"Ok I see
In that case I'm closing this thread"	sribar	2020-09-09T17:00:57Z		False				-1	tezos/tezos	1997
gid://gitlab/DiffNote/389676585		"You should split comments longer than 80 columns. I usually use `fill-region` in emacs.

(Same remark below)"	vect0r	2020-08-03T09:55:04Z		False				0	tezos/tezos	1994
gid://gitlab/DiffNote/389676588		"```suggestion:-0+0
    If [config] is considered:
```"	vect0r	2020-08-03T09:55:04Z		False				0	tezos/tezos	1994
gid://gitlab/DiffNote/389676591		`Node_shared_arg.read_and_patch_config_file` is going to update the config file with some default values. It means that validating the file may result in changing/updating it. Is it the expected behaviour? I though the validation was nop.	vect0r	2020-08-03T09:55:05Z		False				1	tezos/tezos	1994
gid://gitlab/DiffNote/389676593		The format of this message looks strange.	vect0r	2020-08-03T09:55:05Z		False				0	tezos/tezos	1994
gid://gitlab/DiffNote/392307027		"Indeed, the validation is expected to be a nop.

I think `Node_shared_arg.read_and_patch_config_file args` returns a configuration using the given arguments `args` by calling `Node_config_file.update`, which one reads on the current configuration file.

The only values that will be used to update the configuration returned by reading the configuration file are the ones specified using the command line arguments (the ones in `args`).

I might be wrong but I see no changes that could occur. There is no call to `Node_config.write` for instance. What do you think  ?"	phink	2020-08-07T08:56:18Z		False				-2	tezos/tezos	1994
gid://gitlab/DiffNote/392307029		"I agree. Here, I tried to mimick the message for the `show` command. 

Do you think we should create an issue and use events instead ?"	phink	2020-08-07T08:56:18Z		False				-2	tezos/tezos	1994
gid://gitlab/DiffNote/402291465		"Yes, it aims to update the file using the given args, but it also injects the default values of mandatory fields. When running `Node_config_command.validate`, the final `write` may alter the config.

For example, the `p2p` field is mandatory (because of the `bootstrap-peers`) in the config file, if I write my own config file in `./test/config.json`: `{ ""data-dir"": ""./test"", ""p2p"": {} }` and run the `./tezos-node config validate --data-dir ./test`, the command is successful and updates the config file as following: `{ ""data-dir"": ""./test"", ""p2p"": { ""bootstrap-peers"": [ ""boot.tzbeta.net"" ] } }`. I'm not sure it is the expected behaviour but maybe I'm wrong.

I think we have the following possibilities:
- the command return an error such as `missing boostrap-peers field …`
- the command states that the file was updated with the default value: `updating default value of xxx with yyy`
- we used the `ignore_bootstrap_peers` of `Node_shared_arg.read_and_patch_config_file` to ignore the missing flag.

What do you think?"	vect0r	2020-08-26T09:07:22Z		False				1	tezos/tezos	1994
gid://gitlab/DiffNote/402293466		"Ah. Well … I'm not an expert of `Format` but I though it was possible to do such ""alignment"" using Format's boxes things, no?

If it is the case, we should update the `show` (and others?) with a cleaner version. Otherwise, it is a bit dirty, but we can leave it at it is."	vect0r	2020-08-26T09:10:33Z		False				0	tezos/tezos	1994
gid://gitlab/DiffNote/402353956		"Something like
```
Format.eprintf ""@[<v>@[<v 9>Warning: no config file at %s@,validating the default configuration@]@]@.""
```"	abate	2020-08-26T10:24:50Z		False				0	tezos/tezos	1994
gid://gitlab/DiffNote/402396794		"You are right, I was focus on `read_and_patch_config_file` but you meant the final `write` in the `validate` function. It should not be here, I'll fix this right now by removing the call to 'write'.
Thanks for spotting this."	phink	2020-08-26T11:39:27Z		False				-2	tezos/tezos	1994
gid://gitlab/DiffNote/402412818		Thanks, I've made some modifications using @abate format.	phink	2020-08-26T12:06:41Z		False				-2	tezos/tezos	1994
gid://gitlab/DiffNote/402413177		It should be ok now @vect0r.	phink	2020-08-26T12:07:21Z		False				-2	tezos/tezos	1994
gid://gitlab/DiffNote/402426344		"Thanks!

My final thought is that it is a bit weird to force the user to have a `p2p` field in the config file, event if it is allowed to be empty (`""p2p"": {}`).

Is the `p2p` field of the node's config file encoding still mandatory? Can we remove the lonely `req`?"	vect0r	2020-08-26T12:28:20Z		False				1	tezos/tezos	1994
gid://gitlab/DiffNote/402429330		For sake of consistency, should we remove (temporarily) this warning only for the unused cases? That is to say `fail, fail_n, warn, warn_n` and `unless_n`?	vect0r	2020-08-26T12:33:10Z		False				0	tezos/tezos	1994
gid://gitlab/DiffNote/402452198		I agree and made the corresponding modifications, I used the local ppx attributes instead of the global one.	phink	2020-08-26T13:02:43Z		False				-2	tezos/tezos	1994
gid://gitlab/DiffNote/402472951		Very well!	vect0r	2020-08-26T13:30:01Z		False				0	tezos/tezos	1994
gid://gitlab/DiffNote/402475220		Good question. I've added a commit making the p2p field optional and using the default_p2p value.	phink	2020-08-26T13:33:01Z		False				-2	tezos/tezos	1994
gid://gitlab/DiffNote/414380138		`has_warnings` may be a better name?	romain.nl	2020-09-17T13:22:52Z		False				0	tezos/tezos	1994
gid://gitlab/DiffNote/414390038		"I find the interface of this module a bit weird. It is possible to construct values of type `report` but never to read them except with:
- `is_valid`
- `is_warned`
- its `encoding` (but to do what?).

So essentially the type `report`, from outside, is equivalent to `type report = { valid: bool; warnings: bool }`.

I would have expected a way to at least show the contents of a report. Currently the only way to do that is to call `check` instead, but it does not take a report, it creates one and prints it directly.

You could replace `check` by a value of type:
```
val check: report -> unit tzresult Lwt.t
```

Another option would be to make the `report` type concrete, i.e. not hide its implementation, so that one can write his own report pretty-printing functions."	romain.nl	2020-09-17T13:29:59Z		False				5	tezos/tezos	1994
gid://gitlab/DiffNote/414413611		"The implementation of `Node_config_validation.report` relies on several invariants:
- `warned` is `true` iff there exists one item with level `Warning`;
- `valid` is `true` iff there exists no item with level `Error`;
- `items` are grouped by field names (this one is enforced by the type-system though).

I feel that the implementation could be made significantly simpler if we got rid of those invariants. I.e. define:
```
type report = item list
```

Then `is_valid` is just `List.for_all (fun item -> item.level <> Error)` and `is_warned` is just `List.exists (fun item -> item.level = Warning)`. We won't have enough items in reports to make these calls inefficient.

This also assumes we stop grouping by fields. I don't think grouping by fields is valuable enough to justify the complexity of this implementation (and it could probably be simplified by using `List.sort` before printing the report)."	romain.nl	2020-09-17T13:59:59Z		False				0	tezos/tezos	1994
gid://gitlab/DiffNote/414426389		"Instead of doing this you could have validation functions have type:
```
Node_config_file.t -> item list Lwt.t
```
and then `validate` is just:
```
Lwt_list.map_p (fun validate -> validate config) >|= List.flatten
```
(this assumes that `report = item list`, see my other comment).

This would also mean that combinators like `when_`, `unless` etc. would become basically useless since one could just write validation functions like this:
```
let validate_toto report =
  if report looks good then
    Lwt.return []
  else
    Lwt.return [ { level = Error; message = ""bad value for field toto""; elements = [ ""toto"", ""42"" ] }
```
In other words, we would have the full power of OCaml expressions at our disposal instead of relying on a limited subset of combinators. You could probably still have:
```
let error ~message ~field ~value =
  Lwt.return [ { level = Error; message; elements = [ field; value ] } ]
```
(and the same for `warn`) for simple cases."	romain.nl	2020-09-17T14:16:47Z		False				0	tezos/tezos	1994
gid://gitlab/DiffNote/414431198		If this function only takes one address, maybe rename it to `resolve_bootstrap_addr`?	romain.nl	2020-09-17T14:23:35Z		False				-1	tezos/tezos	1994
gid://gitlab/DiffNote/414434715		Maybe go into more details: `$(b,validate) verifies that the configuration file parses correctly and performs some sanity checks on its values.`	romain.nl	2020-09-17T14:26:51Z		False				0	tezos/tezos	1994
gid://gitlab/DiffNote/418186475		It is legacy but I think the `addrs` part is is about the output of numerous addresses (like `resolve_rpc_listening_addrs` above). But I agree it is strange.	phink	2020-09-24T14:17:10Z		False				-2	tezos/tezos	1994
gid://gitlab/DiffNote/418186481		Following your suggestion I removed `is_valid` and added `has_error` and `has_warning`, which I find more explicit.	phink	2020-09-24T14:17:11Z		False				-2	tezos/tezos	1994
gid://gitlab/DiffNote/418186487		"I followed your suggestion and added `to_string` and `pp` functions.
I think there is no need to make the `report` type concrete for now."	phink	2020-09-24T14:17:11Z		False				-2	tezos/tezos	1994
gid://gitlab/DiffNote/418186495		Following your suggestion, I changed the type of report to be an `item list` and indeed it simplifies the code, thanks.	phink	2020-09-24T14:17:12Z		False				-2	tezos/tezos	1994
gid://gitlab/DiffNote/418186501		"I agree with you and I made the corresponding changes. 
However I dont think we should remove the combinators, in my opinion they increase the code readability.
What do you think ?"	phink	2020-09-24T14:17:12Z		False				-2	tezos/tezos	1994
gid://gitlab/DiffNote/419477080		Shouldn't this be `Format.pp_print_newline ppf ()`?	romain.nl	2020-09-28T08:04:12Z		False				0	tezos/tezos	1994
gid://gitlab/DiffNote/419485153		"```suggestion:-0+0
  >|= Option.to_list
```
(I just discovered that it exists :D )"	romain.nl	2020-09-28T08:17:26Z		False				0	tezos/tezos	1994
gid://gitlab/DiffNote/419515667		You can of course keep the combinators if you find them useful ;)	romain.nl	2020-09-28T09:01:01Z		False				0	tezos/tezos	1994
gid://gitlab/DiffNote/419598731		Thanks :) pretty useful !	phink	2020-09-28T10:56:18Z		False				-2	tezos/tezos	1994
gid://gitlab/DiffNote/419598851		Nice catch	phink	2020-09-28T10:56:30Z		False				-2	tezos/tezos	1994
gid://gitlab/DiffNote/433437260		"Is there a specific reason why your are not using the `Internal_event` or `Internal_event.Simple` module to log?

The problem here is that if one changes the output format of the general node logs at some point, he will probably not think of updating this file too."	romain.nl	2020-10-21T09:56:27Z		False				-1	tezos/tezos	1994
gid://gitlab/DiffNote/436076391		Good!	vect0r	2020-10-26T13:41:07Z		False				1	tezos/tezos	1994
gid://gitlab/DiffNote/436078001		"```suggestion:-0+0
   Since internal events are only initialized when starting the node
```"	arvidnl	2020-10-26T13:43:08Z		False				-1	tezos/tezos	1994
gid://gitlab/DiffNote/361291785		"You wrote ""operations"" twice."	rafoo_	2020-06-15T14:20:55Z		False				0	tezos/tezos	1888
gid://gitlab/DiffNote/361292350		"```suggestion:-0+0
    hashes. Resources are protocols, operations, block_header.
```"	rafoo_	2020-06-15T14:21:35Z		False				0	tezos/tezos	1888
gid://gitlab/DiffNote/358771812		why not changed the name of the tests as well?	raphael-proust	2020-06-10T12:40:48Z		False				0	tezos/tezos	1883
gid://gitlab/DiffNote/361296541		Done, and rebased as well	igarnier	2020-06-15T14:25:03Z		False				-2	tezos/tezos	1883
gid://gitlab/DiffNote/361262289		"```suggestion:-0+2
  include module type of Option
```"	paracetamolo	2020-06-15T13:51:17Z		False				0	tezos/tezos	1891
gid://gitlab/DiffNote/361262295		"```suggestion:-0+2
  include module type of Tezos_stdlib.TzOption
```"	paracetamolo	2020-06-15T13:51:17Z		False				0	tezos/tezos	1891
gid://gitlab/DiffNote/361262301		I would keep the old name, infix are always less readable especially if used very rarely.	paracetamolo	2020-06-15T13:51:18Z		False				0	tezos/tezos	1891
gid://gitlab/DiffNote/361262312		"There is no need for these TzOption, there is `-open Tezos_stdlib_unix` in the dune file.

As a general rule Option and TzOption should not be mixed in one file. I think that either there is an open of stdlib and everything is named Option or the use is very local and we explicitely use TzOption. 

Maybe I'm missing other cases though."	paracetamolo	2020-06-15T13:51:18Z		False				0	tezos/tezos	1891
gid://gitlab/DiffNote/361290791		I changed all of the other occurrences of this pattern.	raphael-proust	2020-06-15T14:20:18Z		False				-2	tezos/tezos	1891
gid://gitlab/DiffNote/361290820		Yes, that's true. I changed it back.	raphael-proust	2020-06-15T14:20:18Z		False				-2	tezos/tezos	1891
gid://gitlab/DiffNote/361290834		I switched it to `Option` which includes `TzOption` indeed.	raphael-proust	2020-06-15T14:20:18Z		False				-2	tezos/tezos	1891
gid://gitlab/DiffNote/361538941		"```suggestion:-0+0
  match a with Some _ -> a | None -> b
```"	rafoo_	2020-06-15T20:22:59Z		False				0	tezos/tezos	1891
gid://gitlab/DiffNote/361794734		Done.	raphael-proust	2020-06-16T08:13:12Z		False				-2	tezos/tezos	1891
gid://gitlab/DiffNote/358784206		I was going to review this but I'm not familiar with this construct. Can you point at the documentation for that construct with a `+`?	raphael-proust	2020-06-10T12:56:26Z		False				-1	tezos/tezos	1876
gid://gitlab/DiffNote/360399166		"See the `${parameter:+word}` explanation in the [Bash manual](https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html).

> `${parameter:+word}`: If _parameter_ is null or unset, nothing is substituted, otherwise the expansion of _word_ is substituted. [ ... ] Omitting the colon results in a test only for a parameter that is unset.

So this test amounts to ""`elif [ $1 is set ]; then`"". To my knowledge, this is the best (only?) way to determine if a variable is unset without also including the empty string.

<hr/>

_edit_: clarification"	CraigFe	2020-06-12T17:20:03Z		False				-2	tezos/tezos	1876
gid://gitlab/DiffNote/360968861		"Thanks!

I managed to find it as well in the documentation of POSIX's `sh`: https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_02

Note that in the script you use `${parameter+word}` (not `:+`) form which behaves differently when the parameter is set but null. I don't think it would have any noticeable effect for our use of the script. Do you think it's important?"	raphael-proust	2020-06-15T08:15:56Z		False				-1	tezos/tezos	1876
gid://gitlab/DiffNote/367155932		"For this fold, failures (at the Lwt level) or errors (at the error-monad level) are taken into account. Specifically, they interrupt the fold and propagate the failure/error to the caller. This is similar to the way that `*_s`/`*_es` function in other parts of `lwt-res-lib`.

However, in `find_or_make`, promises that fail or resolve to an error are automatically removed from the table. (This is so that `find_or_make` can `make` again if the previous instantiation did not work.) Should we make `fold_es` ignore failed/errored promises to resemble the semantics of `find_or_make`. Same for `iter_*` above.

Alternatively, should this Lwt-ised hashtbl be moved to a different module? Something called `Memoization_table` or somesuch."	raphael-proust	2020-06-24T08:02:42Z		False				-2	tezos/tezos	1905
gid://gitlab/DiffNote/367529064		Why not use `length`?	mbouaziz	2020-06-24T15:17:57Z		False				0	tezos/tezos	1905
gid://gitlab/DiffNote/367529067		"```suggestion:-0+0
    (* and both [find_or_make] promises have the error *)
```"	mbouaziz	2020-06-24T15:17:57Z		False				0	tezos/tezos	1905
gid://gitlab/DiffNote/367529069		A comment would be useful, one could misunderstand that this waits for all promises to be resolved.	mbouaziz	2020-06-24T15:17:57Z		False				-1	tezos/tezos	1905
gid://gitlab/DiffNote/367529070		"Maybe yes and it should documented that everywhere stored promises never propagate their failure/error to the return value of functions.

As things are ambiguous, I suggest not to use `fold_es` name, maybe a `fold_promises_es`?"	mbouaziz	2020-06-24T15:17:57Z		False				-1	tezos/tezos	1905
gid://gitlab/DiffNote/367534806		"There is a `fold_promises` below this one that fold over promises. This function here folds over the values that the promises resolve with.

Maybe `fold_with_waiting`? It indicates that you are waiting (for the promises to be resolved).  
Maybe `fold_oks`? It indicates that you are folding over `Ok _` (which you can only get when the promises resolve anyway).  
Maybe `fold_successes`? Same (but a bit weaker IMO).  

Other suggestions?"	raphael-proust	2020-06-24T15:25:23Z		False				-2	tezos/tezos	1905
gid://gitlab/DiffNote/367534810		Good catch, I'll change that.	raphael-proust	2020-06-24T15:25:23Z		False				-2	tezos/tezos	1905
gid://gitlab/DiffNote/367534818		Fair enough. Although the type system guarantees it doesn't, it's better to add it.	raphael-proust	2020-06-24T15:25:23Z		False				-2	tezos/tezos	1905
gid://gitlab/DiffNote/367556913		"If one wants to use this `fold_es`, they could use `fold_promises_es` (to be written) and write the bind themselves.

But if you really want to have this `fold_es` handy, I'm ok with `fold_with_waiting_es` or `fold_resolve_es`"	mbouaziz	2020-06-24T15:56:24Z		False				-1	tezos/tezos	1905
gid://gitlab/DiffNote/367914086		"I went for `fold_with_waiting_es` and added documentation as well.

I also addressed all of the comments below."	raphael-proust	2020-06-25T07:14:42Z		False				-2	tezos/tezos	1905
gid://gitlab/DiffNote/367933590		I think we should also expose a `fold_promises_es` and `iter_promises_ep` which are the most general fold/iter.	mbouaziz	2020-06-25T07:46:49Z		False				-1	tezos/tezos	1905
gid://gitlab/DiffNote/367933591		"```suggestion:-0+0
      [Error]/rejection. Even so, it only resolves once all the promises have.
```"	mbouaziz	2020-06-25T07:46:50Z		False				0	tezos/tezos	1905
gid://gitlab/DiffNote/367939635		"So the same thing but without ignoring `Error`/rejection?

I'd disagree with that. I think this module provides a specific abstractions (including self-cleaning) and that `fold_with_waiting_es` matches this abstraction. A version that doesn't ignore those could be useful but: (1) it doesn't match the intended use of the module and (2) it's trivial to implement with `fold_promises` (where `fold_with_waiting_es` is non-trivial).

I'd rather not add a function that doesn't fit the general intended purpose and that can be made simply using one of the generic traversor.

Also note that these functions that are included, have been added originally to `Error_table` on a by-need basis (albeit some of them in the un-merged revamped mempool)."	raphael-proust	2020-06-25T07:56:17Z		False				-2	tezos/tezos	1905
gid://gitlab/DiffNote/367939641		I force-pushed this one because it's just a typo.	raphael-proust	2020-06-25T07:56:17Z		False				-2	tezos/tezos	1905
gid://gitlab/DiffNote/367941838		![image](/uploads/399622b31cc05757a149f6cd18626f2b/image.png)	mbouaziz	2020-06-25T07:59:31Z		False				-1	tezos/tezos	1905
gid://gitlab/DiffNote/357075833		This is a strange place to put a named argument at. We should probably make more of those argument named (I like named arguments for constructors). I'm simply opening this comment to change it into an issue.	raphael-proust	2020-06-08T09:02:34Z		False				-1	tezos/tezos	1868
gid://gitlab/DiffNote/356258118		"Btw `try` with `Lwt` is not a good marriage.
For the sake of it, I'd write it like that:
```ocaml
(try Cfg_file.from_json cfg_json
 with exn ->
   ...
) |> return
```"	mbouaziz	2020-06-05T15:17:11Z		False				-1	tezos/tezos	1871
gid://gitlab/DiffNote/358237389		would not work, would it? `failwith` (as redefined by Error_monad) is already in the nomad so applying return to it is not what you want...	pirbo	2020-06-09T17:40:43Z		False				-1	tezos/tezos	1871
gid://gitlab/DiffNote/358599903		"`try`-`with` and `Lwt` are difficult to use correctly together. In this case it's correctly interleaved. Speciifcally: `return` cannot catch exceptions raised in its argument because its argument is a value which is evaluated before `return` is even invoked.

So the code is equivalent to

```
try
  let cfg = Cfg_file.from_json cfg_json in (* may raise *)
  return cfg
with
  …
```

If you want to avoid interleaving the try and Lwt you can rewrite like so:

```
Lwt.return (
  try Ok (Cfg_file.from_json cfg_json)
  with exn ->
    Error (…) )
```

---------------------------------------------------

Maybe we need a few more functions in `Error_monad`, I'm thinking of the following plus Lwt counterparts.

```
catch: (unit -> 'a) -> (exn -> 'a tzresult) -> 'a tzresult
of_raising: (unit -> 'a) -> (exn -> error) -> 'a tzresult
```

And possibly one more bind operator which would allow, in this specific case, to avoid the use of Lwt in the whole function that `Lwt_utils_unix.Json.read_file` is bound to:

```
( >|?= ) : 'a tzresult Lwt.t -> ('a -> 'b tzresult) -> 'b tzresult Lwt.t
```"	raphael-proust	2020-06-10T09:05:58Z		False				-1	tezos/tezos	1871
gid://gitlab/DiffNote/359076222		"Mmmm, I understand that this new check is easier to achieve than the previous one, but I still don't see why it spuriously failed before and not with this new condition.

I mean, if all clients achieve 

```all(client.get_next_protocol() == PROTO_B```

Considering the baker for `PROTO_B` is already running, won't it be just a matter of seconds before condition `all(client.next_protocol() == PROTO_B` becomes true?"	bidinger	2020-06-10T19:32:52Z		False				-1	tezos/tezos	1885
gid://gitlab/DiffNote/359358617		as I'm looking back at this, I think you're right. The timing in this test is somewhat arbitrary and it's what makes it flaky, however this doesn't really solve it. I think ideally there should be more leeway for protocol migration. The current timeout limit on `test_wait_for_new_proposal_period` is 60 sec, which also includes the time to reach the final block of PROTO_A. Perhaps it would be best to separate the timeout for baking to the final block of `PROTO_A` and the transition to `PROTO_B`. What do you think?	tzemanovic	2020-06-11T08:37:28Z		False				-2	tezos/tezos	1885
gid://gitlab/DiffNote/359369112		"It will make the test a little more ""precise"" by identifying a new less restrictive check but I wonder if it will solve the problem.

It seems that
- all nodes reach `client.get_next_protocol() == PROTO_B`
- but not all nodes reach `client.get_protocol() == PROTO_B`  (this is the flaky part)

So if we reintroduce the second check, it will be still flaky.


Could it have to do with the time when we launch the new baker? 

I've also noticed an additional problem. I ran this command to reduce the non-determinism

`scripts/repeat_test.sh 20 tests/test_voting_full.py`

I got at the 9th execution

```
================================================================== test session starts ===================================================================
platform darwin -- Python 3.8.2, pytest-5.4.3, py-1.8.0, pluggy-0.13.1 -- /usr/local/opt/python@3.8/bin/python3.8
cachedir: .pytest_cache
rootdir: /Users/bidinger/tezos/tests_python, inifile: pytest.ini
plugins: regtest-1.4.3, rerunfailures-9.0, timeout-1.3.3
collected 31 items                                                                                                                                       

tests/test_voting_full.py::TestVotingFull::test_add_tmp_bootstrap_node PASSED                                                                      [  3%]
tests/test_voting_full.py::TestVotingFull::test_activate_proto_a PASSED                                                                            [  6%]
tests/test_voting_full.py::TestVotingFull::test_add_tmp_bootstrap_baker PASSED                                                                     [  9%]
tests/test_voting_full.py::TestVotingFull::test_add_initial_nodes PASSED                                                                           [ 12%]
tests/test_voting_full.py::TestVotingFull::test_bootstrap PASSED                                                                                   [ 16%]
tests/test_voting_full.py::TestVotingFull::test_remove_tmp_bootstrap_nodes PASSED                                                                  [ 19%]
tests/test_voting_full.py::TestVotingFull::test_add_baker PASSED                                                                                   [ 22%]
tests/test_voting_full.py::TestVotingFull::test_client_knows_proto_b PASSED                                                                        [ 25%]
tests/test_voting_full.py::TestVotingFull::test_wait_second_proposal_period PASSED                                                                 [ 29%]
tests/test_voting_full.py::TestVotingFull::test_proposal_period PASSED                                                                             [ 32%]
tests/test_voting_full.py::TestVotingFull::test_submit_proto_b_proposal PASSED                                                                     [ 35%]
tests/test_voting_full.py::TestVotingFull::test_wait_for_operation_inclusion PASSED                                                                [ 38%]
tests/test_voting_full.py::TestVotingFull::test_check_proto_b_proposed PASSED                                                                      [ 41%]
tests/test_voting_full.py::TestVotingFull::test_wait_for_voting_period PASSED                                                                      [ 45%]
tests/test_voting_full.py::TestVotingFull::test_delegates_vote_proto_b PASSED                                                                      [ 48%]
tests/test_voting_full.py::TestVotingFull::test_wait_for_testing PASSED                                                                            [ 51%]
tests/test_voting_full.py::TestVotingFull::test_make_sure_all_clients_testing_period PASSED                                                        [ 54%]
tests/test_voting_full.py::TestVotingFull::test_start_baker_testchain PASSED                                                                       [ 58%]
tests/test_voting_full.py::TestVotingFull::test_testchain_rpc PASSED                                                                               [ 61%]
tests/test_voting_full.py::TestVotingFull::test_testchains_bootstrapped PASSED                                                                     [ 64%]
tests/test_voting_full.py::TestVotingFull::test_testchain_transfer PASSED                                                                          [ 67%]
tests/test_voting_full.py::TestVotingFull::test_testchain_progress FAILED                                                                          [ 70%]
tests/test_voting_full.py::TestVotingFull::test_reactivate_all_delegates XFAIL                                                                     [ 74%]
tests/test_voting_full.py::TestVotingFull::test_wait_for_promotion_vote_period XFAIL                                                               [ 77%]
tests/test_voting_full.py::TestVotingFull::test_vote_in_promotion_phase XFAIL                                                                      [ 80%]
tests/test_voting_full.py::TestVotingFull::test_start_proto_b_baker XFAIL                                                                          [ 83%]
tests/test_voting_full.py::TestVotingFull::test_wait_for_new_proposal_period XFAIL                                                                 [ 87%]
tests/test_voting_full.py::TestVotingFull::test_all_nodes_run_proto_b XFAIL                                                                        [ 90%]
tests/test_voting_full.py::TestVotingFull::test_stop_old_bakers XFAIL                                                                              [ 93%]
tests/test_voting_full.py::TestVotingFull::test_new_chain_progress XFAIL                                                                           [ 96%]
tests/test_voting_full.py::TestVotingFull::test_check_logs XFAIL                                                                                   [100%]
```"	bidinger	2020-06-11T08:52:17Z		False				-1	tezos/tezos	1885
gid://gitlab/DiffNote/364350590		"@bidinger do you have a log for the error in `test_testchain_progress`? 

I'm also seeing more non-deterministic failures in proto-proposal on `test_testchain_rpc`, which fails to get chain ID for the test chain. I think this is most likely because of a delay from migration:

```
tests_python/tests/test_voting_full.py::TestVotingFull::test_testchain_rpc # /builds/metastatedev/tezos/tezos-client -base-dir /tmp/tezos-client.bfkg__h7 -addr 127.0.0.1 -port 18730 -base-dir /tmp/tezos-client.bfkg__h7 rpc get chains/main/blocks/head/votes/current_period_kind
""testing""
# /builds/metastatedev/tezos/tezos-client -base-dir /tmp/tezos-client.bfkg__h7 -addr 127.0.0.1 -port 18730 -base-dir /tmp/tezos-client.bfkg__h7 rpc get chains/main/chain_id
""NetXdQprcVkpaWU""
# /builds/metastatedev/tezos/tezos-client -base-dir /tmp/tezos-client.bfkg__h7 -addr 127.0.0.1 -port 18730 -base-dir /tmp/tezos-client.bfkg__h7 rpc get chains/test/chain_id
No service found at this URL
FAILED
```

The CI jobs:
- https://gitlab.com/metastatedev/tezos/-/jobs/597958958
- https://gitlab.com/metastatedev/tezos/-/jobs/599320155"	tzemanovic	2020-06-19T08:57:32Z		False				-2	tezos/tezos	1885
gid://gitlab/DiffNote/365616365		"I updated the test in branch `philb@test_voting_full`. It basically adds two commits to your changes. In particular, it

* uses only one bootstrap account to bake. This make sure delegate is always active
* uses retried-based check of chain_id
* launches baker only after corresponding protocol is known as 'next_protocol'

I’ve run it successfully about 10 times on three different platforms. If it works for you, maybe you can cherry-pick (or squash) my commits on top of your MR.

https://gitlab.com/nomadic-labs/tezos/-/jobs/606010440  (passed 12/12 times on the CI)"	bidinger	2020-06-22T12:19:30Z		False				-1	tezos/tezos	1885
gid://gitlab/DiffNote/368707514		I've tested this on a protocol dev branch with heavy migration code on repeat 20 times and it looks stable. I've included the commits here, thank you @bidinger !	tzemanovic	2020-06-26T08:31:27Z		False				-2	tezos/tezos	1885
gid://gitlab/DiffNote/372397498		It seems that this thread can be closed @bidinger since Tomas cherry-picked your commits.	adrianbrink	2020-07-02T11:06:30Z		False				-1	tezos/tezos	1885
gid://gitlab/DiffNote/355055077		"Nit: it looks like internally `Ok` is preferred over `ok`
```suggestion:-0+0
        | true -> filter f t >>? fun t -> Ok (h :: t) | false -> filter f t )
```"	mbouaziz	2020-06-04T08:19:13Z		False				0	tezos/tezos	1861
gid://gitlab/DiffNote/355059217		Fixed and force-pushed.	raphael-proust	2020-06-04T08:25:07Z		False				-2	tezos/tezos	1861
gid://gitlab/DiffNote/360301044		Is `aux` a `join` for the `tzresult`-monad?	mbouaziz	2020-06-12T14:19:30Z		False				0	tezos/tezos	1872
gid://gitlab/DiffNote/360301045		Here too, should we extract `aux` as an `all_e`?	mbouaziz	2020-06-12T14:19:31Z		False				1	tezos/tezos	1872
gid://gitlab/DiffNote/360301048		`fold_left_e`/`s`/`es` are the same function with just different monads, should we do yet another functor level...?	mbouaziz	2020-06-12T14:19:31Z		False				-1	tezos/tezos	1872
gid://gitlab/DiffNote/360359590		"(Resolving the thread above because it's the same discussion as this one.)

I was considering adding a result-only `all`. The main thing that stopped me is names: `Lwt.all` is already established, I added `Error_monad.all` for combined lwt-result. Would you be satisfied with

`all_p` alias for `Lwt.all`  
`all_e` for error-only `all`  
`all_ep` for combined

(And similarly for `join`.)

OT1H it's very regular and clean, but OTOH the `_p` is a bit strange because because it's otherwise used only for traversal."	raphael-proust	2020-06-12T15:54:10Z		False				-2	tezos/tezos	1872
gid://gitlab/DiffNote/360359594		"At some stage in development I had a `fold_left_general return bind f init seq` and then just passed different bits of the monad.

Ultimately, this is low-level code that is not meant to change, presumably ever. And it's sort of a “manual meta-programming” way to do the above. So I'm happy with the current form."	raphael-proust	2020-06-12T15:54:10Z		False				-2	tezos/tezos	1872
gid://gitlab/DiffNote/361114610		"I added those.

Should I also add `choose_{e,p,ep}`?

--------

Also note, that `join` is not the usual's monadic `join`. There is little use in Lwt for `'a Lwt.t Lwt.t` so there's little use for the classic `join`."	raphael-proust	2020-06-15T10:54:14Z		False				-2	tezos/tezos	1872
gid://gitlab/DiffNote/361763830		"> Would you be satisfied with

:thumbsup: 

> Should I also add `choose_{e,p,ep}`?

Only if they come up as necessary"	mbouaziz	2020-06-16T07:35:38Z		False				1	tezos/tezos	1872
gid://gitlab/DiffNote/356067836		"```suggestion:-0+0
    rustup toolchain install 1.39.0
    rustup default 1.39.0
    export PATH=~/.cargo/bin:$PATH
```"	paracetamolo	2020-06-05T11:36:10Z		False				-1	tezos/tezos	1862
gid://gitlab/DiffNote/356068144		so that one installs the right version	paracetamolo	2020-06-05T11:36:36Z		False				-1	tezos/tezos	1862
gid://gitlab/DiffNote/356185349		Done, thanks!	romain.nl	2020-06-05T13:42:19Z		False				-2	tezos/tezos	1862
gid://gitlab/DiffNote/356224595		or you can run `source $HOME/.cargo/env` as indicate by rustup at the end of the installation	mbouaziz	2020-06-05T14:29:03Z		False				6	tezos/tezos	1862
gid://gitlab/DiffNote/357991073		I updated to suggest this command instead.	romain.nl	2020-06-09T12:23:17Z		False				-2	tezos/tezos	1862
gid://gitlab/DiffNote/362633496		"As reported in #826, outputting the storage as a Michelson value is not so pretty (but clearly prettier than having it in JSON).

```suggestion:-0+0
The client can be used to display the state of the contract, eg its storage:
```"	rafoo_	2020-06-17T07:42:10Z		False				0	tezos/tezos	1856
gid://gitlab/DiffNote/362636072		"Maybe use the same example as before (getting the storage).

```suggestion:-0+10
    $ mockup-client rpc get /chains/main/blocks/head/context/contracts/KT1DieU51jzXLerQx5AqMCiLC1SsCeM8yRat/storage
    { ""prim"": ""Unit"" }
```"	rafoo_	2020-06-17T07:46:02Z		False				0	tezos/tezos	1856
gid://gitlab/DiffNote/353780339		"```suggestion:-0+0
        Stdlib.failwith ""Key URI needs a scheme""
```"	tzemanovic	2020-06-02T15:26:53Z		False				0	tezos/tezos	1854
gid://gitlab/DiffNote/355443956		It can also be a `*dune.inc`	mbouaziz	2020-06-04T15:02:55Z		False				1	tezos/tezos	1867
gid://gitlab/DiffNote/355445816		Fixed (actually with `*.dune.inc`, as I did not find `*dune.inc` files with no `.` before the `dune`).	romain.nl	2020-06-04T15:05:25Z		False				-2	tezos/tezos	1867
gid://gitlab/DiffNote/355459120		`src/proto_*/lib_protocol/dune.inc`?	mbouaziz	2020-06-04T15:22:02Z		False				1	tezos/tezos	1867
gid://gitlab/DiffNote/355459458		Right, sorry, fixed again ^^	romain.nl	2020-06-04T15:22:32Z		False				-2	tezos/tezos	1867
gid://gitlab/DiffNote/355505877		How about changes to `scripts/version.sh` and `.gitlab-ci.yml` both of which contain hashes of opam repo. So if we change it we might be changing some of the external dependencies.	raphael-proust	2020-06-04T16:27:53Z		False				1	tezos/tezos	1867
gid://gitlab/DiffNote/355926575		"I added those two files to the list.

However something is fishy: when I force-pushed this branch, step 3 did not trigger (https://gitlab.com/nomadic-labs/tezos/-/pipelines/153182160) even though it should have (since it changes `.gitlab-ci.yml`). But if I create a new branch with the exact same commit hash, it does trigger step 3 (https://gitlab.com/nomadic-labs/tezos/-/pipelines/153183458)!

I looks like a GitLab bug to me. Or maybe once an MR (or a branch??) is created, its pipelines are set in stone?"	romain.nl	2020-06-05T08:24:19Z		False				-2	tezos/tezos	1867
gid://gitlab/DiffNote/394593230		"Add a small comment describing each test e.g. ""Check that (some_time + delta) - some_time = delta.""? Same for the tests below."	arvidnl	2020-08-12T06:58:15Z		False				1	tezos/tezos	1980
gid://gitlab/DiffNote/394593234		Couldn't you just generate a value of the underlying type of `Ptime` and convert it to a `Ptime.t`? I'm not so familiar with Ptime, but looks like you could generate a `Ptime.Span` from an `int` and an `int64` using `Ptime.of_d_ps` and convert it to a `Ptime.t` using `Ptime.of_span`? Maybe it would be less code, and you could control the `int64` so that all values are within the ranges (no `bad_test ()` required).	arvidnl	2020-08-12T06:58:16Z		False				-1	tezos/tezos	1980
gid://gitlab/DiffNote/394593236		What is the range issue that can appear here? IIUC system time has a smaller domain than protocol time, so I don't understand the condition where `of_protocol_opt (to_protocol t)` (where `t` is system time) can fail.	arvidnl	2020-08-12T06:58:16Z		False				0	tezos/tezos	1980
gid://gitlab/DiffNote/394593238		Admittedly I don't really understand timezones but... why always 0 in the last argument? Is it a Tezos invariant that all system timestamps are always in UTC?	arvidnl	2020-08-12T06:58:16Z		False				8	tezos/tezos	1980
gid://gitlab/DiffNote/394601201		Perhaps we should use another prefix to indicate that this is property-based testing. Ideas: `proptest:base`, `fuzz:base` (most evocative, but also incorrect as it is not really fuzzing...), `prop:base` (not really clear), `properties:base`...	arvidnl	2020-08-12T07:17:28Z		False				0	tezos/tezos	1980
gid://gitlab/DiffNote/394614853		"It seems that `crowbar` is not installed with `make build-dev-deps` :

```
saroupille@saroupille:~/Git/tezos/master$ opam search crowbar
# Packages matching: match(*crowbar*)
# Name               # Installed # Synopsis
crowbar              --          Write tests, let a fuzzer find failing cases
ppx_deriving_crowbar --          ppx_deriving plugin for crowbar generators
```

You should add it also in the `build-dev-deps` script I guess."	Saroupille	2020-08-12T07:44:48Z		False				-1	tezos/tezos	1980
gid://gitlab/DiffNote/394636254		"It'd be better yes.

I think the main advantage of switching to span generation is that we would test sub-second precision.

Note that we would still need `bad_test` because there are other ways to be out of range. Notably: if `epoch + span` is out of the rfc3999 representation. (See `Ptime.min` and `Ptime.max`.)

Also note that there is no `range_int64` function in `Crowbar`. So we'd need a `bad_test` to account for out-of-range pico-seconds, or we'd need to assume we're on 64-bit machine to use the `range` (on `int`) function and convert to int64.

I'm working on that change rn."	raphael-proust	2020-08-12T08:23:56Z		False				-2	tezos/tezos	1980
gid://gitlab/DiffNote/394636258		Well thanks for pointing this out. I just found a bug. It's ok because it only affects “negative dates” (i.e., before epoch). Fixing the test and the bug now.	raphael-proust	2020-08-12T08:23:56Z		False				-2	tezos/tezos	1980
gid://gitlab/DiffNote/394636261		AFAIK, (but I'll check just to make sure,) this TZ doesn't matter because it is converted internally into a TZ-agnostic representation. So testing with different TZ arguments would only be testing the internals of Ptime (which have been fuzzed a lot). Doing so would also lead to some more range issues where the TZ offset would bring the representation out of the acceptable input range.	raphael-proust	2020-08-12T08:23:56Z		False				-2	tezos/tezos	1980
gid://gitlab/DiffNote/394636263		I must admit I am not familiar with the taxonomy of tests. I just put this one in the existing category that fit the most. I guess if it's good enough it might be worth keeping as is to avoid additional complexity in the CI but I don't know if it is.	raphael-proust	2020-08-12T08:23:57Z		False				-2	tezos/tezos	1980
gid://gitlab/DiffNote/394636264		I think the test dependencies should be recognised automatically. (E.g., `alcotest` is not mention in the install script.) I'll look into why it doesn't install.	raphael-proust	2020-08-12T08:23:57Z		False				-2	tezos/tezos	1980
gid://gitlab/DiffNote/394644741		"Couldn't you restrict `span` so that `epoch + span` is within `Ptime.min` and `Ptime.max` (using the appropriate `range` function of Crowbar?) 

Would it be hard to add a `range_int64`?"	arvidnl	2020-08-12T08:37:02Z		False				-1	tezos/tezos	1980
gid://gitlab/DiffNote/394648733		I would call this property-based testing but I'm not sure the term is well-known enough that it wont confuse people. I just realized that this section of the `.gitlab-ci.yml` is generated automatically. It would definitely be overkill (and complicated) to have the script try to figure out whether a test should be called `unit:` or `prop:`, so we can disregard this idea ;)	arvidnl	2020-08-12T08:43:36Z		False				0	tezos/tezos	1980
gid://gitlab/DiffNote/394655027		"> Couldn't you restrict span so that epoch + span is within Ptime.min and Ptime.max (using the appropriate range function of Crowbar?)

We could give a range for the `day` component that would lead to fewer out-of-range times.

> Would it be hard to add a range_int64?

The short answer is yes. The long answer is:

We could check for the given range:
- if it fits within native bit width then we use the same int hack I used in the last commit,
- if it doesn't we either
    - generate `int64` and then use `bad_test` to limit the results
    - generate `int64` and then `logand` with a value that clips the values that are out-of-range by power-of-2 order of magnitude and then use `bad_test` for the sub-power-of-2-order-of-magnitude filtering
    - generate two or three ranged ints and then convert them to int64 and sum them together (or some variation such as one int32 and one ranged int)

I don't think it's worth the added complexity."	raphael-proust	2020-08-12T08:53:51Z		False				-2	tezos/tezos	1980
gid://gitlab/DiffNote/394655030		I checked and my description above is correct.	raphael-proust	2020-08-12T08:53:51Z		False				-2	tezos/tezos	1980
gid://gitlab/DiffNote/394655034		Done	raphael-proust	2020-08-12T08:53:52Z		False				-2	tezos/tezos	1980
gid://gitlab/DiffNote/394682965		Nope, sounds like something we could feature request in crowbar rather.	arvidnl	2020-08-12T09:37:46Z		False				-1	tezos/tezos	1980
gid://gitlab/DiffNote/394721967		I did the first part (limiting the range of `day` leaving some space around to make sure that I didn't accidentally clip possible values) and I'll make a feature request for the second part.	raphael-proust	2020-08-12T10:41:06Z		False				-2	tezos/tezos	1980
gid://gitlab/DiffNote/397707178		Done. I added them as comments in the form `Property: forall <var>: <type>, <some property>`. Let me know if that looks ok for you.	raphael-proust	2020-08-18T11:13:57Z		False				-2	tezos/tezos	1980
gid://gitlab/DiffNote/397716178		"I made the branch https://gitlab.com/nomadic-labs/tezos/-/tree/raphael-p@test-lib-base--opam to test the opam packaging. This should find issues in the installation of dependencies.

It might not find issues related to the Makefile, but idk how we can test that and I think it's probably related to the `opam` trickery we do."	raphael-proust	2020-08-18T11:22:30Z		False				-2	tezos/tezos	1980
gid://gitlab/DiffNote/397777286		"```suggestion:-0+0
      (* Property:
         forall [a]: [t],
           [to_string]/[of_string_opt] roundtrip modulo option. *)
      let s = to_string t in
```

idk about formatting/indentation, I copy-pasted your format from below."	arvidnl	2020-08-18T12:34:05Z		False				-1	tezos/tezos	1980
gid://gitlab/DiffNote/398072662		The packaging succeeds.	raphael-proust	2020-08-18T16:34:45Z		False				-2	tezos/tezos	1980
gid://gitlab/DiffNote/398072664		"Oh, I forgot to add them to the p2p test as well. Yeah, I kind of made up the formatting mostly because it wouldn't always go on a single line and the arbitrary linesplit was worse than the quickly made one. I'll add this but also fold it straight onto the appropriate commit.

EDIT: done"	raphael-proust	2020-08-18T16:34:45Z		False				-2	tezos/tezos	1980
gid://gitlab/DiffNote/355042888		I think the place to define fixtures is `tests_python/tests/conftest.py`. The ones in `tests_python/tests/test_mockup.py` should probably move there too but not in this MR.	rafoo_	2020-06-04T08:04:16Z		False				0	tezos/tezos	1859
gid://gitlab/DiffNote/355069600		"So I should use the one defined in `test_mockup`? I'm really out of my depth wrt the Python framework, so I just copied what I found in `test_mockup` :/
Ideally I would just like to call `tezos-client -M mockup blah blah` without having to launch a node, without creating a persistent mockup environment, and get the standard output. What's the proper way to do that?"	igarnier	2020-06-04T08:39:27Z		False				-2	tezos/tezos	1859
gid://gitlab/DiffNote/357228508		Your existing code doesn't launch a node. You can pass `-s` to `pytest` to see the standard output of the tests. You'll see that no node is started.	smelc	2020-06-08T12:38:51Z		False				0	tezos/tezos	1859
gid://gitlab/DiffNote/357230655		"```suggestion:-0+0
        assert mockup_client.run(prms).strip() == 'NetXuwrXPL4VeX5'
```"	smelc	2020-06-08T12:41:41Z		False				0	tezos/tezos	1859
gid://gitlab/DiffNote/357230894		"```suggestion:-0+0
        assert mockup_client.run(prms).strip() == 'NetXLGmPi3c5DXf'
```"	smelc	2020-06-08T12:42:00Z		False				0	tezos/tezos	1859
gid://gitlab/DiffNote/357421122		"But it is the case that this creates a persistent mockup environment, right?
It it possible to call `client.run` without having a node being launched, or `mockup_client.run` without a persistent environment being created? I'm sorry to ask what are probably dumb questions :/"	igarnier	2020-06-08T15:53:48Z		False				-2	tezos/tezos	1859
gid://gitlab/DiffNote/357776329		@rafoo_ I added a 'simple_client' fixture in `conftest.py` and used that in `test_misc.py`. Big thanks to @bidinger for showing me the ropes!	igarnier	2020-06-09T07:51:16Z		False				-2	tezos/tezos	1859
gid://gitlab/DiffNote/358331675		Good!	rafoo_	2020-06-09T20:16:00Z		False				0	tezos/tezos	1859
gid://gitlab/DiffNote/349891845		"```suggestion:-0+0
    # in the project root directory
```"	rafoo_	2020-05-27T09:34:50Z		False				0	tezos/tezos	1846
gid://gitlab/DiffNote/349367278		This chunk could be simplified a little with the changes from https://gitlab.com/tezos/tezos/-/merge_requests/1804, spceifically, by using one of the new binding operators.	raphael-proust	2020-05-26T14:59:54Z		False				-2	tezos/tezos	1843
gid://gitlab/DiffNote/353405211		"Same question applies to the same function in lib_protocol_compiler: we're just copying source files, which are small, can't we just use `really_input_string` with `in_channel_length`?

(otherwise it seems pretty inefficient: small buffer, bytes-to-string conversion, sub)"	mbouaziz	2020-06-02T07:19:06Z		False				0	tezos/tezos	1836
gid://gitlab/DiffNote/353405215		Could we reuse the packer of lib_protocol_compiler?	mbouaziz	2020-06-02T07:19:07Z		False				0	tezos/tezos	1836
gid://gitlab/DiffNote/353405217		Could you add a comment explaining why this is needed?	mbouaziz	2020-06-02T07:19:07Z		False				0	tezos/tezos	1836
gid://gitlab/DiffNote/353454820		"The short answer is no. The long answer is that I just copied the sig packer and made it a struct packer with as little changes as possible. My aim being to get support for legacy structs working.

My guess is that it was here for some compatibility reason between various versions of OCaml or something."	raphael-proust	2020-06-02T08:31:59Z		False				-2	tezos/tezos	1836
gid://gitlab/DiffNote/353454822		"Probably. We could probably have an additional argument that switches between the two behaviour. TBH, and as mentioned in the other thread: I just copied the sig packer and made it a struct packer with as little changes as possible. My aim being to get support for legacy structs working.

I'll change it to factor the two binaries into one."	raphael-proust	2020-06-02T08:31:59Z		False				-2	tezos/tezos	1836
gid://gitlab/DiffNote/353454824		"I'm not very concern by the efficiency here. Ultimately not only are the files smallish, but there aren't that many of them and this packing only happens once during build to generate the necessary files.

I can have a look at the efficiency of that binary, but as long as it's readable, I'm relatively happy."	raphael-proust	2020-06-02T08:31:59Z		False				-2	tezos/tezos	1836
gid://gitlab/DiffNote/353826365		"Smaller, more readable, probably faster too
```ocaml
let dump_file oc file =
  let ic = open_in file in
  output_string oc (really_input_string ic (in_channel_length ic));
  close_in ic
```"	mbouaziz	2020-06-02T16:38:59Z		False				0	tezos/tezos	1836
gid://gitlab/DiffNote/353874893		"https://caml.inria.fr/pub/docs/manual-ocaml/libref/Stdlib.html#VALin_channel_length

with docker/kubernetes/aws/plan9/nfs/etc stacks of volumes, `in_channel_length` could be seen as quite fragile …"	smondet	2020-06-02T18:15:53Z		False				0	tezos/tezos	1836
gid://gitlab/DiffNote/354251505		You can just add a 2020 line for Nomadic Labs	paracetamolo	2020-06-03T08:33:22Z		False				0	tezos/tezos	1836
gid://gitlab/DiffNote/354267874		does it work w/o it?	paracetamolo	2020-06-03T08:54:30Z		False				0	tezos/tezos	1836
gid://gitlab/DiffNote/354267946		that would be nice	paracetamolo	2020-06-03T08:54:38Z		False				0	tezos/tezos	1836
gid://gitlab/DiffNote/354313674		Done with the factoring	raphael-proust	2020-06-03T09:54:37Z		False				-2	tezos/tezos	1836
gid://gitlab/DiffNote/354313676		Done	raphael-proust	2020-06-03T09:54:37Z		False				-2	tezos/tezos	1836
gid://gitlab/DiffNote/354313678		"I'm unwilling to change the thing right now because it justworks™ and I do not have enough bandwidth to investigate portability and efficiency of alternatives.

But I'm ok with changing this if someone has enough bandwidth to investigate it."	raphael-proust	2020-06-03T09:54:37Z		False				-2	tezos/tezos	1836
gid://gitlab/DiffNote/354313679		"I am not sure if the existing checks are sufficient and would catch potential issues caused by this.

So I can easily add a commit to remove that bit of trickery, but I'd like someone's opinion as to whether it's sound."	raphael-proust	2020-06-03T09:54:37Z		False				-2	tezos/tezos	1836
gid://gitlab/DiffNote/354659084		![whatever](https://31.media.tumblr.com/tumblr_ma81eq32Ev1ranhnao1_400.gif)	mbouaziz	2020-06-03T16:49:40Z		False				0	tezos/tezos	1836
gid://gitlab/DiffNote/355074157		I'm not proposing we remove, was just curious to see if it worked w/o.	paracetamolo	2020-06-04T08:45:31Z		False				0	tezos/tezos	1836
gid://gitlab/DiffNote/355078821		I'm opening an issue for that and closing the thread.	raphael-proust	2020-06-04T08:51:23Z		False				-2	tezos/tezos	1836
gid://gitlab/DiffNote/353449236		"This assertion seems to rely on the implementation of `Lwt_pipe.pop_now_exn` and `Lwt_pipe.pop_now` to not yield, otherwise there could be a race condition where the pipe is emptied between `is_empty` and `pop_now`. Maybe this cannot happen thanks to various invariants, but wouldn't it be better to get rid of it with something like:
```
let rec loop () =
  match Lwt_pipe.pop_now st.messages with
    | None | Some (_, None) ->
        Lwt.return_unit
    | Some (_, Some w) ->
        Lwt.wakeup_later w (error (Exn Lwt_pipe.Closed));
        loop ()
in
loop ()
```"	romain.nl	2020-06-02T08:24:19Z		False				0	tezos/tezos	1845
gid://gitlab/DiffNote/353453925		"This is out of scope for this MR but we could get rid of this assertion too by having two different `Lwt_pipe` modules, one for infinite pipes and one for finite pipes.

Or it could be the same type but with an additional type parameter denoting whether it is infinite or not (e.g. `(finite, 'a) Lwt_pipe.t`) to share most of the existing functions and then have a `push_now_infinite` variant which only takes an `(infinite, 'a) Lwt_pipe.t` and cannot fail.

Or maybe we can even have `infinite = unit` and `finite = bool` so that `push_now` has type `('k, 'a) t -> 'a -> 'k`, but if there are other functions whose behavior can be improved with the infinite/finite split it will probably not work for them.

Maybe the verbosity added by the additional parameter or module is not worth it though.

Just food for thought, feel free to convert this into an issue."	romain.nl	2020-06-02T08:30:46Z		False				0	tezos/tezos	1845
gid://gitlab/DiffNote/358042710		"This cannot happen thanks to invariants. Those invariants are guaranteed by the type system because only `Lwt.t` values can yield.

I replaced the thing anyway (although there was a subtle difference between your version and the existing code, so please review carefully)"	raphael-proust	2020-06-09T13:24:53Z		False				-2	tezos/tezos	1845
gid://gitlab/DiffNote/358111918		Indeed, I forgot to loop in the `Some (_, None)` case, good catch.	romain.nl	2020-06-09T14:43:38Z		False				0	tezos/tezos	1845
gid://gitlab/DiffNote/382019103		nit: name the variable `pool_cfg` because it's the configuration part of the pool, not the whole pool.	raphael-proust	2020-07-20T06:41:35Z		False				0	tezos/tezos	1914
gid://gitlab/DiffNote/382019108		"I'm a bit worried about installing this RPC on `netwrok/config` because it doesn't return the whole config. At some point we might want to also return whether the node is in private mode and the list of peers that are trusted and even maybe the identity. At that point we'll have to break backwards compatibility or make a new RPC.

Maybe export more info (private mode at least) or maybe set the path to something more specific like `network/limits`.

I'd be inclined to go with the second options. But I'm holding this opinion weakly."	raphael-proust	2020-07-20T06:41:36Z		False				0	tezos/tezos	1914
gid://gitlab/DiffNote/382110266		I have been informed off-band that the RPC was never released. It can be safely removed.	raphael-proust	2020-07-20T08:41:19Z		False				0	tezos/tezos	1914
gid://gitlab/DiffNote/382126812		done	abate	2020-07-20T09:04:38Z		False				-2	tezos/tezos	1914
gid://gitlab/DiffNote/382163512		Actually I resolved this thread by mistake. It's not meant to be resolved, it's meant to be discussed.	raphael-proust	2020-07-20T09:51:59Z		False				0	tezos/tezos	1914
gid://gitlab/DiffNote/382179880		"these are the runtime config parameters computed from the `--connection` parameter. I don't think we should dump the entire p2p configuration here.

As noted, there might be other runtime parameters that we might want to add. Not sure. limits is not fitting either I think. Maybe `/network/runtime/config` ?"	abate	2020-07-20T10:17:29Z		False				-2	tezos/tezos	1914
gid://gitlab/DiffNote/382252922		"Well the idea of `limits` is that if we want to export some more parameters later, we do so in another RPC.

The notion of “runtime config” seems good, but I'm not sure about having a `runtime` directory. What else would it hold? Can we have `/network/runtime-config`? Or maybe, because it's values derived from the config we could have `/network/derived-config`.

Or `/network/config` but it takes parameters to decide if it dumps: derived config values (default), static config values, or both. That might be a bit overkill and outside the scope of this MR."	raphael-proust	2020-07-20T12:16:57Z		False				0	tezos/tezos	1914
gid://gitlab/DiffNote/382365772		"During the merge team meeting today, we discussed this, and we think it would be better to have a `/config` RPC which returns the whole configuration (i.e. the config file, modified with command-line options, enriched with the value which was chosen for optional options; basically what is obtained after `Node_config_file.update` if I'm not mistaken).

There already is `/config/network/user_activated_upgrades` and `/config/network/user_activated_overrides`, by the way. When we added those, we figured we could later add the `GET /config` RPC to get the whole config."	romain.nl	2020-07-20T14:46:46Z		False				0	tezos/tezos	1914
gid://gitlab/DiffNote/386635890		ok this is done.	abate	2020-07-28T09:02:24Z		False				-2	tezos/tezos	1914
gid://gitlab/DiffNote/389887561		"The merge team had a look again. Adding `/config/p2p` and `/config/p2p/limits` is OK if we cannot add `/config` which would return the whole config file, but it would really be better to just add `/config`.

Can you give us an idea how hard it would be? If I recall correctly this implies to make a bunch of type definitions accessible in the RPC directory. I'm not sure how exactly: move them in a lib which is a dependency of the directory (`lib_base`?) or put the definition of the RPC in `node_config_file.ml` (but maybe having a dependency on this file in the RPC directory is a bad idea)?"	romain.nl	2020-08-03T15:13:33Z		False				0	tezos/tezos	1914
gid://gitlab/DiffNote/394180806		"I've added `/config` that returns the config file.

```
$ tezos-client rpc get /config

{ ""data-dir"": ""/tmp/tezos-node.NNJyJkSj"",
  ""rpc"": { ""listen-addrs"": [ ""127.0.0.1:18731"" ] },
  ""p2p"":
    { ""expected-proof-of-work"": 0,
      ""bootstrap-peers"":
        [ ""127.0.0.1:19730"", ""127.0.0.1:19731"", ""127.0.0.1:19732"",
          ""127.0.0.1:19733"", ""127.0.0.1:19734"", ""127.0.0.1:19735"",
          ""127.0.0.1:19736"", ""127.0.0.1:19737"", ""127.0.0.1:19738"",
          ""127.0.0.1:19739"" ], ""listen-addr"": ""127.0.0.1:19731"",
      ""private-mode"": true,
      ""limits"":
        { ""connection-timeout"": 10, ""min-connections"": 1,
          ""expected-connections"": 3, ""max-connections"": 4,
          ""max_known_points"": [ 24, 18 ], ""max_known_peer_ids"": [ 24, 18 ] } },
  ""shell"": { ""chain_validator"": { ""bootstrap_threshold"": 0 } },
  ""network"": ""sandbox"" }

```"	abate	2020-08-11T15:16:12Z		False				-2	tezos/tezos	1914
gid://gitlab/DiffNote/394183606		i've removed the `register_describe_directory_service` from here and added it to the run function in the node otherwise I get a conflict from resto because I'm doing the same operation twice I think ...	abate	2020-08-11T15:20:30Z		False				-2	tezos/tezos	1914
gid://gitlab/DiffNote/394184396		this is actually the encoding of the file, not sure if it is better to have a `Data_encoding.json` here instead.	abate	2020-08-11T15:21:28Z		False				-2	tezos/tezos	1914
gid://gitlab/DiffNote/394184758		here I dump the file as it is on disk.	abate	2020-08-11T15:21:59Z		False				-2	tezos/tezos	1914
gid://gitlab/DiffNote/413416142		"I'm not entirely sure it's the right way to do that. Specifically, I notice that `docs/doc_gen/rpc_doc.ml` also uses `Node.build_rpc_directory` but that it doesn't register the description.

We might be better off registering the description service here and then
1. `Node_directory.build_node_directory` doesn't take a `dir` argument (i.e., it doesn't build on top of another directory but just its own directory)
2. `Node_directory.build_node_directory` also registers the description
3. Use `RPC_directory.merge` to fuse the two together.

Alternatively, we can inverse the flow and do:
1. `Node_directory.build_node_directory` doesn't take a `dir` argument
2. `Node.build_rpc_directory` takes a `dir` argument to build on top of. And `Node.build_rpc_directory` is responsible for registering the descirption service for the whole thing."	raphael-proust	2020-09-16T07:32:46Z		False				-1	tezos/tezos	1914
gid://gitlab/DiffNote/413416146		that's fine	raphael-proust	2020-09-16T07:32:46Z		False				2	tezos/tezos	1914
gid://gitlab/DiffNote/413416149		"Quick question: Is the config static? Are they no RPCs to change some values of the config (e.g., to dynamically change peer limits, etc.)?

If the config is static then this is fine (although do note that this is not the current state of the file (which is shown below), but if the config is dynamic then this is not.

----------------

Currently this file does

```
let build_node_directory config dir =
  RPC_directory.register0 dir Node_services.S.config (fun () () ->
      return config)
```"	raphael-proust	2020-09-16T07:32:47Z		False				0	tezos/tezos	1914
gid://gitlab/DiffNote/413416156		ping @romain.nl : is this satisfying?	raphael-proust	2020-09-16T07:32:47Z		False				0	tezos/tezos	1914
gid://gitlab/DiffNote/413449451		"We should make it clear that this is not the config file which is in the data-dir, but a modification of this file to take into account:
- the command-line arguments;
- the default bootstrap peers of the chosen network."	romain.nl	2020-09-16T08:26:21Z		False				0	tezos/tezos	1914
gid://gitlab/DiffNote/413451709		Indeed this is exactly what we wanted the RPC to do :)	romain.nl	2020-09-16T08:29:45Z		False				0	tezos/tezos	1914
gid://gitlab/DiffNote/413852932		The config is indeed static for now. In the future we might add handles to modify the conf of a running node on the fly. This MR certainly open this possibility.	abate	2020-09-16T18:36:19Z		False				-2	tezos/tezos	1914
gid://gitlab/DiffNote/413852934		The problem here is that `Node_directory` is in `bin_node/node.ml` and the merge is in `lib_shell/node.ml` so, dependency wise this does not work ... I agree that this is a bit messy, and this is also why I proposed https://gitlab.com/tezos/tezos/-/merge_requests/2024 to move all the configuration DS in `lib_base_shell` and remove them from `bin_node` ...	abate	2020-09-16T18:36:20Z		False				-2	tezos/tezos	1914
gid://gitlab/DiffNote/413852936		"done. I clarified the description : 

        ""Return the runtime node configuration ( this take into account the \
         command-line arguments and the on-disk configuration file ) """	abate	2020-09-16T18:36:20Z		False				-2	tezos/tezos	1914
gid://gitlab/DiffNote/349865972		This can be further optimised by the introduction of a `map3` (or just doing a plain recursion).	raphael-proust	2020-05-27T09:01:05Z		False				-2	tezos/tezos	1847
gid://gitlab/DiffNote/349868949		"A dedicated `fold_lefti` would avoid some constructions/destructions of tuple. However, this might not be necessary because the compiler might optimise those away already.

Might be done after profiling if it shows to be necessary."	raphael-proust	2020-05-27T09:04:53Z		False				-2	tezos/tezos	1847
gid://gitlab/DiffNote/349934157		We could also remove it because `Zplus` performs a trimming operation that calls `String.sub`.	raphael-proust	2020-05-27T10:33:10Z		False				-2	tezos/tezos	1847
gid://gitlab/DiffNote/349966400		done	raphael-proust	2020-05-27T11:15:03Z		False				-2	tezos/tezos	1847
gid://gitlab/DiffNote/353571680		If you look carefully, we're computing `i` to the power of `j`, turning it to a fold with multiplication could be faster	mbouaziz	2020-06-02T11:01:48Z		False				2	tezos/tezos	1847
gid://gitlab/DiffNote/353571683		"```suggestion:-0+0
        (fun acc index ->
```"	mbouaziz	2020-06-02T11:01:49Z		False				-1	tezos/tezos	1847
gid://gitlab/DiffNote/353571687		"I suggest to explicity keep this here to make it clearer we're in Z_m arithmetics
```suggestion:-0+0
          if G.Z_m.(indice = i) then acc
```"	mbouaziz	2020-06-02T11:01:49Z		False				0	tezos/tezos	1847
gid://gitlab/DiffNote/353571689		The previous version got rid of the last char	mbouaziz	2020-06-02T11:01:49Z		False				0	tezos/tezos	1847
gid://gitlab/DiffNote/354342400		"I did that on purpose but maybe it's actually worst. I wanted to ease readability by having `name`/`names` for element and list thereof everywhere.

I'm not holding the opinion strongly so I can change it to the ~~inconsistent~~ grammatically correct version."	raphael-proust	2020-06-03T10:23:54Z		False				-2	tezos/tezos	1847
gid://gitlab/DiffNote/354342402		I tried. Can you check I haven't messed up something?	raphael-proust	2020-06-03T10:23:54Z		False				-2	tezos/tezos	1847
gid://gitlab/DiffNote/354342403		Done	raphael-proust	2020-06-03T10:23:54Z		False				-2	tezos/tezos	1847
gid://gitlab/DiffNote/354342404		My bad, I misread that. I'm removing that commit.	raphael-proust	2020-06-03T10:23:55Z		False				-2	tezos/tezos	1847
gid://gitlab/DiffNote/354653406		![image](/uploads/29cd220e568c75d43b87a4942df6fa27/image.png)	mbouaziz	2020-06-03T16:38:55Z		False				-1	tezos/tezos	1847
gid://gitlab/DiffNote/354653408		LGTM, I'd love it if @MarcBeunardeau or @victor-dumitrescu confirmed too	mbouaziz	2020-06-03T16:38:56Z		False				2	tezos/tezos	1847
gid://gitlab/DiffNote/357882160		Seems equivalent to me too.	victor-dumitrescu	2020-06-09T09:58:19Z		False				2	tezos/tezos	1847
gid://gitlab/DiffNote/357941891		"It looks like Americans, which have no respect, created indexes as a plural of index instead of using the latin plural. If it looks more consistent to you @raphael-proust, use that :-)

In any case, let's sort that out so that I can merge ;-)"	pirbo	2020-06-09T11:21:10Z		False				-1	tezos/tezos	1847
gid://gitlab/DiffNote/357991014		I'm holding this opinion very weakly so whoever feels like we should change it can just push a commit to do that. In the meantime I'm resolving this in order to progress towards merge.	raphael-proust	2020-06-09T12:23:11Z		False				-2	tezos/tezos	1847
gid://gitlab/DiffNote/362148800		`merge_inefficient` is not called anywhere. Should it be removed? Is it there as a way to document `merge`? Is it there to test `merge` against?	raphael-proust	2020-06-16T14:39:29Z		False				-1	tezos/tezos	1832
gid://gitlab/DiffNote/363055133		"```suggestion:-0+0
        within a file. Lines without timestamp are considered smaller than
```"	mbouaziz	2020-06-17T15:50:16Z		False				0	tezos/tezos	1832
gid://gitlab/DiffNote/363075456		Indeed. I kept it as a reference to document `merge` (also anticipating the criticism that the k-merge algorithm was an overkill to merge a bunch of log files and that it would be better to keep the simple version. Although it can make a difference for big files). I don't know if I should remove it or comment it.	bidinger	2020-06-17T16:19:38Z		False				-2	tezos/tezos	1832
gid://gitlab/DiffNote/363084097		"I'd say add a comment in `merge` that says something along the lines of “naive merging is too inefficient when logs grow” and remove the dead code.

But other options might also be valid."	raphael-proust	2020-06-17T16:34:11Z		False				-1	tezos/tezos	1832
gid://gitlab/DiffNote/369914295		"```suggestion:-0+0
def get_time_stamp(line : str) -> datetime.datetime:
```"	arvidnl	2020-06-29T12:25:16Z		False				0	tezos/tezos	1832
gid://gitlab/DiffNote/369925920		I followed @raphael-proust's suggestion.	bidinger	2020-06-29T12:41:41Z		False				-2	tezos/tezos	1832
gid://gitlab/DiffNote/376339159		"```suggestion:-0+0
    pattern = r'(\w* +\d{1,2} \d{2}:\d{2}:\d{2}\.\d{3})'
```

without which I could not merge the logs of a node."	arvidnl	2020-07-09T08:24:35Z		False				-1	tezos/tezos	1832
gid://gitlab/DiffNote/345292940		"It may be worth it to make a small function `load_json_file` to share those two occurrences.

Other than that, looks good to me!"	romain.nl	2020-05-19T15:10:04Z		False				0	tezos/tezos	1830
gid://gitlab/DiffNote/345296118		@igarnier I think this comment is for you.	abate	2020-05-19T15:14:17Z		False				-2	tezos/tezos	1830
gid://gitlab/DiffNote/345670477		Done (cf MR !1828)	igarnier	2020-05-20T07:16:57Z		False				0	tezos/tezos	1830
gid://gitlab/DiffNote/345724997		Thanks!	romain.nl	2020-05-20T08:33:37Z		False				0	tezos/tezos	1830
gid://gitlab/DiffNote/345840974		I've rebased on top of master.	abate	2020-05-20T11:01:35Z		False				-2	tezos/tezos	1830
gid://gitlab/DiffNote/350052021		This is quite fragile and will break if `tests_python` is renamed. At the very least, I'd move this as a global constant. You can also retrieve this path from the script location and add a defensive assertion that the script is where it's supposed to be (see `paths.tezos_home()`)	bidinger	2020-05-27T13:05:54Z		False				0	tezos/tezos	1848
gid://gitlab/DiffNote/350174305		"I went for:

```python
        print(f""No {adjective} *{{.%s}} relevant file found"" %
              "","".join(ml_extensions))
```

Using triple curly braces to get rid of the `%s` looked unreadable and I feel having strings within `f""{...}""` (in this case I mean `"",""`) is also not easy to understand; hence the remaining `%s`."	smelc	2020-05-27T15:27:07Z		False				-2	tezos/tezos	1848
gid://gitlab/DiffNote/350174671		"I meant ""git add again"" :laughing: I rewrote this."	smelc	2020-05-27T15:27:38Z		False				-2	tezos/tezos	1848
gid://gitlab/DiffNote/350174967		Indeed that's the best solution! Not need to change this `Makefile` anymore.	smelc	2020-05-27T15:28:00Z		False				-2	tezos/tezos	1848
gid://gitlab/DiffNote/350175805		"Indeed, I retrieved the `tests_python` directory from the running script's location as you suggested. On the way I found another hardcoded reference to `""tests_python""` which I eliminated too."	smelc	2020-05-27T15:29:02Z		False				-2	tezos/tezos	1848
gid://gitlab/DiffNote/350181560		"It's fine, but I think I would go for something like
```
extensions = ""{"" + "","".join(ml_extensions) + ""}""
print(f""No {adjective} *.{extensions} relevant file found"")
```"	bidinger	2020-05-27T15:36:55Z		False				0	tezos/tezos	1848
gid://gitlab/DiffNote/350713143		Did that in my last update :+1:	smelc	2020-05-28T08:28:56Z		False				-2	tezos/tezos	1848
gid://gitlab/DiffNote/351228846		I would add an option `--lint-only` so that users don't have to run the tests if they don't want to (for a faster pre-commit).	bidinger	2020-05-28T15:57:11Z		False				-1	tezos/tezos	1848
gid://gitlab/DiffNote/351235055		missing types for `files`	bidinger	2020-05-28T16:07:16Z		False				0	tezos/tezos	1848
gid://gitlab/DiffNote/351651541		I've implemented this suggestion :+1:	smelc	2020-05-29T09:28:28Z		False				-2	tezos/tezos	1848
gid://gitlab/DiffNote/351651800		I've fixed that (and in a few other places)	smelc	2020-05-29T09:28:52Z		False				-2	tezos/tezos	1848
gid://gitlab/DiffNote/360309823		"?
```suggestion:-0+0
          "" [{_LINT_ONLY}]""
```"	mbouaziz	2020-06-12T14:32:52Z		False				0	tezos/tezos	1848
gid://gitlab/DiffNote/361227153		"And I'd guess similarly below for `--test-itself`?

And why isn't there a `__UNSTAGED`?"	raphael-proust	2020-06-15T13:24:50Z		False				0	tezos/tezos	1848
gid://gitlab/DiffNote/361228944		"```suggestion:-2+0
- a `pre-commit
  <https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks>`_ hook
  running a subset of the CI's checks (OCaml and Python linting, and
  Python tests) at ``tests_python/scripts/pre_commit.py`` (see its
  header for installation instructions).
```"	arvidnl	2020-06-15T13:27:00Z		False				0	tezos/tezos	1848
gid://gitlab/DiffNote/361249801		I've applied both of your suggestions :+1:	smelc	2020-06-15T13:38:06Z		False				-2	tezos/tezos	1848
gid://gitlab/DiffNote/353476335		"I would start with a lower initial delay, like [1.] or [2.].

Let's assume a hypothetical scenario where the node crashes and the user has a script which detects that and restarts the node automatically. On my computer it takes about 100ms for a sandbox node (with an empty chain) to get to ""the Tezos node is now ready"", and between 2 and 3 seconds for a mainnet node. So ideally we should try to connect again 3 seconds after the node crashed, to minimize the baker's downtime. With an initial delay of [1.], we'll try again immediately after the crash, then 1s after the crash, then 2.5s after the crash and likely succeed. With an initial delay of [2.], we'll try again immediately, then 2s after (probably failing on mainnet), then 5s after the crash.

Additionally, and unrelated, maybe we should cap the maximum delay between retries? For instance to something like 10 minutes or 1 hour. Ideally it could be configurable. Maybe in another MR."	romain.nl	2020-06-02T09:00:51Z		False				0	tezos/tezos	1820
gid://gitlab/DiffNote/353686792		I implemented the delay cap you suggested making it trivial to adopt the semantics you propose. So I did that, plus a rebase.	vbotbol	2020-06-02T13:36:07Z		False				-2	tezos/tezos	1820
gid://gitlab/DiffNote/345751320		"```suggestion:-0+0
          (registration_exn ""invalid event name: %S contains %C""))
```
The uppercase `C` not only adds quotes, it also escapes unprintable characters."	romain.nl	2020-05-20T09:05:02Z		False				0	tezos/tezos	1825
gid://gitlab/DiffNote/345754740		"```suggestion:-0+0
    Internal_event.register_section section
```"	romain.nl	2020-05-20T09:09:25Z		False				-1	tezos/tezos	1825
gid://gitlab/DiffNote/383772323		this is now a parameter. Can this result in a runtime error while setting this parameter ?	abate	2020-07-22T13:28:59Z		False				0	tezos/tezos	1921
gid://gitlab/DiffNote/383776787		here I can create multiple counters with the same id. Maybe it's not a big problem... and I guess it's not worth it to add some kind of sanity check.	abate	2020-07-22T13:32:45Z		False				-1	tezos/tezos	1921
gid://gitlab/DiffNote/383777427		my comment about maybe is more related to this piece of code	abate	2020-07-22T13:33:35Z		False				3	tezos/tezos	1921
gid://gitlab/DiffNote/383780841		do we also have a cleanup function for the worker ? Needed ? Or some kind of GC to avoid saturating the table ...	abate	2020-07-22T13:35:21Z		False				10	tezos/tezos	1921
gid://gitlab/DiffNote/384243680		Currently, the moving average module is only used in p2p_io_scheduler with a fixed argument equal to one second, so it won't fail. If we make this a configuration parameter, then it can fail at runtime when given a zero or negative refresh interval. This assertion failure would then happen when starting the io_scheduler (so, when starting the node).	igarnier	2020-07-23T07:05:53Z		False				-2	tezos/tezos	1921
gid://gitlab/DiffNote/384247766		"Looking behding the scenes, this id is used to construct a logging section in `Lwt_worker_event.on_event`. I don't think this can cause any problem. The original code hard-codes the string ""counter"" here."	igarnier	2020-07-23T07:15:07Z		False				-2	tezos/tezos	1921
gid://gitlab/DiffNote/384249354		These counter ids are globally fresh, I think this is fine (they actually don't need to be, we could incorporate the counter in the `state` I believe).	igarnier	2020-07-23T07:18:42Z		False				-2	tezos/tezos	1921
gid://gitlab/DiffNote/384250549		Good question. We don't want to kill the worker when destroying a counter (there might be other counters still alive in the table), but it could make sense to have a function that performs a full cleanup and kill the worker. Currently, there is no such functionality: the moving average worker is there forever, even after we kill the p2p_io_scheduler.	igarnier	2020-07-23T07:21:22Z		False				-2	tezos/tezos	1921
gid://gitlab/DiffNote/384275216		And i guess the number of counter is bounded, so there is no need to do any other accounting.	abate	2020-07-23T08:03:44Z		False				10	tezos/tezos	1921
gid://gitlab/DiffNote/384276568		ok. if it's not a parameter then the assertion is good for me.	abate	2020-07-23T08:06:20Z		False				0	tezos/tezos	1921
gid://gitlab/DiffNote/384276795		ok.	abate	2020-07-23T08:06:37Z		False				-1	tezos/tezos	1921
gid://gitlab/DiffNote/384277125		ok (the only way to resolve a thread is to add a message ...)	abate	2020-07-23T08:07:07Z		False				3	tezos/tezos	1921
gid://gitlab/DiffNote/384285362		"The library does not enforce any bound on the numbers of counters, but afaiu: for each instance of p2p_io_scheduler, there's one counter for all reads + one counter for all writes + 2 counters per connection wrapper (read & write). Ie read and writes are throttled both on a per-connection basis and on a per-io-scheduler ('global') basis. There's one `P2p_io_scheduler.t` instance per instance of the p2p layer (so only one in a vanilla node).

Counters associated to connections are supposed to be destroyed when the connection wrapper is closed."	igarnier	2020-07-23T08:21:31Z		False				-2	tezos/tezos	1921
gid://gitlab/DiffNote/384287050		ok. lgtm	abate	2020-07-23T08:24:27Z		False				10	tezos/tezos	1921
gid://gitlab/DiffNote/390484980		"Wouldn't `if refresh_interval <= 0. then raise (Invalid_argument ""Moving_average.fresh_state"");` be better anyway? It's what invalid argument is for."	raphael-proust	2020-08-04T14:56:49Z		False				0	tezos/tezos	1921
gid://gitlab/DiffNote/393270712		Done	igarnier	2020-08-10T12:58:47Z		False				-2	tezos/tezos	1921
gid://gitlab/DiffNote/393415098		You can omit the `else ()`. Appart from that LGTM.	raphael-proust	2020-08-10T15:10:35Z		False				0	tezos/tezos	1921
gid://gitlab/DiffNote/393701064		I'm usually not too fond of half-ifs in imperative code, but for error management it does look better. Done modulo CI.	igarnier	2020-08-10T21:09:29Z		False				-2	tezos/tezos	1921
gid://gitlab/DiffNote/360150307		It seems to me that the `dummy_encoding` may fail (call to `Marshal.from_bytes`) and the error is not catch. This might be an issue or am I mistaken?	Saroupille	2020-06-12T10:36:35Z		False				0	tezos/tezos	1826
gid://gitlab/DiffNote/361063131		As this is just a test, might not be so important? However, I guess it would hurt to catch it and display a more specific error message.	arvidnl	2020-06-15T10:00:51Z		False				0	tezos/tezos	1826
gid://gitlab/DiffNote/372285820		I don't think we can catch the error in the data_encoding, I used  `protect` in the `read` function that uses the encoding.	julien.t	2020-07-02T08:41:57Z		False				-2	tezos/tezos	1826
gid://gitlab/DiffNote/380745080		cosmetic: add to previous line instead adding a line	pirbo	2020-07-16T14:41:20Z		False				0	tezos/tezos	1826
gid://gitlab/DiffNote/380745086		cosmetic: remove instead commenting	pirbo	2020-07-16T14:41:20Z		False				0	tezos/tezos	1826
gid://gitlab/DiffNote/380745173		Please rebase by hand because gitlab claims that an automatic rebase is impossible. While doing that you could add 2020 to previous line instead of adding a line ;-)	pirbo	2020-07-16T14:41:26Z		False				0	tezos/tezos	1826
gid://gitlab/DiffNote/382265644		Merde, I missed that...	pirbo	2020-07-20T12:36:55Z		False				0	tezos/tezos	1826
gid://gitlab/DiffNote/382775148		Oops	julien.t	2020-07-21T08:44:06Z		False				-2	tezos/tezos	1826
gid://gitlab/DiffNote/382781551		fixed. Sorry.	julien.t	2020-07-21T08:52:03Z		False				-2	tezos/tezos	1826
gid://gitlab/DiffNote/341531817		"I'm not very familiar with the requester but this seems a bit overkill for scheduling that should be relatively simple. Wouldn't the following work?

```
let _ : test_value tzresult Lwt.t = Test_Requester.fetch req key precheck_pass in
Lwt_main.yield () >>= fun () -> k ()
```

The first line starts the requests, the second line just yields (to give time for the first line) and then just executes `k`. It's very different from what you've done, but I think something like that should work?

If this work, it could even be inlined in the chunk below, replacing `with_request ""foo"" @@ fun () -> …` with the form above.

------------

Note: the same applies to the `with_unmet_request` function."	raphael-proust	2020-05-13T08:24:23Z		False				-1	tezos/tezos	1814
gid://gitlab/DiffNote/341531822		"It is unecessary to put the body of `foo_cancelled` into a function if it is just called once.

Something like that should suffice (modulo small mistakes)

```
    with_request ""foo""
    @@ fun () ->
    check_pending_count ""1 pending requests"" 1 ;
    with_unmet_request ""bar""
    @@ fun () ->
    check_pending_count ""2 pending requests"" 2 ;
    with_unmet_request ""bar""
    @@ fun () ->
    check_pending_count ""still 2 pending requests"" 2 ;
    Test_Requester.clear_or_cancel req ""foo"";
    check_pending_count ""back to 1 pending requests"" 1;
    Lwt.return_unit
```"	raphael-proust	2020-05-13T08:24:23Z		False				-1	tezos/tezos	1814
gid://gitlab/DiffNote/341571031		"Your snippet and `with_request` have differing semantics, causing the tests to fail in this case. `with_request` waits conjunctively to ensure that the `""foo""` request is resolved before the final check (`""back to 1 pending requests""`). It _does_ work in combination with an extra yield before that check:

```ocaml
  check_pending_count ""0 pending requests"" 0 ;
  with_request ""foo""
  @@ fun () ->
  check_pending_count ""1 pending requests"" 1 ;
  with_unmet_request ""bar""
  @@ fun () ->
  check_pending_count ""2 pending requests"" 2 ;
  with_unmet_request ""bar""
  @@ fun () ->
  check_pending_count ""still 2 pending requests"" 2 ;
  Lwt.return (Test_Requester.clear_or_cancel req ""foo"")
  >>= Lwt_main.yield
  >|= fun () -> check_pending_count ""back to 1 pending requests"" 1
```

Personally, I think it's clearer / less reliant on scheduler details to explicitly bind on the `""foo""` request, but I'm happy with either solution. Which do you prefer?"	CraigFe	2020-05-13T09:08:15Z		False				-1	tezos/tezos	1814
gid://gitlab/DiffNote/341571101		"For similar reasons to above, the inlining you propose changes the semantics. The naming of `foo_cancelled` was done so as to make it clear that the final check is outside the continuation chain (i.e. binds on the `""foo""` promise being resolved). The correct inlining of `foo_cancelled` is:

```ocaml
  check_pending_count ""0 pending requests"" 0 ;
  ( with_request ""foo""
  @@ fun () ->
  check_pending_count ""1 pending requests"" 1 ;
  with_unmet_request ""bar""
  @@ fun () ->
  check_pending_count ""2 pending requests"" 2 ;
  with_unmet_request ""bar""
  @@ fun () ->
  check_pending_count ""still 2 pending requests"" 2 ;
  Lwt.return (Test_Requester.clear_or_cancel req ""foo"") )
  >|= fun () -> check_pending_count ""back to 1 pending requests"" 1
```

which is less clear to me. As in the case above, this can be fixed with an extra `yield` before the check, if you prefer that solution."	CraigFe	2020-05-13T09:08:21Z		False				-1	tezos/tezos	1814
gid://gitlab/DiffNote/341600866		Oh I understand the point of this `join` now.	raphael-proust	2020-05-13T09:47:42Z		False				-1	tezos/tezos	1814
gid://gitlab/DiffNote/341787408		These two lines are, or may be, redundant, but it's a much wider issue..	mbouaziz	2020-05-13T13:37:27Z		False				-1	tezos/tezos	1815
gid://gitlab/DiffNote/345302816		@mbouaziz can you open an issue if you think this is separate? Otherwise please give actionables in this thread so progress can be made. (also the thread up from this one needs your attention)	raphael-proust	2020-05-19T15:22:57Z		False				-1	tezos/tezos	1815
gid://gitlab/DiffNote/341948703		typo	dannywillems	2020-05-13T16:43:28Z		False				0	tezos/tezos	1822
gid://gitlab/DiffNote/341948706		than `the` current head?	dannywillems	2020-05-13T16:43:29Z		False				0	tezos/tezos	1822
gid://gitlab/DiffNote/341966594		path	bidinger	2020-05-13T17:14:47Z		False				0	tezos/tezos	1822
gid://gitlab/DiffNote/341967658		this fits on one line	bidinger	2020-05-13T17:16:53Z		False				0	tezos/tezos	1822
gid://gitlab/DiffNote/342219601		"```suggestion:-0+0
def get_block_header_at_level(client: Client, level: int) -> dict:
```

Nitpicking, I think the `per` word suggests it would return several block headers."	arvidnl	2020-05-14T06:29:52Z		False				0	tezos/tezos	1822
gid://gitlab/DiffNote/342222530		"Yes. I've fixed this typo in `get_block_per_level` and `get_block_hash` as well and ""filled the region""."	vect0r	2020-05-14T06:34:53Z		False				-2	tezos/tezos	1822
gid://gitlab/DiffNote/342222532		Fixed.	vect0r	2020-05-14T06:34:53Z		False				-2	tezos/tezos	1822
gid://gitlab/DiffNote/342222536		Fixed.	vect0r	2020-05-14T06:34:53Z		False				-2	tezos/tezos	1822
gid://gitlab/DiffNote/342222537		Fixed.	vect0r	2020-05-14T06:34:53Z		False				-2	tezos/tezos	1822
gid://gitlab/DiffNote/342222538		That's right. Do you think it worth change it for `get_block_per_level` as well?	vect0r	2020-05-14T06:34:53Z		False				-2	tezos/tezos	1822
gid://gitlab/DiffNote/342320109		Yes, I think that would make sense.	arvidnl	2020-05-14T09:05:23Z		False				0	tezos/tezos	1822
gid://gitlab/DiffNote/342356161		Fixed.	vect0r	2020-05-14T09:47:29Z		False				-2	tezos/tezos	1822
gid://gitlab/DiffNote/338090944		"```suggestion:-0+0
unknown, it means you need to upgrade opam (see https://opam.ocaml.org/doc/Install.html).
```"	onurb	2020-05-07T09:10:40Z		False				0	tezos/tezos	1807
gid://gitlab/DiffNote/338105158		Fixed, thanks!	romain.nl	2020-05-07T09:29:10Z		False				-2	tezos/tezos	1807
gid://gitlab/DiffNote/357379607		"```suggestion:-2+1
For the moment these scripts are expected to be run on the ``master``
branch (see :ref:`Build from sources<build_from_sources>`; in
particular, use ``git checkout master`` instead of ``git checkout
mainnet``).
```"	arvidnl	2020-06-08T15:09:37Z		False				0	tezos/tezos	1799
gid://gitlab/DiffNote/357388023		double quotes around `git checkout mainnet`	bidinger	2020-06-08T15:14:19Z		False				0	tezos/tezos	1799
gid://gitlab/DiffNote/357433487		I've updated my suggestion, nice catch!	arvidnl	2020-06-08T16:13:57Z		False				0	tezos/tezos	1799
gid://gitlab/DiffNote/337691549		"to avoid repeating test?
```suggestion:-0+0
  - If possible, add one or several tests that try the features of the MR and add them
```"	onurb	2020-05-06T16:34:57Z		False				0	tezos/tezos	1806
gid://gitlab/DiffNote/337691551		"you can add tests w/o needing to update the CI, right?
```suggestion:-0+0
    to the CI if needed. Make sure the new code is covered by
```"	onurb	2020-05-06T16:34:57Z		False				0	tezos/tezos	1806
gid://gitlab/DiffNote/339302486		I tried to rephrase.	bidinger	2020-05-08T20:29:49Z		False				-2	tezos/tezos	1806
gid://gitlab/DiffNote/339302702		I tried to rephrase.	bidinger	2020-05-08T20:30:25Z		False				-2	tezos/tezos	1806
gid://gitlab/DiffNote/339312934		"Maybe simply: ""As much as possible, provide automatic tests in the CI.""; I think it is pretty obvious that if for some reason an automatic test can be written but not added to the CI then it is better to do so than to not write that automatic test."	rafoo_	2020-05-08T21:02:53Z		False				0	tezos/tezos	1806
gid://gitlab/DiffNote/339314243		I think the usual way to link to another doc page is to add `.. _testing:` at the beginning of `testing.rst` and use ```:ref:`here <testing>` ``` here.	rafoo_	2020-05-08T21:07:21Z		False				0	tezos/tezos	1806
gid://gitlab/DiffNote/339347947		thanks, fixed.	bidinger	2020-05-08T23:47:59Z		False				-2	tezos/tezos	1806
gid://gitlab/DiffNote/339347987		fixed	bidinger	2020-05-08T23:48:16Z		False				-2	tezos/tezos	1806
gid://gitlab/DiffNote/346122119		"To be more consistent with previous one

```suggestion:-0+0
    - dune build @runtest_rejections
```"	mbouaziz	2020-05-20T16:01:19Z		False				0	tezos/tezos	1835
gid://gitlab/DiffNote/346122120		"Shellcheck tells me:
> Don't use variables in the printf format string. Use printf ""..%s.."" ""$foo"".

https://github.com/koalaman/shellcheck/wiki/SC2059

Though it looks ok here.

Also shellcheck would be happier if you added double quotes at some places, I let you find them :stuck_out_tongue_winking_eye:"	mbouaziz	2020-05-20T16:01:19Z		False				0	tezos/tezos	1835
gid://gitlab/DiffNote/346122121		"Shellcheck tells me:
> Argument mixes string and array. Use * or separate argument.

https://github.com/koalaman/shellcheck/wiki/SC2145"	mbouaziz	2020-05-20T16:01:20Z		False				0	tezos/tezos	1835
gid://gitlab/DiffNote/346122123		Don't we need `set -e` for the script to fail if this fails?	mbouaziz	2020-05-20T16:01:20Z		False				-1	tezos/tezos	1835
gid://gitlab/DiffNote/346122127		Why 007?	mbouaziz	2020-05-20T16:01:20Z		False				-1	tezos/tezos	1835
gid://gitlab/DiffNote/346122129		"Do we really need the mli? It should fail without.

If we have an mli, maybe the failure comes from the ml not matching the mli.

Or maybe it doesn't matter here?"	mbouaziz	2020-05-20T16:01:20Z		False				-1	tezos/tezos	1835
gid://gitlab/DiffNote/346122130		"If the value is unused, maybe we're failing because of that.

We should probably match the output of the compiler with some expected error."	mbouaziz	2020-05-20T16:01:20Z		False				-1	tezos/tezos	1835
gid://gitlab/DiffNote/346198949		No real reason other that I wanted them lexicographically ordered for debugging.	smondet	2020-05-20T18:00:01Z		False				-2	tezos/tezos	1835
gid://gitlab/DiffNote/346199963		I think that was to hide the extra API that would prevent the protocol from being injected (something when applying the functor + using Dynlink).	smondet	2020-05-20T18:02:18Z		False				-2	tezos/tezos	1835
gid://gitlab/DiffNote/346200490		the protocol compiler builds a library so it cannot know there whether the value will be in use or not	smondet	2020-05-20T18:03:41Z		False				-2	tezos/tezos	1835
gid://gitlab/DiffNote/346200798		yes getting the output would be better, but it be really worth it?	smondet	2020-05-20T18:04:24Z		False				-2	tezos/tezos	1835
gid://gitlab/DiffNote/361320768		Blank line in the beginning, on purpose?	arvidnl	2020-06-15T14:45:45Z		False				0	tezos/tezos	1835
gid://gitlab/DiffNote/361320769		"```suggestion:-0+0
This test creates erroneous protocols and checks that they are rejected by
```"	arvidnl	2020-06-15T14:45:45Z		False				0	tezos/tezos	1835
gid://gitlab/DiffNote/361320770		"```suggestion:-0+0
    say ""erroneous protocol-compiler, should be an executable""
```"	arvidnl	2020-06-15T14:45:45Z		False				0	tezos/tezos	1835
gid://gitlab/DiffNote/361320775		"```suggestion:-0+0
    say ""erroneous base-protocol""
```

I think erroneous is more correct than wrong here, and below as well. But I have a hard time explaining why erroneous sounds better. Might be a matter of preference."	arvidnl	2020-06-15T14:45:45Z		False				0	tezos/tezos	1835
gid://gitlab/DiffNote/361335908		"With the fixed protocol compiler those are ""dumb"" syntax errors on line 1 by the way."	smondet	2020-06-15T14:58:52Z		False				-2	tezos/tezos	1835
gid://gitlab/DiffNote/355928680		We rarely reinstall opam so breakage in these instructions can take some time before we notice; I think most of this paragraph should be replaced by a link to https://opam.ocaml.org/doc/Install.html	rafoo_	2020-06-05T08:27:26Z		False				0	tezos/tezos	1858
gid://gitlab/DiffNote/355929649		This `TL;DR` is weird now; what is too long?	rafoo_	2020-06-05T08:28:54Z		False				0	tezos/tezos	1858
gid://gitlab/DiffNote/355931423		"""node is to use the""?"	romain.nl	2020-06-05T08:31:42Z		False				0	tezos/tezos	1858
gid://gitlab/DiffNote/355940316		"```suggestion:-0+4
The command ``eval $(opam env)`` sets up required environment variables.
OPAM will suggest to add it in your rc file.
If at any point you get an error like ``tezos-something: command not found``,
run ``eval $(opam env --switch 4.09.1)`` to see if it fixes the problem.
```
I tried to make it a little less informal. Also ""before freaking out or reporting malfunction"" was a bit passive-aggressive."	romain.nl	2020-06-05T08:42:23Z		False				0	tezos/tezos	1858
gid://gitlab/DiffNote/355942176		"```suggestion:-0+0
Identified situations where it will be more tricky are:
```"	romain.nl	2020-06-05T08:44:48Z		False				0	tezos/tezos	1858
gid://gitlab/DiffNote/355942273		"```suggestion:-0+0
* When there are Rust dependencies involved. The way to go is still
```"	romain.nl	2020-06-05T08:44:57Z		False				0	tezos/tezos	1858
gid://gitlab/DiffNote/355972265		"```suggestion:-0+0
complains that ``tezos-something: command not found``, run ``eval $(opam
```"	rafoo_	2020-06-05T09:25:17Z		False				0	tezos/tezos	1858
gid://gitlab/DiffNote/355974698		It is not clear to me which packages to install to have a client or signer with ledger support: only `ledgerwallet-tezos` or is also `tezos-client`/`tezos-signer` needed?	rafoo_	2020-06-05T09:28:52Z		False				0	tezos/tezos	1858
gid://gitlab/DiffNote/355976290		Do we get less depexts if we run `opam depext tezos-...` instead?	rafoo_	2020-06-05T09:31:18Z		False				7	tezos/tezos	1858
gid://gitlab/DiffNote/355978753		"```suggestion:-0+0
Identified situations where it will be more tricky are
```"	rafoo_	2020-06-05T09:34:57Z		False				0	tezos/tezos	1858
gid://gitlab/DiffNote/355986609		Answering my own question, on Debian `libhidapi-dev` and `pkg-config` are added by `ledgerwallet-tezos`.	rafoo_	2020-06-05T09:46:09Z		False				7	tezos/tezos	1858
gid://gitlab/DiffNote/355987841		Apparently, both are needed.	rafoo_	2020-06-05T09:47:53Z		False				0	tezos/tezos	1858
gid://gitlab/DiffNote/357213315		But it is not recommended?	dannywillems	2020-06-08T12:18:28Z		False				0	tezos/tezos	1858
gid://gitlab/DiffNote/357803463		I took @romain.nl's version.	pirbo	2020-06-09T08:25:54Z		False				-2	tezos/tezos	1858
gid://gitlab/DiffNote/357803468		Took @rafoo\_'s one :-)	pirbo	2020-06-09T08:25:55Z		False				-2	tezos/tezos	1858
gid://gitlab/DiffNote/357803473		Yes, it's dangerous. I just copy/pasted this sentence but now that bubblewrap is easier to get, it might be worth removing it indeed.	pirbo	2020-06-09T08:25:55Z		False				-2	tezos/tezos	1858
gid://gitlab/DiffNote/357899773		I tried to clarify	pirbo	2020-06-09T10:20:30Z		False				-2	tezos/tezos	1858
gid://gitlab/DiffNote/357900378		I tried to clarify	pirbo	2020-06-09T10:21:03Z		False				-2	tezos/tezos	1858
gid://gitlab/DiffNote/357904268		"It is true that the section is way shorter now but this is still ""the list of commands you need to run if you don't care about understanding what you're doing"" for which a TL;DR; denomination applies in my opinion ;-)"	pirbo	2020-06-09T10:26:23Z		False				-2	tezos/tezos	1858
gid://gitlab/DiffNote/357973302		"```suggestion:-0+0
<https://hub.docker.com/r/tezos/tezos/>`_. This provides a convenient
```"	romain.nl	2020-06-09T12:01:23Z		False				0	tezos/tezos	1858
gid://gitlab/DiffNote/358132160		Thank you!	rafoo_	2020-06-09T15:05:46Z		False				7	tezos/tezos	1858
gid://gitlab/DiffNote/358141890		OK, this should not block this MR.	rafoo_	2020-06-09T15:17:48Z		False				0	tezos/tezos	1858
gid://gitlab/DiffNote/365424304		"As a general remark, you should not start log messages with capital letter, as mentioned here: https://gitlab.com/nomadic-labs/tezos/-/blob/master/src/lib_event_logging/internal_event.mli#L176

Btw, it seems that it is not unified allover the code base."	vect0r	2020-06-22T08:16:45Z		False				0	tezos/tezos	1898
gid://gitlab/DiffNote/365424308		I think it is not a good practice to use `string` in events. Should we split it in four ? For example: `private_node_new_peers`,`private_node_peers_request`, `private_node_swap_request` and `private_node_swap_ack`	vect0r	2020-06-22T08:16:45Z		False				0	tezos/tezos	1898
gid://gitlab/DiffNote/365537769		Consider moving events to a separate file `p2p_protocol_events.ml`. I'm starting to write up the general conventions for simple events [here](https://gitlab.com/nomadic-labs/tezos/-/issues/163#guidelines-for-writing-simple-events) to help others.	arvidnl	2020-06-22T10:25:56Z		False				0	tezos/tezos	1898
gid://gitlab/DiffNote/365537773		"```suggestion:-0+0
      ~msg:""private peer ({peer}) asked other peer's addresses""
```"	arvidnl	2020-06-22T10:25:56Z		False				0	tezos/tezos	1898
gid://gitlab/DiffNote/365537776		Consider adding `~pp2:pp_print_error_first`, without which the trace will just render as `<list>` (`Jun 22 12:21:50.307 - node.validator.bootstrap_pipeline: Sending advertise to idqRfGME9Bdhde2rksPSz7s6naxMW4 failed: <list>`)	arvidnl	2020-06-22T10:25:57Z		False				0	tezos/tezos	1898
gid://gitlab/DiffNote/365537780		That makes sense to me.	arvidnl	2020-06-22T10:25:57Z		False				0	tezos/tezos	1898
gid://gitlab/DiffNote/365543650		"you mean creating a separate `_event` module for each `p2p_` module ? 

I think it would be better to move all event in one `p2p_events.ml` module instead to avoid multiplicate by 2 the number of files"	abate	2020-06-22T10:34:23Z		False				-2	tezos/tezos	1898
gid://gitlab/DiffNote/365552201		That's the approach that we took in `lib_shell` (one `_event` module per module). But I don't see an issue with putting them all event modules in one file either.	arvidnl	2020-06-22T10:46:37Z		False				0	tezos/tezos	1898
gid://gitlab/DiffNote/365553035		should we do this now, or in a separate MR ?	abate	2020-06-22T10:47:54Z		False				-2	tezos/tezos	1898
gid://gitlab/DiffNote/365553143		done	abate	2020-06-22T10:48:06Z		False				-2	tezos/tezos	1898
gid://gitlab/DiffNote/365553270		done	abate	2020-06-22T10:48:15Z		False				-2	tezos/tezos	1898
gid://gitlab/DiffNote/365553410		done	abate	2020-06-22T10:48:30Z		False				-2	tezos/tezos	1898
gid://gitlab/DiffNote/365677732		I think it better to do it right away.	arvidnl	2020-06-22T13:06:31Z		False				0	tezos/tezos	1898
gid://gitlab/DiffNote/365679410		There are other events with traces in this file, could you fix those as well? :)	arvidnl	2020-06-22T13:08:43Z		False				0	tezos/tezos	1898
gid://gitlab/DiffNote/365708022		Yes I can. I thought you pointed out this one in particular because it was a warning, while maybe it's ok to have the full trace when debugging ...	abate	2020-06-22T13:43:58Z		False				-2	tezos/tezos	1898
gid://gitlab/DiffNote/365719282		done	abate	2020-06-22T13:57:06Z		False				-2	tezos/tezos	1898
gid://gitlab/DiffNote/365719382		done	abate	2020-06-22T13:57:13Z		False				-2	tezos/tezos	1898
gid://gitlab/DiffNote/366160117		Actually, you will have the full trace as a field in the json output either way. The `~ppX` argument only changes how the formatted message looks like. Thanks for changing the others :)	arvidnl	2020-06-23T06:59:35Z		False				0	tezos/tezos	1898
gid://gitlab/DiffNote/366171194		"```suggestion:-0+0
(* Copyright (c) 2020 Nomadic Labs, <contact@nomadic-labs.com>               *)
```
unless this file also contains old code (but I guess not, since it should only contain simple events)."	arvidnl	2020-06-23T07:13:54Z		False				0	tezos/tezos	1898
gid://gitlab/DiffNote/366171196		"```suggestion:-0+0
      ~pp2:P2p_connection.Id.pp
      (""peer"", P2p_peer.Id.encoding)
```
Without which the connection id only renders as `<obj>`, also below if necessary."	arvidnl	2020-06-23T07:13:54Z		False				1	tezos/tezos	1898
gid://gitlab/DiffNote/366171197		"```suggestion:-0+0
      ~pp2:pp_print_error_first
      (""point"", P2p_point.Id.encoding)
```
and below."	arvidnl	2020-06-23T07:13:54Z		False				1	tezos/tezos	1898
gid://gitlab/DiffNote/366171198		are `\027[0m` supposed to be there?	arvidnl	2020-06-23T07:13:55Z		False				0	tezos/tezos	1898
gid://gitlab/DiffNote/366171200		"```suggestion:-0+0
      ~msg:""cnx:{connection_id}:close fd (stats : {nread}/{nwrit})""
```"	arvidnl	2020-06-23T07:13:55Z		False				0	tezos/tezos	1898
gid://gitlab/DiffNote/366171205		I pointed it out on another MR, but I think `nread_expected` is actually `nread_total`. Might as well fix that. (and below for `nwrit`)	arvidnl	2020-06-23T07:13:55Z		False				0	tezos/tezos	1898
gid://gitlab/DiffNote/366171208		capitalization, and below	arvidnl	2020-06-23T07:13:55Z		False				0	tezos/tezos	1898
gid://gitlab/DiffNote/366171212		also, do not end message with period.	arvidnl	2020-06-23T07:13:55Z		False				0	tezos/tezos	1898
gid://gitlab/DiffNote/366247390		nope relic from the past I suppose. I just cut and paste all these events from other files. Fixed	abate	2020-06-23T09:01:43Z		False				-2	tezos/tezos	1898
gid://gitlab/DiffNote/366250607		I've answered to your remark on the other MR ... that I can't find anymore. Not sure about this	abate	2020-06-23T09:05:50Z		False				-2	tezos/tezos	1898
gid://gitlab/DiffNote/366250692		done	abate	2020-06-23T09:05:56Z		False				-2	tezos/tezos	1898
gid://gitlab/DiffNote/366250774		done	abate	2020-06-23T09:06:02Z		False				-2	tezos/tezos	1898
gid://gitlab/DiffNote/366374961		It is [here](https://gitlab.com/tezos/tezos/-/merge_requests/1785#note_366374232), ive added an answer.	arvidnl	2020-06-23T10:36:52Z		False				0	tezos/tezos	1898
gid://gitlab/DiffNote/366377892		There are still some left, e.g. `P2p_connect_handler.connection_error`.	arvidnl	2020-06-23T10:41:40Z		False				1	tezos/tezos	1898
gid://gitlab/DiffNote/367303977		done	abate	2020-06-24T10:38:33Z		False				-2	tezos/tezos	1898
gid://gitlab/DiffNote/367306021		changed this to `nread_total` and `nwrite_total`	abate	2020-06-24T10:41:37Z		False				-2	tezos/tezos	1898
gid://gitlab/DiffNote/359682628		"```suggestion:-0+0
        json_str = '[{""call"":{""destination"":""%s""}}]' % destination
```

and rename `json` to `json_str` a bit below too"	smelc	2020-06-11T15:45:47Z		False				0	tezos/tezos	1849
gid://gitlab/DiffNote/359682629		"```suggestion:-0+0
        json_str = '[{""set_delegate"":{""delegate"":""%s""}}]' % account2
```

and the same as above goes for renaming the `json` variable below"	smelc	2020-06-11T15:45:48Z		False				0	tezos/tezos	1849
gid://gitlab/DiffNote/359682632		"Please prefer using `json.dumps` to create the json from a python dict or else use a multiline format string (`f"""""" {enclosing_python_var}""""""`) to make this initialization easier to read."	smelc	2020-06-11T15:45:48Z		False				0	tezos/tezos	1849
gid://gitlab/DiffNote/359687601		Maybe rename this into `build_transfer_operation` (if that makes sense?) because there is already a `build_transfer_operation` in the scope, which does something completely different if I'm not mistaken.	romain.nl	2020-06-11T15:53:39Z		False				-1	tezos/tezos	1849
gid://gitlab/DiffNote/359689471		"```suggestion:-0+0
(** Builds a transfer operation ready for injection *)
```"	romain.nl	2020-06-11T15:56:22Z		False				0	tezos/tezos	1849
gid://gitlab/DiffNote/359699790		It may be worth it to state that the command-line arguments are applied, unchanged, to each operation (and not divided among them).	romain.nl	2020-06-11T16:09:49Z		False				0	tezos/tezos	1849
gid://gitlab/DiffNote/359702752		"```suggestion:-0+0
              ""Invalid operation file: %a %a""
```
Even if the file contains multiple operations, `operation` here is in adjective position and is invariable. If you fear it is ambiguous you can say something like `invalid batch operation file`."	romain.nl	2020-06-11T16:13:04Z		False				0	tezos/tezos	1849
gid://gitlab/DiffNote/359703327		"```suggestion:-0+0
              failwith ""Empty operation list""
```"	romain.nl	2020-06-11T16:14:08Z		False				0	tezos/tezos	1849
gid://gitlab/DiffNote/359703588		Why not `List.exists`?	romain.nl	2020-06-11T16:14:39Z		False				0	tezos/tezos	1849
gid://gitlab/DiffNote/360173746		I would rather keep this name, since both functions actually have a similar purpose. Instead I removed `Client_proto_context` from the scope of this file, as to remove the ambiguity in this particular instance.	lrand	2020-06-12T11:13:15Z		False				-2	tezos/tezos	1849
gid://gitlab/DiffNote/360175312		Noted, all tests have been modified to implement your suggestions.	lrand	2020-06-12T11:14:31Z		False				-2	tezos/tezos	1849
gid://gitlab/DiffNote/360334407		Sounds like a good solution to me.	romain.nl	2020-06-12T15:10:28Z		False				-1	tezos/tezos	1849
gid://gitlab/DiffNote/361312902		Please add to the docstring some words about atomicity; if one of the operations fails are the other operations executed?	rafoo_	2020-06-15T14:38:10Z		False				-1	tezos/tezos	1849
gid://gitlab/DiffNote/376573410		"Is there a way to remove this branch somehow? It's weird that it was not needed before you made this code into a function, and now you need an `assert false` which looks dangerous. But since it was not needed before, I get the feeling that there should be a way to explain to the type-system that it cannot actually happen? Probably with some well-chosen `(type a)` annotations?

If this is not possible, then maybe we should just revert to avoid the assert false.

If you want to keep the assert false, you can add a comment to explain why it cannot happen."	romain.nl	2020-07-09T13:20:01Z		False				0	tezos/tezos	1849
gid://gitlab/DiffNote/376674007		"I don't believe it is possible to remove this branch, no. Since `op` can have have any `manager kind`, it could also be a list of operations, from this function's scope. It was not needed before because it was inside functions that explicitly made single operation lists, so the type system could infer that `pack_contents_list` could only be `Single_and_result`.

I agree that the assert false should be explained with a comment in the code, but in order to completely remove this assert, I cannot think of a solution other than to revert to the old implementation."	lrand	2020-07-09T15:15:17Z		False				-2	tezos/tezos	1849
gid://gitlab/DiffNote/377147919		"I see: I tried to put an annotation to help the type-checker but we actually use this function with several different types. We can't express the union of those types without also including the cases that cause the need for the `_ ->` branch. To do this we would need to change the `'a Kind.manager` type which is not possible since it is in `lib_protocol`.

Sorry for initially suggesting this change then. I let you decide whether you want to revert it, or just add a comment ;) Since it is client code, I think the risk of an assert failure is not too big a deal (it's not like we are crashing the node)."	romain.nl	2020-07-10T09:22:20Z		False				0	tezos/tezos	1849
gid://gitlab/DiffNote/377154754		No problem, thanks for looking into it.	lrand	2020-07-10T09:30:39Z		False				-2	tezos/tezos	1849
gid://gitlab/DiffNote/389836784		The `gas_limit` and `storage_limit` seems to be misspelled here. The json file declares it as `gas-limit` and `storage-limit`.	vect0r	2020-08-03T13:51:48Z		False				0	tezos/tezos	1849
gid://gitlab/DiffNote/389836791		"I think it could be a good idea to write a test with the optional argument as well. Indeed, ""fee"", ""gas-limit"", ""storage-limit"", ""arg"", and ""entrypoint"" are unused. A simple smart contract call using all those arguments could do the trick.`simple_entrypoints.tz` could be a good candidate, don't you think?"	vect0r	2020-08-03T13:51:48Z		False				0	tezos/tezos	1849
gid://gitlab/DiffNote/389886541		Indeed, it would be a good idea. I will add a test asap	lrand	2020-08-03T15:12:00Z		False				-2	tezos/tezos	1849
gid://gitlab/DiffNote/390436070		I have added a test with `big_map_entrypoints.tz` to be consistent with the other manager tests. Tell me if you have any remarks	lrand	2020-08-04T13:43:26Z		False				-2	tezos/tezos	1849
gid://gitlab/DiffNote/391858418		Looks good. Thanks.	vect0r	2020-08-06T12:44:24Z		False				0	tezos/tezos	1849
gid://gitlab/DiffNote/409270372		"Could we share this function with `gas_limit_arg` instead of copy-pasting it?

Same remark for storage"	mbouaziz	2020-09-08T16:45:03Z		False				0	tezos/tezos	1849
gid://gitlab/DiffNote/409270375		"```suggestion:-1+0
      return ((oph, op, result), contracts) )
```

:warning: has to be applied manually (won't please ocamlformat)"	mbouaziz	2020-09-08T16:45:03Z		False				0	tezos/tezos	1849
gid://gitlab/DiffNote/409270378		When possible, let's try to avoid optional arguments, it's so easy to forget one	mbouaziz	2020-09-08T16:45:04Z		False				-1	tezos/tezos	1849
gid://gitlab/DiffNote/409270380		"```suggestion:-5+0
      failwith ""Invalid \xEA\x9C\xA9 notation at entry %i, field \""%s\"": %s"" index field s
```
?

Similarly at other places"	mbouaziz	2020-09-08T16:45:04Z		False				-1	tezos/tezos	1849
gid://gitlab/DiffNote/409270383		`with` sounds weird to me, I'd use `from` but it's already used for the source contract, maybe `using`?	mbouaziz	2020-09-08T16:45:04Z		False				0	tezos/tezos	1849
gid://gitlab/DiffNote/409270386		"Try to keep the `try` as close as possible to where the exception is thrown. 
If you want to catch the exception thrown by `Data_encoding.Json.destruct`, adds this case to the `match` and remove the `try`
```suggestion:-0+0
          | exception Data_encoding.Json.Cannot_destruct (path, exn2) as exn -> (
```"	mbouaziz	2020-09-08T16:45:04Z		False				0	tezos/tezos	1849
gid://gitlab/DiffNote/409951975		Sure, but I don't think it is a good idea to do that here. `build_transaction_operation` is used either inside of `transfer`, or instead of `transfer`, which also takes these optional arguments. If I were to make them not optional, I would also want to do so for the `transfer` function.	lrand	2020-09-09T15:05:05Z		False				-2	tezos/tezos	1849
gid://gitlab/DiffNote/409977317		Anyhow, it's consistent with the client's current style.	vbotbol	2020-09-09T15:29:37Z		False				-1	tezos/tezos	1849
gid://gitlab/DiffNote/348753799		You don't need to unpack the module a second time here	igarnier	2020-05-26T06:53:34Z		False				0	tezos/tezos	1787
gid://gitlab/DiffNote/348758584		Same here. Maybe there's some opportunity for factorizing some code?	igarnier	2020-05-26T07:02:42Z		False				0	tezos/tezos	1787
gid://gitlab/DiffNote/348789213		`Protocol.Tez_repr.pp` feels cleaner	igarnier	2020-05-26T07:48:30Z		False				0	tezos/tezos	1787
gid://gitlab/DiffNote/348795039		Indeed, I've also shortened the code by inlining a bit.	smelc	2020-05-26T07:51:51Z		False				-2	tezos/tezos	1787
gid://gitlab/DiffNote/348799882		I removed the second unpacking. It's unclear how to factorize though, I could do a loop but it would be tartelette because the first string to write has type `string tzresult Lwt.t` (`Mockup.default_bootstrap_accounts ctxt`) whereas the second one is a raw `string` (`Data_encoding.Json.construct ...`); so unifying both would be cumbersome.	smelc	2020-05-26T07:54:05Z		False				-2	tezos/tezos	1787
gid://gitlab/DiffNote/356957573		Why is there two boolean var and not just one? 	sribar	2020-06-08T06:33:10Z		False				0	tezos/tezos	1787
gid://gitlab/DiffNote/356957574		I think it's missing `-M mockup` in the example `tezos-client --base-dir /some/dir -M mockup create mockup`	sribar	2020-06-08T06:33:10Z		False				0	tezos/tezos	1787
gid://gitlab/DiffNote/357123316		Thanks for your review :pray_tone2: There were two Booleans for no good reason. I've changed that.	smelc	2020-06-08T10:07:02Z		False				-2	tezos/tezos	1787
gid://gitlab/DiffNote/357127703		Maybe the flag was required at `create mockup` in a previous version, but it is not the case anymore; that is why I omitted it here. Does this answer your comment?	smelc	2020-06-08T10:12:54Z		False				-2	tezos/tezos	1787
gid://gitlab/DiffNote/357273412		"mmmh, I see maybe I'm doing something wrong : 

- If i create the mockup with `tezos-client --protocol <protocol_hash> --base-dir /some/dir create mockup` 

    works correctly

- If I try to do `tezos-client --base-dir /some/dir create mockup` 

    fails with `unrecognized option`.

- But if I do `tezos-client -M mockup --base-dir /some/dir create mockup` 

    works correctly"	sribar	2020-06-08T13:31:41Z		False				0	tezos/tezos	1787
gid://gitlab/DiffNote/357283505		The second command should work, this looks like a regression.	igarnier	2020-06-08T13:43:40Z		False				0	tezos/tezos	1787
gid://gitlab/DiffNote/357566981		"Hum :thinking:, isn't that because `create mockup` is a protocol command; so it needs `--protocol`?

The bug wasn't introduced by this MR, as I can reproduce it on its first master ancestor (7cc1bab713ba6b2f202e0581f3817a8edbecad8e at the time I'm writing this).

If we indeed want to fix this, I propose to write a spin-off issue (I have the draft at hand, please confirm @igarnier)."	smelc	2020-06-08T20:50:24Z		False				-2	tezos/tezos	1787
gid://gitlab/DiffNote/357726573		"Ok, 
In that case until this is fix the comment could be `tezos-client --protocol <protocol_hash> --base-dir <some/dir> create mockup` ? Or let it as it is now, as you prefer.

You can resolve that thread"	sribar	2020-06-09T06:28:52Z		False				0	tezos/tezos	1787
gid://gitlab/DiffNote/357755535		We'll do as @smelc suggests and spin another issue. What we do need to fix now is the error message, so that the suggested command works (eg adding `-M mockup`).	igarnier	2020-06-09T07:21:38Z		False				0	tezos/tezos	1787
gid://gitlab/DiffNote/357775408		I've changed the error message, adding `--mode mockup` to it and created the follow up issue here: nomadic-labs/tezos#170. Thanks for the guidance :+1:	smelc	2020-06-09T07:49:47Z		False				-2	tezos/tezos	1787
gid://gitlab/DiffNote/331076437		I think the name `create_error` is misleading here. Maybe something such as `incoming_connection_error` would be better?	Saroupille	2020-04-24T15:38:49Z		False				0	tezos/tezos	1785
gid://gitlab/DiffNote/331092721		yes. indeed. There is also a namespace problem I want to solve. As it is now all events' names must be unique. Instead I'm looking how to use the section as namespace for the events names, so at the module level we don't have to wonder is somebody else in the code declared another `unexpected_error` event.	abate	2020-04-24T16:01:07Z		False				-2	tezos/tezos	1785
gid://gitlab/DiffNote/331348025		missing `name`	raphael-proust	2020-04-25T10:30:45Z		False				0	tezos/tezos	1785
gid://gitlab/DiffNote/331348026		"Sorry to hijack your MR to start a new discussion:

Should we memoize `Data_encoding.option`? (Note, this also applies to other combinators such as `list`, `array`, etc.) Basically, should we make rewrite `option` as

```
let option =
  let store = ref empty in
  fun e ->
    match find_opt e !store with
    | Some e -> e
    | None -> …
```

The encoding `option string` already appears multiple times in the sources.


Alternatively, we could provide `option_string` (and other combinations of simple combinators with simple encodings) and use that directly."	raphael-proust	2020-04-25T10:30:46Z		False				-1	tezos/tezos	1785
gid://gitlab/DiffNote/331348027		There are a lot of `msg` that are just `authenticate: …` and it might make the logs a bit difficult to read. Other `msg` are written as sentences (or at least as header text), starting with a capital letter, generally including punctuation, etc. I think it's good that the message is readable as text.	raphael-proust	2020-04-25T10:30:46Z		False				-1	tezos/tezos	1785
gid://gitlab/DiffNote/331348029		Same comment here as about `authenticate` messages above.	raphael-proust	2020-04-25T10:30:46Z		False				-1	tezos/tezos	1785
gid://gitlab/DiffNote/331348031		"Note that `Lwt.async` is an exception handling mechanism that is tied to an effectful hook mechanism. It is not *just* a way to make Lwt promises into `unit`.

And it should be noted that in Tezos, the hook mechanism will cause the binary to `exit`. As a result: using `async` here will cause any exception that is triggered by the logging mechanism to just crash the binary very violently.

Maybe use `Stdlib.ignore` instead, or maybe hack the `Internal_envent` lib to provide a safe, non-Lwt version."	raphael-proust	2020-04-25T10:30:47Z		False				-1	tezos/tezos	1785
gid://gitlab/DiffNote/331348032		You can use `~pp1:Event.pp_first_error_of_trace` and include `{error}` in the `msg`. See `src/lib_shell/chain_validator_event.ml` for an example.	raphael-proust	2020-04-25T10:30:47Z		False				-1	tezos/tezos	1785
gid://gitlab/DiffNote/332740577		done	abate	2020-04-28T10:17:30Z		False				-2	tezos/tezos	1785
gid://gitlab/DiffNote/332740581		done	abate	2020-04-28T10:17:30Z		False				-2	tezos/tezos	1785
gid://gitlab/DiffNote/332740583		I guess this is tangent to this MR, but something to keep in mind indeed.	abate	2020-04-28T10:17:30Z		False				-2	tezos/tezos	1785
gid://gitlab/DiffNote/332740584		I basically copied all these from what we had before with the legacy logging. If we all agree, I'm up for changing the logging messages, but I didn't want to introduce more changes than necessary to avoid delaying this MR.	abate	2020-04-28T10:17:30Z		False				-2	tezos/tezos	1785
gid://gitlab/DiffNote/332740586		I think we already had this discussion, and it was suggested to add a non lwt version to `Internal_envent`. IIRC, the consensus was to use `Lwt.async` instead, as this is the exception and should not become the norm, even though, there are a lot of exceptions around in the code I think.	abate	2020-04-28T10:17:30Z		False				-2	tezos/tezos	1785
gid://gitlab/DiffNote/332740588		I refrained to do that and I should either have copied the code for this function here. @arvidnl suggested this as well a while ago. I think if we move this function in the `Error_monad` library, then it would make sense to use it here as well.	abate	2020-04-28T10:17:30Z		False				-2	tezos/tezos	1785
gid://gitlab/DiffNote/332740717		some comment as above :)	abate	2020-04-28T10:17:39Z		False				-2	tezos/tezos	1785
gid://gitlab/DiffNote/332778761		Putting that as a new issue so we can modify it later.	raphael-proust	2020-04-28T11:05:17Z		False				-1	tezos/tezos	1785
gid://gitlab/DiffNote/332783477		How about moving the function to `lib_base`? It seems like the right place for code that is at the intersection of the Error monad and the Event logging.	raphael-proust	2020-04-28T11:11:44Z		False				-1	tezos/tezos	1785
gid://gitlab/DiffNote/333065219		"In this case here, does it make sense to make the whole function Lwt? The function use is as follows:

- In `socket` which only has three call-sites (AFAICT) all of which are within Lwt. I think if we change the logging mechanism to use Lwt, we need to change some of the code around logging sites to satisfy the type system and the scheduler.
- In `accept` which is already within Lwt."	raphael-proust	2020-04-28T16:33:47Z		False				-1	tezos/tezos	1785
gid://gitlab/DiffNote/333065220		In this chunk (and several other chunks below) the `Lwt.async` is in the middle of a Lwt-ised function (`Lwt_utils_unix.safe_close` returns `unit Lwt.t`) which makes it unecessary from the type system's PoV. And, I don't know if it's a good idea to use it from a scheduler PoV either.	raphael-proust	2020-04-28T16:33:47Z		False				0	tezos/tezos	1785
gid://gitlab/DiffNote/333078496		this is very much true. And many other async can be removed in this file.	abate	2020-04-28T16:57:35Z		False				-2	tezos/tezos	1785
gid://gitlab/DiffNote/333078499		I made these changes as suggested.	abate	2020-04-28T16:57:35Z		False				-2	tezos/tezos	1785
gid://gitlab/DiffNote/333084032		Looks better now! Thanks for the quick fixes!	raphael-proust	2020-04-28T17:08:21Z		False				-1	tezos/tezos	1785
gid://gitlab/DiffNote/364372973		"Sorry to resuscitate this merged MR. Small question: it seems to me that `nread_expected` is actually the total number of bytes read on this fd, not the expected number of bytes to read. This is how it seems to me in `create`, `read` and `write`. The same applies for `nwrite_expected`. I see then two issues here:

 - the log message is unclear, hard to understand the relationship between the 3 different numbers in the message. I suggest changing it to 
    
        cnx:{connection_id}:read {nread} (total: {nread_total})""

 - commenting the structure `t`, notably the fields `nread` and `nwrit`"	arvidnl	2020-06-19T09:26:59Z		False				-1	tezos/tezos	1785
gid://gitlab/DiffNote/364418521		"when reading / writing from an fd there are the total bytes you want to read, the bytes you read and the bytes you expected at each iteration.

When everything fits in one read/write iteration expected and total are the same. 

But when total is larger then the size of the buffer, then expected is the size of the buffer and total is the ... total size of the stream.

this is why here we use expected instead of total I think. But I agree the message can be better. We should open an issue, or propose another MR I think to fix it."	abate	2020-06-19T10:30:55Z		False				-1	tezos/tezos	1785
gid://gitlab/DiffNote/366374232		"Okay, that makes sense. However, if you look how nread/nwrite are actually used in `p2p_fd.ml` you will notice that:
 
 - they are initialized to 0 in `create`
 - in `read`/`write` they are incremented by the number of bytes actually read.

In other words, these variables represents the total number of bytes read/written to that fd. However, in the events, for instance `read_fd` , due to the name of the parameter (`nread_expected`), you get the impression that the expected number of bytes to be read/written are printed.

```
  let read_fd =
    declare_3
      ~section
      ~name:""read_fd""
      ~msg:""cnx:{connection_id}:read {nread} ({nread_expected})""
      ~level:Debug
      (""connection_id"", Data_encoding.int16)
      (""nread"", Data_encoding.int16)
      (""nread_expected"", Data_encoding.int16)
```

But, when this event is emitted in `read`

```
Events.(emit read_fd) (t.id, nread, t.nread)
```

it is actually the total number of bytes read on that fd that is passed to the parameter `nread_expected`. This is confusing. (1) Either the message should be changed, or (2) the parameter passed to it."	arvidnl	2020-06-23T10:35:45Z		False				-1	tezos/tezos	1785
gid://gitlab/DiffNote/366439139		I see your point now. I'll fix this in the other MR about p2p logs.	abate	2020-06-23T11:58:05Z		False				-1	tezos/tezos	1785
gid://gitlab/DiffNote/335946292		"```suggestion:-0+0
    (* You might be creating a mockup directory here *)
```"	mbouaziz	2020-05-04T13:36:20Z		False				0	tezos/tezos	1760
gid://gitlab/DiffNote/335966662		Indeed	richard.bonichon	2020-05-04T13:58:17Z		False				-2	tezos/tezos	1760
gid://gitlab/DiffNote/327386787		Untyped languages are terrifying	adrianbrink	2020-04-20T14:40:45Z		False				-1	tezos/tezos	1763
gid://gitlab/DiffNote/341829345		Let's merge everything, otherwise we try to find a difference...	mbouaziz	2020-05-13T14:26:07Z		False				0	tezos/tezos	1821
gid://gitlab/DiffNote/341829353		`~dup` isn't documented in `tzString.mli` :(	mbouaziz	2020-05-13T14:26:07Z		False				3	tezos/tezos	1821
gid://gitlab/DiffNote/342010060		No, it is two different tests, even if the content is the same. The semantic is not the same.	dannywillems	2020-05-13T18:43:08Z		False				-2	tezos/tezos	1821
gid://gitlab/DiffNote/342010455		I assume we can infer it from the documentation of the function and the parameter name.	dannywillems	2020-05-13T18:43:59Z		False				-2	tezos/tezos	1821
gid://gitlab/DiffNote/342413073		"If there's a difference between `split` and `split ~dup:true`, then it should be exhibited in tests.
If not, then we can merge the tests, which doesn't prevent us from calling the two forms."	mbouaziz	2020-05-14T10:50:29Z		False				0	tezos/tezos	1821
gid://gitlab/DiffNote/343281210		The first function tests the default behavior of split, the second tests the function with a specific parameter. It is the same behavior for the moment, but it might change in the future.	dannywillems	2020-05-15T12:29:25Z		False				-2	tezos/tezos	1821
gid://gitlab/DiffNote/357307542		How about this compromise: move out the test case (`inputs`) and but leave two separate tests.	arvidnl	2020-06-08T14:12:33Z		False				0	tezos/tezos	1821
gid://gitlab/DiffNote/358917070		"I can't infer it.  
Even if someone can infer the role of `dup`, its default value needs to be documented as well."	raphael-proust	2020-06-10T15:36:52Z		False				3	tezos/tezos	1821
gid://gitlab/DiffNote/358917074		"Considering the implementation is literally `?(dup = true)` there is indeed little point in doubling this test.

Basically, what the doubling would be testing is that it would test the documentation that says `[dups] defaults to [true]`. But the documentation doesn't even mention that.

Recommendation:

- Keep the long test for `~dup:true`.
- Make another long tests for `~dup:false` (to go along the one for `~dup:true`).
- Expands both long tests to check the output when fed: `""""`, `"" ""` (delimiter), `""  ""` (repeated delimiter), `""HelloWorld""` (no delimiter).
- Replace the test without an argument by a short test that shows that `~dup:true` behaves the same as `?dup:None` (for that one, just a single `""a  b""` test case is sufficient, the aim is to prove that the default is `true` not what the behaviour for `true` is, which is cover in the first item in this list)."	raphael-proust	2020-06-10T15:36:53Z		False				0	tezos/tezos	1821
gid://gitlab/DiffNote/361200569		I applied your recommendations @raphael-proust.	dannywillems	2020-06-15T12:51:27Z		False				-2	tezos/tezos	1821
gid://gitlab/DiffNote/361201577		"New doc:
```
(** Splits a string on a delimiter character. If [dup] is set to [true],
    groups multiple delimiters and ignores delimiters at the
    beginning and end of string. If [limit] is passed, stops after [limit]
    split(s). [dups] defaults to [true] and [limit] defaults to [max_int].
 *)
val split : char -> ?dup:bool -> ?limit:int -> string -> string list
```"	dannywillems	2020-06-15T12:52:47Z		False				-2	tezos/tezos	1821
gid://gitlab/DiffNote/361404161		"Ignores in the sense of ""keep"" or ""strip""? Better replace ""ignore"" with either of those words. I think it might even be wise to add a small example to the doc string e.g. `E.g. [split ~dup:true ',' "",hello,,world,""] returns [""hello""; ""world""]`."	arvidnl	2020-06-15T15:55:33Z		False				3	tezos/tezos	1821
gid://gitlab/DiffNote/361467091		Done. I think that's gonna be the most documented function in the tezos codebase.	dannywillems	2020-06-15T17:44:01Z		False				-2	tezos/tezos	1821
gid://gitlab/DiffNote/363589890		"`split ~dup:false ',' "",,hello,world,,""] returns [""""; ""hello""; ""world""; """"]`

But maybe more importantly:

`split ~dup:false ',' "",,hello,,,world,,""] returns [""""; ""hello""; """"; """"; ""world""; """"]`

I pushed a commit which fixes that and also introduces a new test"	raphael-proust	2020-06-18T11:04:35Z		False				0	tezos/tezos	1821
gid://gitlab/DiffNote/359680058		The name of the error `_arg` is not consistent with the names of the errors below.	Saroupille	2020-06-11T15:41:55Z		False				-1	tezos/tezos	1840
gid://gitlab/DiffNote/359682780		From this example, it seems that `--endpoint` is similar to the combo `--port` `--addr` and `tls`. However, it seems that a `Uri` can support more, right? Maybe having an example which supports a more general `Uri` schema would be nice.	Saroupille	2020-06-11T15:46:02Z		False				0	tezos/tezos	1840
gid://gitlab/DiffNote/360250995		There is no default at the level of this definition. `endpoint` is a mandatory field :-)	pirbo	2020-06-12T13:04:18Z		False				-1	tezos/tezos	1840
gid://gitlab/DiffNote/360252880		The goal of this MR is to support more complex Uri but I'm not sure it is to advertise them :-) I think users will recognize with this example that the argument is an Uri and will give more complex one by themselves if they need to...	pirbo	2020-06-12T13:07:09Z		False				0	tezos/tezos	1840
gid://gitlab/DiffNote/360253115		"Variable names that start by an underscore are OK in OCaml. I cannot find the quote, I'm pretty sure I read it somewhere ""referential"" (but it is apparently neither the reference manual nor real world ocaml) that the convention is:
- variable name starting by an underscore is reserved for unused variable that you still need (or want) to define it anyway.
- variable name starting by 2 underscore are reserved for generated code and code generator must name their variable with a schema that minimize the risk of clashes."	pirbo	2020-06-12T13:07:28Z		False				0	tezos/tezos	1840
gid://gitlab/DiffNote/360318216		I thought there was a rule of thumb which was to always under estimate the users ;) .	Saroupille	2020-06-12T14:45:38Z		False				0	tezos/tezos	1840
gid://gitlab/DiffNote/360335355		yes, as @pirbo pointed out, `endpoint` here is not optional. i'll add comments to `client_config.ml`	haochenxie	2020-06-12T15:11:53Z		False				-2	tezos/tezos	1840
gid://gitlab/DiffNote/360339929		I am not sure what you mean. could you please elaborate?	haochenxie	2020-06-12T15:18:13Z		False				-2	tezos/tezos	1840
gid://gitlab/DiffNote/360342636		"good point. do you think changing to ""HTTP/HTTPS endpoint of the node RPC interface ..."" would be enough? or more hints should be added?"	haochenxie	2020-06-12T15:21:56Z		False				-2	tezos/tezos	1840
gid://gitlab/DiffNote/360344778		IMO an explanation on what mighty things a user could do (like, passing a username+password, etc.) would be nice to have in a lengthy document, but here it's sufficient to signify the endpoint being a full URL of the HTTP/HTTPS schema	haochenxie	2020-06-12T15:25:46Z		False				-2	tezos/tezos	1840
gid://gitlab/DiffNote/360347458		"i never came cross the ""rules"". just had noticed that the ocaml compiler won't issue unused variable warnings when a variable name is prefixed with an underscore so it does look to me that it's rather an ""official"" convention and would respect it more in the future"	haochenxie	2020-06-12T15:30:50Z		False				-2	tezos/tezos	1840
gid://gitlab/DiffNote/360366927		good point. i'll try to test my python skill and make the suggested change	haochenxie	2020-06-12T16:08:23Z		False				-2	tezos/tezos	1840
gid://gitlab/DiffNote/360367981		attempted in `3f4d51c09`. i chose to live the `rpc_port` and `use_tls` as optional argument on the Client class constructor since it seems to me that there are a many cases the test code should only care about setting those components than specifying the whole endpoint.	haochenxie	2020-06-12T16:10:33Z		False				-2	tezos/tezos	1840
gid://gitlab/DiffNote/360368062		Python!!!	haochenxie	2020-06-12T16:10:44Z		False				-2	tezos/tezos	1840
gid://gitlab/DiffNote/360368461		nice point. will add them.	haochenxie	2020-06-12T16:11:30Z		False				-2	tezos/tezos	1840
gid://gitlab/DiffNote/360368583		add in `964af52be`	haochenxie	2020-06-12T16:11:44Z		False				-2	tezos/tezos	1840
gid://gitlab/DiffNote/360369534		"changed to ""HTTP(S) endpoint of the node RPC interface; e.g. 'http://localhost:8732'"""	haochenxie	2020-06-12T16:12:57Z		False				-2	tezos/tezos	1840
gid://gitlab/DiffNote/361878123		finally managed to promote the change to `__init__` with the help from @bidinger	haochenxie	2020-06-16T09:53:51Z		False				-2	tezos/tezos	1840
gid://gitlab/DiffNote/367947468		@Saroupille ping	haochenxie	2020-06-25T08:05:46Z		False				-2	tezos/tezos	1840
gid://gitlab/DiffNote/367947563		@Saroupille ping	haochenxie	2020-06-25T08:05:53Z		False				-2	tezos/tezos	1840
gid://gitlab/DiffNote/368309699		"This is incorrect in the case `mode == ""mockup""`. In this case, previously `-addr` and `-port` were NOT added (though I see `-S` was, but it was incorrect). We don't want to pass these options in the mockup mode as it should not make any use of them. Hence please restrict the `client.extend(connectivity_options)` line to the `mode is None or mode ==""client""` case."	smelc	2020-06-25T15:28:40Z		False				0	tezos/tezos	1840
gid://gitlab/DiffNote/368336818		What is the rationale for keeping the old deprecated options? For testing that they are indeed deprecated? I think in sake of maintainability, let's just remove these options from `client.py`. If we end up wanting to test that they are deprecated, we could just avoid using `client.py` altogether. I think it makes sense to keep the invariant that `client.py` only gives an interface to non-deprecated functionalities.	arvidnl	2020-06-25T16:07:20Z		False				-1	tezos/tezos	1840
gid://gitlab/DiffNote/368337348		If finally we decide to keep all options, consider wrapping them up in some structure, so that you do not have to pass around and describe the four options (host, port, tls, endpoint) everywhere).	arvidnl	2020-06-25T16:08:13Z		False				-1	tezos/tezos	1840
gid://gitlab/DiffNote/368337947		I think what @Saroupille means is that the suffix of the errors should either be consistently `_arg` or consistently `_argument`. However, it is not the case with the existing errors so I don't think this is an issue.	arvidnl	2020-06-25T16:09:13Z		False				-1	tezos/tezos	1840
gid://gitlab/DiffNote/368337952		"```suggestion:-0+0
      ""HTTP(S) endpoint of the node's RPC interface; e.g. 'http://localhost:8732'""
```"	arvidnl	2020-06-25T16:09:13Z		False				0	tezos/tezos	1840
gid://gitlab/DiffNote/368337963		Perhaps @Saroupille also means to add a path to the end of the URI, however, at that start it becoming overly convoluted to the point that the user might be more confused. So I think this is fine.	arvidnl	2020-06-25T16:09:14Z		False				0	tezos/tezos	1840
gid://gitlab/DiffNote/368559521		Ah I see. Maybe it's worthy to have its own MR to fix the existing inconsistency.	haochenxie	2020-06-26T01:25:39Z		False				-2	tezos/tezos	1840
gid://gitlab/DiffNote/368561004		"addressing this in
```
[hx-client-endpoint-arg 763eb285e] Tests/Python: do not pass connectivity options when client mode being 'mockup'
```"	haochenxie	2020-06-26T01:34:49Z		False				-2	tezos/tezos	1840
gid://gitlab/DiffNote/368567367		"Well initially I was to remove those parameters but in discussion with @bidinger, I was told that the class `Client` is supposed to be a faithful abstraction over the actual client binary and should have those options leaved out. The actual test suites will use `Sandbox` and that is modified to only use the `endpoint` option.

So right now no one would initiate `Client` with the deprecated options but they are still available to tests that want to pass then to the binary specifically (i.e. to test the deprecation)"	haochenxie	2020-06-26T02:09:16Z		False				-2	tezos/tezos	1840
gid://gitlab/DiffNote/368568168		">If finally we decide to keep all options, consider wrapping them up in some structure, so that you do not have to pass around and describe the four options (host, port, tls, endpoint) everywhere).

I rather think it is fine since
1. in Python, we have keyword arguments
2. it should be very rare that anything than `endpoint` will be used"	haochenxie	2020-06-26T02:13:34Z		False				-2	tezos/tezos	1840
gid://gitlab/DiffNote/368633299		Inconsistency is indeed already there	pirbo	2020-06-26T06:27:23Z		False				-1	tezos/tezos	1840
gid://gitlab/DiffNote/368732436		Okay, that works for me!	arvidnl	2020-06-26T09:07:13Z		False				-1	tezos/tezos	1840
gid://gitlab/DiffNote/330248902		2cents: missing spaces around `+`	dannywillems	2020-04-23T16:22:42Z		False				0	tezos/tezos	1759
gid://gitlab/DiffNote/330249305		Autoformatter needed :)	mbouaziz	2020-04-23T16:23:21Z		False				0	tezos/tezos	1759
gid://gitlab/DiffNote/330529505		Fix in 26d41571	Saroupille	2020-04-23T23:25:17Z		False				-2	tezos/tezos	1759
gid://gitlab/DiffNote/327176103		"The `ref false` must be the same as the one created in `pp_log_short_message`, otherwise `!used` will always be `false`.

I think instead of splitting the function in two, I would juste write a big `if not short then` around the part which prints the parameters in parentheses."	romain.nl	2020-04-20T09:57:51Z		False				0	tezos/tezos	1761
gid://gitlab/DiffNote/327233760		nice catch ! I've done it maybe in a rush on Friday. I took a moment more to refactor a bit more these two functions, transform them in the pretty printers and collect the result at the end. I've diff the printout from this branch and master and the log is the same. This MR does not change anything. It only adds a small functionality now.	abate	2020-04-20T11:19:06Z		False				-2	tezos/tezos	1761
gid://gitlab/DiffNote/327373706		"To be honest I don't understand the need for this refactoring. This commit can simply be implemented just by modifying exactly one line:
```
List.iter print_field fields ;
```
into:
```
if not short then List.iter print_field fields ;
```

If you think the refactoring is beneficial I suggest:
- that you put it in its own commit instead of merging it with the addition of `?short` (in fact I think the refactoring itself could be split into several commits, if only for the review, as there are several independent changes);
- and that you motivate it on its own.

As the original writer of the code I am very biased though ;)"	romain.nl	2020-04-20T14:24:37Z		False				0	tezos/tezos	1761
gid://gitlab/DiffNote/327374379		Why are you changing the value of `never_empty` here? This will change the semantics.	romain.nl	2020-04-20T14:25:30Z		False				0	tezos/tezos	1761
gid://gitlab/DiffNote/327375162		You removed the feature that empty values were not written. In fact, now they will be written as e.g. `(x = , y = , z = )`. Is that what you want?	romain.nl	2020-04-20T14:26:32Z		False				0	tezos/tezos	1761
gid://gitlab/DiffNote/330183630		If I implement a new `pp` function. How should I decide what I print when `~short` is `true`? Maybe having a comment which indicates its specification would be nice.	Saroupille	2020-04-23T15:24:48Z		False				-1	tezos/tezos	1761
gid://gitlab/DiffNote/330193870		It could be nice to also add, to the documentation of the `Simple` module, a sentence like `When pretty-printed with [~short: true], simple events omit the parameters which are normally written in parentheses at the end of the message, i.e. parameters which are not inlined.`	romain.nl	2020-04-23T15:34:21Z		False				-1	tezos/tezos	1761
gid://gitlab/DiffNote/330844866		done	abate	2020-04-24T10:42:18Z		False				-2	tezos/tezos	1761
gid://gitlab/DiffNote/330918541		I think the second sentence not make sense here, it should be in the documentation of `Simple`, as it is only relevant for simple events.	romain.nl	2020-04-24T12:26:12Z		False				0	tezos/tezos	1761
gid://gitlab/DiffNote/330921660		So I would move this sentence, and replace it here with something like: `Some sinks output a short message; some output a more detailed message; and some may output both. This function is called with [~short: true] when they want short messages, and [~short: false] when they want detailed ones. Short messages should contain information which is not available in the event encoding, or that looks nice when inlined in the message.`	romain.nl	2020-04-24T12:31:10Z		False				0	tezos/tezos	1761
gid://gitlab/DiffNote/334317833		@Saroupille @romain.nl are you satisfied with the changes? If so please resolve the thread.	raphael-proust	2020-04-30T10:00:35Z		False				-1	tezos/tezos	1761
gid://gitlab/DiffNote/334317841		@abate Can you address this?	raphael-proust	2020-04-30T10:00:36Z		False				0	tezos/tezos	1761
gid://gitlab/DiffNote/334323385		Not yet, see my other comment below. But you can consider this thread to be resolved for me if my other comment is addressed.	romain.nl	2020-04-30T10:08:11Z		False				-1	tezos/tezos	1761
gid://gitlab/DiffNote/334324707		done	abate	2020-04-30T10:09:30Z		False				-2	tezos/tezos	1761
gid://gitlab/DiffNote/334395658		Ok you fixed the doc of `pp` but you did not move the original sentence to the documentation of `Simple`. I think it's ok though to merge as is.	romain.nl	2020-04-30T11:37:13Z		False				0	tezos/tezos	1761
gid://gitlab/DiffNote/336011264		"```suggestion:-0+0
  val pp : short:bool -> Format.formatter -> t -> unit
```
This parameter doesn't need to be optional"	mbouaziz	2020-05-04T14:37:26Z		False				0	tezos/tezos	1761
gid://gitlab/DiffNote/336025652		"Bool parameters often mean ""2 functions"":
- ⇒ `pp` and `pp_short`?"	smondet	2020-05-04T14:54:52Z		False				0	tezos/tezos	1761
gid://gitlab/DiffNote/336028950		Both suggestions are fine for me.	romain.nl	2020-05-04T14:58:56Z		False				0	tezos/tezos	1761
gid://gitlab/DiffNote/336071404		Optional parameter and keeping one function were both choices to avoid changing the interface too much. @romain.nl , are you ok for refactoring the code and changing the interface to split this into functions ?	abate	2020-05-04T15:58:23Z		False				-2	tezos/tezos	1761
gid://gitlab/DiffNote/336451391		Yes. I personally prefer the labeled argument (which does not need to be optional, as noted, although it helps with the refactoring), but some noted that it could make it harder to use `pp` in `%a` formats. I don't think we'll actually use those `pp` functions in `%a` formats but who knows.	romain.nl	2020-05-05T08:15:34Z		False				0	tezos/tezos	1761
gid://gitlab/DiffNote/336476931		"I think the issue with optional parameters is that in a lot of cases they end up being de-facto non optional. Typically when partially applying or when using the function as an argument. For `pp` that's a problem when using `%a`:

```
# let pp ?f fmt x = () ;;
val pp : ?f:'a -> 'b -> 'c -> unit = <fun>
# Format.printf ""%a"" pp () ;;
Error: This expression has type ?f:'a -> 'b -> 'c -> unit
       but an expression was expected of type Format.formatter -> 'd -> unit
```

The workaround has much boilerplate

```
# Format.printf ""%a"" (fun fmt () -> pp fmt ()) () ;;
- : unit = ()
```

Or the boilerplate uses a weird `None` value which only experienced programmers who are familiar enough with the code to know that the argument is optional will know is the same as omitting the argument.

```
# Format.printf ""%a"" (pp ~f:None) () ;;
- : unit = ()
```

By comparison, the non-optional argument version has less boilerplate

```
# let pp ~f fmt x = () ;;
val pp : f:'a -> 'b -> 'c -> unit = <fun>
# Format.printf ""%a"" (pp ~f:true) () ;;
- : unit = ()
```

Whether it's an actual problem here is not clear because it might never be used in a `%a`. But unless there's an argument to be made about keeping the parameter optional, the considerations above should be taken into account."	raphael-proust	2020-05-05T08:51:45Z		False				0	tezos/tezos	1761
gid://gitlab/DiffNote/336595084		I made the short argument non optional as suggested and added context in the description .	abate	2020-05-05T11:37:38Z		False				-2	tezos/tezos	1761
gid://gitlab/DiffNote/325062265		I think this problem has been solved for newer protocols by prefixing the encoding name with the protocol name. I think you can remove these lines completely...	abate	2020-04-16T08:51:40Z		False				0	tezos/tezos	1756
gid://gitlab/DiffNote/325089195		Fix `d437fb127`.	Saroupille	2020-04-16T09:28:26Z		False				-2	tezos/tezos	1756
gid://gitlab/DiffNote/331249352		`[:B58.checksum_len]`	bidinger	2020-04-24T21:32:45Z		False				0	tezos/tezos	1783
gid://gitlab/DiffNote/331249864		Is this `else` needed?	bidinger	2020-04-24T21:34:43Z		False				0	tezos/tezos	1783
gid://gitlab/DiffNote/331253017		"You should update the doc which describes the layered architecture of this framework in `python_testing_framework.rst`. This new `crypto` package becomes the new lower layer (which is not apparent just by glimpsing at the code).

The architecture is now

1. `crypto`
1. `daemons` and `client`,
2. `launchers`,
3. `tests`, `examples`, `tools`.

FYI I think all this crypto stuff is implemented by [pytezos](https://github.com/baking-bad/pytezos)."	bidinger	2020-04-24T21:44:12Z		False				-1	tezos/tezos	1783
gid://gitlab/DiffNote/331254052		finds	bidinger	2020-04-24T21:48:20Z		False				0	tezos/tezos	1783
gid://gitlab/DiffNote/331821308		I have just checked. and `pytezos` seems to implement only the encoding part.	Saroupille	2020-04-27T08:36:19Z		False				-2	tezos/tezos	1783
gid://gitlab/DiffNote/331827042		It is just to have a wrapper around an error that would be raised by `python` saying that `None` object are not callable.	Saroupille	2020-04-27T08:39:24Z		False				-2	tezos/tezos	1783
gid://gitlab/DiffNote/331837345		Fix in 140005083	Saroupille	2020-04-27T08:53:32Z		False				-2	tezos/tezos	1783
gid://gitlab/DiffNote/331837506		Fix in 140005083	Saroupille	2020-04-27T08:53:46Z		False				-2	tezos/tezos	1783
gid://gitlab/DiffNote/331837888		Fix in 140005083	Saroupille	2020-04-27T08:54:20Z		False				-2	tezos/tezos	1783
gid://gitlab/DiffNote/334420455		Fixed in  70a3db9b	Saroupille	2020-04-30T12:04:26Z		False				-2	tezos/tezos	1783
gid://gitlab/DiffNote/355456639		I would say a « base58-encoded string » everywhere.	dannywillems	2020-06-04T15:18:49Z		False				-1	tezos/tezos	1783
gid://gitlab/DiffNote/355457712		typo in variable name.	dannywillems	2020-06-04T15:20:17Z		False				-1	tezos/tezos	1783
gid://gitlab/DiffNote/355458482		Encode in base58 maybe?	dannywillems	2020-06-04T15:21:17Z		False				-1	tezos/tezos	1783
gid://gitlab/DiffNote/355459201		Why don't you use base58 instead of base58check?	dannywillems	2020-06-04T15:22:10Z		False				-1	tezos/tezos	1783
gid://gitlab/DiffNote/355475887		This constant is used only in this file. Prefix it with `_`?	smelc	2020-06-04T15:44:55Z		False				-1	tezos/tezos	1783
gid://gitlab/DiffNote/355475893		This constant is used only in this file. Prefix it with `_`?	smelc	2020-06-04T15:44:55Z		False				-1	tezos/tezos	1783
gid://gitlab/DiffNote/355475897		This constant is used only in this file. Prefix it with `_`?	smelc	2020-06-04T15:44:55Z		False				-1	tezos/tezos	1783
gid://gitlab/DiffNote/355477456		Please do not shadow the `sign` method with a local variable. It would yield misleading error messages if you try calling the method after having defined the variable.	smelc	2020-06-04T15:47:10Z		False				-1	tezos/tezos	1783
gid://gitlab/DiffNote/355477460		The same shadowing of `sign` happens here.	smelc	2020-06-04T15:47:10Z		False				-1	tezos/tezos	1783
gid://gitlab/DiffNote/355483750		"```suggestion:-0+0
    """""" Generic class to handle keys """"""
```"	arvidnl	2020-06-04T15:56:00Z		False				-1	tezos/tezos	1783
gid://gitlab/DiffNote/355483768		Maybe add a type annotation, as you do so elsewhere.	arvidnl	2020-06-04T15:56:01Z		False				-1	tezos/tezos	1783
gid://gitlab/DiffNote/355483773		If it's not important to return the last of the matching cryptofunctions, then maybe you can just return here.	arvidnl	2020-06-04T15:56:02Z		False				-1	tezos/tezos	1783
gid://gitlab/DiffNote/355483775		Maybe comment self.config and self.b58codec so that new Key classes can be added by other users. It is quite unclear for instance, what config should contain.	arvidnl	2020-06-04T15:56:02Z		False				-1	tezos/tezos	1783
gid://gitlab/DiffNote/355483779		There is a lot of duplication in `sign` and `sign_bytes`. I think the body of `sign` could be replaced by something like `return sign_bytes(signature.decode(msg), secret_key)`.	arvidnl	2020-06-04T15:56:02Z		False				-1	tezos/tezos	1783
gid://gitlab/DiffNote/355483782		Same comment as above, prefer an early return.	arvidnl	2020-06-04T15:56:02Z		False				-1	tezos/tezos	1783
gid://gitlab/DiffNote/355483786		These nice doc strings are lost, maybe they can be adapted and put in `crypto.py`?	arvidnl	2020-06-04T15:56:02Z		False				-1	tezos/tezos	1783
gid://gitlab/DiffNote/355483795		"```suggestion:-0+0
    """""" Append a signature to an operation. Returns the result as a
        hexadecimal string """"""
```"	arvidnl	2020-06-04T15:56:03Z		False				-1	tezos/tezos	1783
gid://gitlab/DiffNote/327083543		"I'm not sure adding this dependency is expected. @pirbo?

Can't the extra defined values be defined in the tests themselves?"	mbouaziz	2020-04-20T07:54:13Z		False				0	tezos/tezos	1758
gid://gitlab/DiffNote/327083558		"```suggestion:-0+0
(** Test the encoding/decoding of script_interpreter.ml specific errors *)
```"	mbouaziz	2020-04-20T07:54:13Z		False				0	tezos/tezos	1758
gid://gitlab/DiffNote/327088544		I guess the main reason to depend on the client is to get access to the `Michelson_v1_parser` module. It's a 100-line wrapper around code already accessible here I guess (the Micheline parser and the Michelson primitives) but also depends on `Michelson_v1_macros` in the client (which is already alcotested in `lib_client`.	rafoo_	2020-04-20T08:02:13Z		False				0	tezos/tezos	1758
gid://gitlab/DiffNote/327287901		Oh sorry, I thought you were commenting on `src/proto_alpha/lib_protocol/test/dune`. I agree that depending on protocol-specific code seems unwanted here.	rafoo_	2020-04-20T12:35:42Z		False				0	tezos/tezos	1758
gid://gitlab/DiffNote/327444506		Is it OK if I move the same code (and dependencies) into `src/proto_alpha/lib_protocol/test/helpers`?	arvidnl	2020-04-20T15:49:10Z		False				-2	tezos/tezos	1758
gid://gitlab/DiffNote/330024406		I've done so in the latest revision.	arvidnl	2020-04-23T12:52:14Z		False				-2	tezos/tezos	1758
gid://gitlab/DiffNote/330061371		It looks much better to me now dependency-wise	mbouaziz	2020-04-23T13:31:29Z		False				0	tezos/tezos	1758
gid://gitlab/DiffNote/327087978		Remove this line?	mbouaziz	2020-04-20T08:01:12Z		False				0	tezos/tezos	1753
gid://gitlab/DiffNote/327092024		"It is consistent with `test_contract_opcodes.py`. I suggest to replace by an `assert` in both files; 
when I write a new test, I sometimes forget to add the extension and believe the new test passes when in fact it is silently skipped."	rafoo_	2020-04-20T08:07:56Z		False				0	tezos/tezos	1753
gid://gitlab/DiffNote/327208534		If the filename is wrong, something will fail later anyway	mbouaziz	2020-04-20T10:46:24Z		False				0	tezos/tezos	1753
gid://gitlab/DiffNote/327307790		Yes but I think it is easier to debug with an assert.	rafoo_	2020-04-20T13:03:31Z		False				0	tezos/tezos	1753
gid://gitlab/DiffNote/327309030		Why is it slow?	rafoo_	2020-04-20T13:05:17Z		False				0	tezos/tezos	1753
gid://gitlab/DiffNote/327390070		Replaced with assertions throughout. This allowed me to find a test that in test_contracts.py that was redundant (with a test in test_contracts_opcodes.py) and also dead, that I removed in the first commit.	arvidnl	2020-04-20T14:44:34Z		False				-2	tezos/tezos	1753
gid://gitlab/DiffNote/327390181		It's not, removed.	arvidnl	2020-04-20T14:44:41Z		False				-2	tezos/tezos	1753
gid://gitlab/DiffNote/325079483		Can you explain this please?	mbouaziz	2020-04-16T09:14:44Z		False				0	tezos/tezos	1755
gid://gitlab/DiffNote/325112181		Thi is a the tag for a new runner we just installed to speedup a bit the build	abate	2020-04-16T09:58:20Z		False				-2	tezos/tezos	1755
gid://gitlab/DiffNote/327152083		"```suggestion:-0+0
    This patch adds four new URIs.
```"	rafoo_	2020-04-20T09:24:34Z		False				0	tezos/tezos	1762
gid://gitlab/DiffNote/327153003		I am not sure what to do about typos in commit messages in the git history.	rafoo_	2020-04-20T09:25:52Z		False				-1	tezos/tezos	1762
gid://gitlab/DiffNote/327181768		Me neither	mbouaziz	2020-04-20T10:06:32Z		False				-2	tezos/tezos	1762
gid://gitlab/DiffNote/327390494		I think it's ok, people are more likely to see the doc than the git history.	paracetamolo	2020-04-20T14:45:03Z		False				-1	tezos/tezos	1762
gid://gitlab/DiffNote/342424848		"Because `find_last` isn't breaking, it is more efficiently written using `fold`.

Since it is trivial, I have doubts it is useful to have it."	mbouaziz	2020-05-14T11:07:29Z		False				0	tezos/tezos	1804
gid://gitlab/DiffNote/342425605		"Using `>|?` causes `ocamlformat` to produce the following atrocity `filter_e f seq >|? fun seq () -> Cons (item, seq)` which is technically correct but obscure.

I went for `ok` and `Monad.return`."	raphael-proust	2020-05-14T11:08:36Z		False				-2	tezos/tezos	1804
gid://gitlab/DiffNote/342568944		I have removed it from `seq` (which I guess is also good because it removes one of the non-lazy part, leaving only `fold` as a non-lazy primitive) and expanded the implementation in `map` and `set` instead.	raphael-proust	2020-05-14T13:34:06Z		False				-2	tezos/tezos	1804
gid://gitlab/DiffNote/342568949		"Added this information.

I also added `map_e`, `map_s`, `filter_map_e`, and `filter_map_s` because it felt like `map` and `filter_map` being available in `Stdlib`'s `Seq` warrants them here."	raphael-proust	2020-05-14T13:34:06Z		False				-2	tezos/tezos	1804
gid://gitlab/DiffNote/342568950		Done	raphael-proust	2020-05-14T13:34:07Z		False				-2	tezos/tezos	1804
gid://gitlab/DiffNote/351221802		why not use `ok_some` here?	Saroupille	2020-05-28T15:46:06Z		False				-1	tezos/tezos	1804
gid://gitlab/DiffNote/351248253		The copyright line could be changed here.	Saroupille	2020-05-28T16:28:46Z		False				0	tezos/tezos	1804
gid://gitlab/DiffNote/351275102		Note that `find_last` and `find_first` are `O(log n)` as they assume that their argument is monotonic. But `find_{first,last}_{e,s,es}` are `O(n)` as you fold over (potentially) the whole map. This should be reflected in the documentation of the module. In fact, one could even argue that it is maybe not a good idea to have those functions at all because they are so different from their non-monadic counterpart.	romain.nl	2020-05-28T16:55:00Z		False				0	tezos/tezos	1804
gid://gitlab/DiffNote/351279955		"Note that `{map,filter}_{e,s,es,p,ep}` are basically equivalent to using the corresponding functions of lists, preceded by `Seq.to_list` and followed by `Seq.of_list`, except more efficient because there is no need to allocate / deconstruct a list. Maybe that's another way to explain it in the doc; it is another way to make it clear that this is not lazy.

To be honest I wonder if the efficiency improvement of not going through lists is worth the readability / maintenance cost. I guess it depends a lot on what `f` does though!"	romain.nl	2020-05-28T17:04:45Z		False				0	tezos/tezos	1804
gid://gitlab/DiffNote/351638300		"In this case, using `ok_some` doesn't provide any advantage.

The function `ok_some` is provided for two reasons:

- for completeness' sake: if we provide `ok_none`, then the interface looks cleaner if we mirror that with an `ok_some`
- to allow users to avoid anonynous lambdas: basically so we can write `… >>? ok_some` instead of `… >>? fun x -> (Ok (Some x))`


I can switch to `ok_some` and hope the compiler would inline it. Or I could switch to `Lwt.return_ok (Some x)` and hope the same. Let me know if you think this is important."	raphael-proust	2020-05-29T09:09:14Z		False				-2	tezos/tezos	1804
gid://gitlab/DiffNote/351638305		"> Maybe that's another way to explain it in the doc; it is another way to make it clear that this is not lazy.

The “lazy”/“not lazy” terminology is chosen to mirror the OCaml's `Stdlib.Seq` documentation. Here's an extract:

```
val flat_map : ('a -> 'b t) -> 'a t -> 'b t
(** Map each element to a subsequence, then return each element of this
    sub-sequence in turn.
    This transformation is lazy, it only applies when the result is
    traversed. *)

val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b t -> 'a
(** Traverse the sequence from left to right, combining each element with the
    accumulator using the given function.
    The traversal happens immediately and will not terminate on infinite
    sequences.

    Also see {!List.fold_left} *)
```

The driving idea is that OCaml programmers may already be aware of or even familiar with the Stdlib's module. I'm piggy backing on the reader's familiarity with existing material to get the same point across.

---------------------------------------------

> Note that {map,filter}_{e,s,es,p,ep} are basically equivalent to using the corresponding functions of lists, preceded by Seq.to_list and followed by Seq.of_list, except more efficient because there is no need to allocate / deconstruct a list.

They are not equivalent. I might actually need to improve the documentation to be clearer on that.

Consider an infinite sequence. The one below is trivial, but we could be reading gossip messages on the network or whatever:

```
let rec seq = fun () -> Cons (0, seq) in
```

Converting to/from lists causes the program to not terminate (I'm guessing we get an OOM, but maybe a stack-overflow, I'm not sure):

```
seq |> to_list |> Error_monad.iter_s (fun _ -> fail …)
```

Whereas the error-aware direct iter interrupts on the first error.

```
seq |> iter_es (fun _ -> fail …)
```

-------------------------------------------

Note that this `Seq` module is mostly introduced as a useful intermediate module for `Map` and `Set`. But that I'm also considering providing a more lwt-error-aware version later. Something along the lines of:

```
type 'a t = unit -> 'a node tzresult Lwt.t
and +'a node =
  | Nil
  | Cons of 'a * 'a t
```

and this would allow actual lazy use of all map/iter/etc.

This is still in early stage of thought. In particular, there are a few open questions:

- Do we need it?
- How different is it from `Lwt_stream`?
- Can we use `Lwt_stream` instead?"	raphael-proust	2020-05-29T09:09:14Z		False				-2	tezos/tezos	1804
gid://gitlab/DiffNote/351638308		I agree with that last part. It's not a good idea to have them. I'll remove them now.	raphael-proust	2020-05-29T09:09:14Z		False				-2	tezos/tezos	1804
gid://gitlab/DiffNote/351775782		"Thanks for your detailed and complete answer.

You are completely right, your implementation is not equivalent to using `List.to_seq` because of error handling; you can disregard my comment. If you want to make the doc clearer, maybe it's enough to copy what you wrote for iter: `The iteration is interrupted when one of the step returns an [Error _].` (btw it should be `steps`, not `step`).

Regarding the lwt-error-aware version with a new definition of `Seq.t` to allow laziness, it's an interesting exercise. I suggest to keep it for another MR though, as this one is rather large already. It would be good to have a use case for it first, but of course we may not find a use case for it if we don't know about it… Personally, I never used `Seq` ever :p"	romain.nl	2020-05-29T12:16:21Z		False				0	tezos/tezos	1804
gid://gitlab/DiffNote/351847240		"One thing I'm considering adding is support for “best-effort”/“fail-early” version of concurrent traversals – `iter_ep` in particular, but even the `*_s`, `_*es`, and the `map_*`. The idea being that in the best-effort concurrent iteration the function attempts to carry as many of the promises to completion as possible even if one of them fails. Conversely in the fail-early concurrent iteration the function cancels all pending promises as soon as one is rejected/errors.

```
type completion_policy = Best_effort | Fail_early
val iter_ep : ?policy:completion_policy -> ('a -> unit tzresult Lwt.t) -> 'a list -> unit tzresult Lwt.t
```

or, alternatively

```
(** [iter_ep f l] is …

    [iter_ep ~fail_early:() f l] is similar to [iter_ep f l] except in the case where
    one of the promises is rejected or resolves to [Error _]. In this case, all the
    promises that are still pending are canceled.
*)
val iter_ep : ?fail_early:unit -> …
```

Comments? Ideas?"	raphael-proust	2020-05-29T13:45:47Z		False				-2	tezos/tezos	1804
gid://gitlab/DiffNote/352746334		I updated this one and fixed a few other occurrences	raphael-proust	2020-06-01T09:21:33Z		False				-2	tezos/tezos	1804
gid://gitlab/DiffNote/352746335		I removed them. I actually introduced a new library `src/lib_errlib/`. I find it cleaner than to prefix all the files with `error_stdlib_` inside the `lib_error_monad/` directory.	raphael-proust	2020-06-01T09:21:34Z		False				-2	tezos/tezos	1804
gid://gitlab/DiffNote/352751957		No I am fine, I was wondering it was related to an optimization or not.	Saroupille	2020-06-01T09:27:51Z		False				-1	tezos/tezos	1804
gid://gitlab/DiffNote/352775456		"I resolved my comment since you removed the `find` variants, thanks!

Regarding `lib_errlib`:
- I guess there should be a `.opam` as well;
- I'm not sure we need a `functors` subdirectory if it is the only subdirectory;
- it would be nice to explain, somewhere, its relationship with `tezos-stdlib` and `tezos-error-monad` in particular (it seems to be the glue between those two?)."	romain.nl	2020-06-01T09:52:21Z		False				0	tezos/tezos	1804
gid://gitlab/DiffNote/352781293		"I think the variants you propose make sense. In particular, I don't see a good argument to make one of the policy the default, so I guess it means that it depends on your use case and both are potentially useful.

The danger is if we add too many functions and only actually use a fraction of them. A rule of thumb is to only factor code if you have 3 example use cases, so as not to generalize prematurely. On the other hand, it's good to at least think about it so that the existing interface would be compatible with possible future improvements such as this idea. And if you do this design work, I guess you're not far from an actual implementation :)

A question I have is: should the ""fail-early"" policy result in at most one error, versus the ""best-effort"" policy which would result in possibly several errors? In which case it could be reflected in the type (and I guess we would need two functions, unless you want to make `completion_policy` into a GADT). Or can the ""fail-early"" policy still result in several errors?

Also, does the ""fail-early"" policy mean that it cancels other promises as soon as one error happens?"	romain.nl	2020-06-01T10:03:05Z		False				0	tezos/tezos	1804
gid://gitlab/DiffNote/352827018		"> I guess there should be a .opam as well;

I see `src/lib_errlib/tezos-errlib.opam` so I'm not sure what you mean

> I'm not sure we need a functors subdirectory if it is the only subdirectory;

There's `sigs` to collect all the signatures, `functors` to collect all the instantiation functors (remember that the error monad is different in the shell and the protocols so if we want to be able to use those in env-v1 we need to be able to instantiate them) and `lib` which contains all the instantiations against the “default” error monad. Each of those subdirectories provide their own dune name.

I tried to have a flatter structure whilst still providing the functors separately (so it can be instantiated in the protocol if we want to). But because functors depends on sigs and lib depends on functors and libs, I had to make some changes. I ended up with this desing, but I'm not too attached to it. Do you have more specific recommendations for a layout?

> it would be nice to explain, somewhere, its relationship with tezos-stdlib and tezos-error-monad in particular (it seems to be the glue between those two?).

I'll add some note somewhere. I guess the explanation also involves `base`."	raphael-proust	2020-06-01T11:21:23Z		False				-2	tezos/tezos	1804
gid://gitlab/DiffNote/352827019		"Adding things we don't need is definitely a danger. However, that's more of a consideration for internal, private libraries. For published, public libraries it is more important to have a consistent coverage of useful cases (rather than used cases). This library (1) will potentially be released because it sits well under the shell and (2) could be included in protocol-env-v1 which makes it a published library (or equivalently: a library that we cannot just update easily without going through a complicated process of ~release~ updating the environment, and for which there might be unforeseen uses).

I think that's a complicated way to say that I agree with “the existing interface would be compatible with possible future improvements”

----------------------------------------

Regarding the fail-early questions:

- I guess that the best-effort would indeed return multiple errors. We can either wrap them in a `Parallel_errors of trace list` error but this is likely to not be caught when matching on specific errors or require the caller to coallesce the errors themselves. E.g., returning `('a, trace list) result Lwt.t` and then providing some helper functions specifically for managing traces of errors. That's a difficult thing to design correctly.

- I'd say that `fail-early` cancels other promises. However:
    - This is only a concern for parallel traversal because seqeuntial traversal has no pending promises.
    - It is relatively easy to make your own traversal if you need a separate behaviour. So the most important is to have a design that is sound, well-documented, consistent.
    - We could also add an optional argument.


- Ideally, `iter_es` with fail-early should be similar to `Lwt_list.iter_s` and `Error_monad.iter_s` and `iter_ep` with `best-effort should be similar to `Lwt_list.iter_p` and `Error_monad.iter_p`."	raphael-proust	2020-06-01T11:21:23Z		False				-2	tezos/tezos	1804
gid://gitlab/DiffNote/353069773		"To avoid getting this MR way too far into abstract possible use cases and such, I went for the following approach:

- consistent behaviour: all `_e`, `_s` and `_es` functions have fail-early behaviour, all `_p` and `_ep` functions have best-effort behaviour.
- both behaviour (as well as fail cases) are heavily documented in `Seq`. Other modules are not so well documented though.

I pushed these modifications (sorry for the force-push)."	raphael-proust	2020-06-01T16:23:45Z		False				-2	tezos/tezos	1804
gid://gitlab/DiffNote/353434599		My bad, I completely misread GitLab's interface and did not see that there were other subdirectories and an .opam. Sorry!	romain.nl	2020-06-02T08:05:12Z		False				0	tezos/tezos	1804
gid://gitlab/DiffNote/353597045		What does `i` stand for?	romain.nl	2020-06-02T11:38:08Z		False				0	tezos/tezos	1804
gid://gitlab/DiffNote/353605068		"If I understand correctly, there is no `add` function, there is `find_or_make` instead. So it's not actually an extension of `Stdlib.Hashtbl`. There can in particular be only one value per key, contrary to `Stdlib.Hashtbl`. The semantics seems, rather, to be suited for memoization of promises?

Also, it seems that one could have `fold_keys` (for instance) fold over a particular key at a given point in time, and then, without the user calling `remove`, the user could call `fold_keys` again and the key could have disappeared (if the promise which computes the associated value returns an error). This seems rather counterintuitive, although it is ok for memoization.

If my understanding is correct, then I would suggest to rename and document this module to not mislead the user into thinking that it is `Stdlib.Hashtbl` plus some monad-friendly iterators."	romain.nl	2020-06-02T11:49:42Z		False				-1	tezos/tezos	1804
gid://gitlab/DiffNote/353609769		"As the `_s` and `_p` functions do not deal with errors at all but only with `Lwt` (contrary to the `_e`, `_es` and `_ep` versions), maybe `lib_errlib` is not the best name for this lib, and `[Error_monad]-aware replacements` is too restrictive of a description?

Maybe `lib_stdmonad`?"	romain.nl	2020-06-02T11:54:19Z		False				-1	tezos/tezos	1804
gid://gitlab/DiffNote/354388570		Not sure. `initializer`? `initer`? something like that. I'll add a commit to rename it	raphael-proust	2020-06-03T11:30:03Z		False				-2	tezos/tezos	1804
gid://gitlab/DiffNote/354388574		"Your understanding is correct. This is not an extension of `Hastbl` (although `S`/`Make` is) because doing an extension of `Hashtbl` leads to a high potential for race conditions.

I've improved the documentation. Let me know if you think this is enough."	raphael-proust	2020-06-03T11:30:03Z		False				-1	tezos/tezos	1804
gid://gitlab/DiffNote/354388577		"We could change the name yes. The specific `lib_stdmonad` suggestion is a bit vague (what monad?). And in its current state `errlib` depends on `tezos-error-monad` specifically (not on *an* error monad, but on *this* error monad).

I'm open to other suggestions."	raphael-proust	2020-06-03T11:30:04Z		False				-1	tezos/tezos	1804
gid://gitlab/DiffNote/354424763		"I agree `lib_stdmonad` is not great. Maybe `tezos-error-monad-stdlib` then? I'm not completely happy with it either, but it sounds like ""an extension of `tezos-error-monad` for `stdlib`"" which seems good?"	romain.nl	2020-06-03T12:11:42Z		False				-1	tezos/tezos	1804
gid://gitlab/DiffNote/354426805		"```suggestion:-0+0
    than raising [Not_found]) extensions of [Hashtbl.S] with some Lwt- and
```"	romain.nl	2020-06-03T12:14:08Z		False				-1	tezos/tezos	1804
gid://gitlab/DiffNote/354433563		The documentation is great! In fact, the examples could (possibly later) be copied into unit tests.	romain.nl	2020-06-03T12:22:08Z		False				-1	tezos/tezos	1804
gid://gitlab/DiffNote/355044469		Following up offband discussion, I renamed the library `lwt-result-stdlib`. The module that exports the instantiated Seq/Set/Map/Hashtbl is called `Lwtreslib` for short.	raphael-proust	2020-06-04T08:06:40Z		False				-1	tezos/tezos	1804
gid://gitlab/DiffNote/355245077		"Maybe it's worth documenting the difference between `in_error` and `out_error`?

Something like:
```
(** Errors taken as input by functions which build error results ([error] and [fail]). *)
type in_error

(** Errors propagated as output into error results.

    For instance, it can be equal to [in_error].
    Or it can be a list of [in_error]s so that the join operator does not have to choose which error
    to keep if [in_error] itself is not capable of storing multiple [in_error]s recursively. *)
type out_error
```"	romain.nl	2020-06-04T12:21:28Z		False				-1	tezos/tezos	1804
gid://gitlab/DiffNote/355496458		"```suggestion:-0+0
      The types [in_error] and [out_error] are kept separate (although they can
```"	romain.nl	2020-06-04T16:12:39Z		False				-1	tezos/tezos	1804
gid://gitlab/DiffNote/325234495		There is a dedicated encoding for traces, `trace_encoding`.	arvidnl	2020-04-16T12:34:13Z		False				0	tezos/tezos	1743
gid://gitlab/DiffNote/325280463		"```suggestion:-0+0
  (** Internal use only *)
```

Internal to `internal_event.ml`? In that case, why are they declared in the interface? Perhaps you could give a full signature for internal use (non exposed) and an internal, more restricted interface. Regardless, and even though I know you didn't write these functions, I think they merit doc comments. Also, it seems that you use these functions outside lib_event_logging, so that doesn't see very internal."	arvidnl	2020-04-16T13:24:06Z		False				0	tezos/tezos	1743
gid://gitlab/DiffNote/325280466		In other events where traces are output, we've put a pretty printer that only shows the first message. This makes logs more readable, while the still trace is still available in the structured output. Reference https://gitlab.com/tezos/tezos/-/merge_requests/1741/diffs. Note though that the final placement of `Event.pp_first_error_of_trace` is under discussion.	arvidnl	2020-04-16T13:24:06Z		False				2	tezos/tezos	1743
gid://gitlab/DiffNote/326135376		internal means that it is an undocumented function, exposed in the mli temporarily and it should not be used otherwise. In out mli there are a few of those. I think there is also a directive to odoc to make it ignore these functions when generating the documentation.	abate	2020-04-17T10:42:28Z		False				-2	tezos/tezos	1743
gid://gitlab/DiffNote/326139601		So here we could have `Error: {message} {first_trace}` and then add also the full trace as metadata. Nice.	abate	2020-04-17T10:49:45Z		False				-2	tezos/tezos	1743
gid://gitlab/DiffNote/326273192		since !1741 is now merged, maybe before using it here, we should move this function from `src/lib_shell/event.ml` in the module `Error_monad` . I'd leave this for further work.	abate	2020-04-17T14:08:41Z		False				-2	tezos/tezos	1743
gid://gitlab/DiffNote/326274534		done	abate	2020-04-17T14:10:34Z		False				-2	tezos/tezos	1743
gid://gitlab/DiffNote/329460682		`data = {}`	bidinger	2020-04-22T21:43:28Z		False				0	tezos/tezos	1775
gid://gitlab/DiffNote/329461348		By convention, these tests shouldn't print anything. This is to make sure that only the client command and client output are printed.	bidinger	2020-04-22T21:45:06Z		False				0	tezos/tezos	1775
gid://gitlab/DiffNote/329462070		"useful trick, add an error message

`assert False, ""this fails because ...""`"	bidinger	2020-04-22T21:46:51Z		False				0	tezos/tezos	1775
gid://gitlab/DiffNote/329462756		you shouldn't return anything in the test methods. They are not supposed to be called by your code, only by the framework which doesn't use the return value. If you want to pass a value from a method to another, use a `session` object.	bidinger	2020-04-22T21:48:32Z		False				0	tezos/tezos	1775
gid://gitlab/DiffNote/329463559		`sleep` are error prone. They can lead to time-sensitive behavior that makes the test fragile.	bidinger	2020-04-22T21:49:45Z		False				0	tezos/tezos	1775
gid://gitlab/DiffNote/329464686		`dict` is not needed here. Just use the dict literal `{ ... }`	bidinger	2020-04-22T21:51:39Z		False				0	tezos/tezos	1775
gid://gitlab/DiffNote/329467537		you don't need `.keys()` here	bidinger	2020-04-22T21:55:38Z		False				0	tezos/tezos	1775
gid://gitlab/DiffNote/329469289		do you need this side effect?	bidinger	2020-04-22T21:58:33Z		False				0	tezos/tezos	1775
gid://gitlab/DiffNote/329471364		do you need to log this?	bidinger	2020-04-22T22:01:08Z		False				0	tezos/tezos	1775
gid://gitlab/DiffNote/329475171		no need for an `f` here	bidinger	2020-04-22T22:08:41Z		False				0	tezos/tezos	1775
gid://gitlab/DiffNote/329480514		"Not a big deal, but inconsistent use of `""` and `'` (I'd favour `'`)"	bidinger	2020-04-22T22:16:55Z		False				0	tezos/tezos	1775
gid://gitlab/DiffNote/329492895		"There is a better way to write this function (using subprocess.run)

https://gitlab.com/tezos/tezos/-/merge_requests/1659/diffs?commit_id=7790bd469e655ddf91d82c3f2364d4b96b471095"	bidinger	2020-04-22T22:32:35Z		False				0	tezos/tezos	1775
gid://gitlab/DiffNote/330687930		you can use dict literal `{}`. Why not use a literal for the whole structure?	bidinger	2020-04-24T07:37:02Z		False				0	tezos/tezos	1782
gid://gitlab/DiffNote/330688085		useless	bidinger	2020-04-24T07:37:16Z		False				0	tezos/tezos	1782
gid://gitlab/DiffNote/330688403		tests shouldn't print traces	bidinger	2020-04-24T07:37:49Z		False				0	tezos/tezos	1782
gid://gitlab/DiffNote/330689143		name of this file should be `test_codec.py`	bidinger	2020-04-24T07:39:09Z		False				1	tezos/tezos	1782
gid://gitlab/DiffNote/330689938		you don't test that no fields where added	bidinger	2020-04-24T07:40:30Z		False				0	tezos/tezos	1782
gid://gitlab/DiffNote/330697055		"Something to think about, but at some point we should/could factorize this function. (see `deamons/utils.py`). This will need an ""extra layer"" of dependencies

1. *common lib* which contains this `format_commmand` function
2. client, node, codec
3. sandbox
4. tests

It wasn't done before because I felt it wasn't worth it adding a new package just for this single function. Still not sure if it's worth it."	bidinger	2020-04-24T07:52:19Z		False				1	tezos/tezos	1782
gid://gitlab/DiffNote/330698745		`client_path` -> `codec_path`	bidinger	2020-04-24T07:54:43Z		False				0	tezos/tezos	1782
gid://gitlab/DiffNote/330699799		"why not printing the output? we do this for all other executables, so that the user can see the trace 
```
# tezos-codec ....
...
  ouptut of the command
...
```"	bidinger	2020-04-24T07:56:27Z		False				1	tezos/tezos	1782
gid://gitlab/DiffNote/330726491		I would argue this isn't related to `sandbox` at all.	bidinger	2020-04-24T08:35:25Z		False				0	tezos/tezos	1782
gid://gitlab/DiffNote/330729369		you could add a pytest marker `codec`.	bidinger	2020-04-24T08:39:43Z		False				0	tezos/tezos	1782
gid://gitlab/DiffNote/330729591		"
Also, this doesn't have to be incremental. For instance, you could:

1. test encode/decode in the same method (forget `session`)
2. parameterize the test by a list of object to encode (see `test_contract.py` for an example of parameterized tests."	bidinger	2020-04-24T08:40:06Z		False				0	tezos/tezos	1782
gid://gitlab/DiffNote/330730786		"Since you added this test, you could test a few more things of `tezos-codec`, for instance corner cases, and other command-line options.

That being said, more exhaustive testing could also be done with alcootest unit tests."	bidinger	2020-04-24T08:41:56Z		False				3	tezos/tezos	1782
gid://gitlab/DiffNote/330871544		If this is necessary, maybe this should be done in another MR?	Saroupille	2020-04-24T11:22:32Z		False				-2	tezos/tezos	1782
gid://gitlab/DiffNote/330872051		How would you do to compute the path?	Saroupille	2020-04-24T11:23:16Z		False				-2	tezos/tezos	1782
gid://gitlab/DiffNote/330875245		"Not necessary in this MR, just a detail to think about (especially if you add a ""common lib"" layer in one of your subsequent MR)."	bidinger	2020-04-24T11:27:30Z		False				1	tezos/tezos	1782
gid://gitlab/DiffNote/330964763		Fix 8f028eed1	Saroupille	2020-04-24T13:32:37Z		False				-2	tezos/tezos	1782
gid://gitlab/DiffNote/330964897		Fix in 8f028eed1	Saroupille	2020-04-24T13:32:48Z		False				-2	tezos/tezos	1782
gid://gitlab/DiffNote/330964989		Fix in 8f028eed1	Saroupille	2020-04-24T13:32:56Z		False				-2	tezos/tezos	1782
gid://gitlab/DiffNote/330965259		Fix in 1acb1e990	Saroupille	2020-04-24T13:33:16Z		False				-2	tezos/tezos	1782
gid://gitlab/DiffNote/330965335		Fix in 1acb1e990	Saroupille	2020-04-24T13:33:22Z		False				-2	tezos/tezos	1782
gid://gitlab/DiffNote/330965691		Fix in 8f028eed1	Saroupille	2020-04-24T13:33:51Z		False				-2	tezos/tezos	1782
gid://gitlab/DiffNote/330966822		Fix in c8d3d5c4f	Saroupille	2020-04-24T13:35:25Z		False				-2	tezos/tezos	1782
gid://gitlab/DiffNote/330966895		Fix in c8d3d5c4f	Saroupille	2020-04-24T13:35:32Z		False				-2	tezos/tezos	1782
gid://gitlab/DiffNote/330967017		Fix in c8d3d5c4f	Saroupille	2020-04-24T13:35:45Z		False				-2	tezos/tezos	1782
gid://gitlab/DiffNote/330967125		Fix in c8d3d5c4f	Saroupille	2020-04-24T13:35:54Z		False				-2	tezos/tezos	1782
gid://gitlab/DiffNote/332227085		"should print on stderr (`file=sys.stderr`)

(this has been updated too on the MR that you used as a reference)"	bidinger	2020-04-27T16:59:13Z		False				0	tezos/tezos	1782
gid://gitlab/DiffNote/332332247		Fix in 93900b551	Saroupille	2020-04-27T20:07:35Z		False				-2	tezos/tezos	1782
gid://gitlab/DiffNote/320379997		Not sure why the box, and I think the message should be the same as what you wrote in the description.	klakplok	2020-04-08T16:23:06Z		False				0	tezos/tezos	1737
gid://gitlab/DiffNote/320441826		The box was a remnant of the past (according to google translate)	pirbo	2020-04-08T17:23:20Z		False				-2	tezos/tezos	1737
gid://gitlab/DiffNote/359709396		Is this still used?	arvidnl	2020-06-11T16:23:29Z		False				0	tezos/tezos	1887
gid://gitlab/DiffNote/359709399		"```suggestion:-2+0
        it is appropriate for tests that do not need a node, such as
        those of the mockup client.

```"	arvidnl	2020-06-11T16:23:29Z		False				-1	tezos/tezos	1887
gid://gitlab/DiffNote/359709403		It feels weird to me that this function is in `Sandbox`, as, if I understand correctly, it does not actually depend on a sandbox. Actually, all it needs are the `_wrap_path` method. Maybe this method should be moved out?	arvidnl	2020-06-11T16:23:30Z		False				-1	tezos/tezos	1887
gid://gitlab/DiffNote/359709404		"```suggestion:-2+0
            client_factory (Callable): the constructor of clients. Defaults to
                                       Client. Allows e.g. regression testing.
            **kwargs: arguments passed to client_factory
```
Changed doc to be in the same order as the arguments."	arvidnl	2020-06-11T16:23:30Z		False				-1	tezos/tezos	1887
gid://gitlab/DiffNote/359709409		Is it possible (and desirable?) to use this fixture in other tests? If so, should it be in `conftest.py`? I see below that you argue against that, but on the other hand, you also say that anyone that wants to use the mockup must follow the same procedure. It seems contradictory to me.	arvidnl	2020-06-11T16:23:30Z		False				0	tezos/tezos	1887
gid://gitlab/DiffNote/359709414		Why cleanup here? Where is `result.base_dir` created?	arvidnl	2020-06-11T16:23:30Z		False				0	tezos/tezos	1887
gid://gitlab/DiffNote/359709418		In which way isn't it direct? Because you call create_client twice? I don't really get this comment or why the function does what it does.	arvidnl	2020-06-11T16:23:31Z		False				0	tezos/tezos	1887
gid://gitlab/DiffNote/359709421		I'm not sure it makes sense to leave a comment explaining why you removed something. That should better be done in the MRs description or in the commit message IMO.	arvidnl	2020-06-11T16:23:31Z		False				0	tezos/tezos	1887
gid://gitlab/DiffNote/359709426		"```suggestion:-0+0
    # mockup was created already by fixture, try to create it second time:
```"	arvidnl	2020-06-11T16:23:31Z		False				0	tezos/tezos	1887
gid://gitlab/DiffNote/359709427		These `res == 'ok'` are not so nice, maybe you could use an [Enum](https://docs.python.org/3/library/enum.html) instead?	arvidnl	2020-06-11T16:23:31Z		False				0	tezos/tezos	1887
gid://gitlab/DiffNote/359709431		Can you use this `touch` instead: https://stackoverflow.com/a/34603829/87129?	arvidnl	2020-06-11T16:23:31Z		False				0	tezos/tezos	1887
gid://gitlab/DiffNote/360308144		"I think the word ""is"" is missing before ""appropriate"" in your suggestion."	rafoo_	2020-06-12T14:30:25Z		False				-1	tezos/tezos	1887
gid://gitlab/DiffNote/360315824		Now that `run_generic` does not depend on `self.base_dir`, I think that changing the value of `self.base_dir` has no effect on the next client calls.	rafoo_	2020-06-12T14:42:02Z		False				0	tezos/tezos	1887
gid://gitlab/DiffNote/360320206		Indeed, the `set_base_dir` method is removed altogether by this MR.	smelc	2020-06-12T14:48:45Z		False				-2	tezos/tezos	1887
gid://gitlab/DiffNote/360320443		OK, nevermind.	rafoo_	2020-06-12T14:49:07Z		False				0	tezos/tezos	1887
gid://gitlab/DiffNote/364540056		I agree, yet the `_wrap_path` method are in the Sandbox `class` and depend on an instance field (`binaries_path`). In the end, this field is always assigned with the value of `paths.TEZOS_HOME` so we could remove it from `Sandbox` constructor and instead hardcode `paths.TEZOS_HOME`. Would this be better than the current solution? I'd tend to say no but let me know.	smelc	2020-06-19T13:32:48Z		False				-2	tezos/tezos	1887
gid://gitlab/DiffNote/364542598		Yes I agree. On one hand, indeed this is the unique way to correctly initialize a mockup; but on the other hand this fixture hardcodes the protocol being used (via `test_mockup`'s `_PROTO` constant which is set to `ALPHA`). When I wrote this I looked if I could parameterize a fixture by a value (i.e. so that `mockup_client` takes a second parameter, which would be fulfilled by actual tests) but could not find it. Is there a way to do that? Then indeed it would make perfect sense to move this fixture to `conftest.py`.	smelc	2020-06-19T13:36:13Z		False				-2	tezos/tezos	1887
gid://gitlab/DiffNote/364562976		No :+1_tone3: I've deleted this line in 596815c6232c6c28796e89535d39d8f761ab3182.	smelc	2020-06-19T14:01:45Z		False				-2	tezos/tezos	1887
gid://gitlab/DiffNote/364563454		:+1_tone4: I've applied the suggestion in 596815c6232c6c28796e89535d39d8f761ab3182.	smelc	2020-06-19T14:02:26Z		False				-2	tezos/tezos	1887
gid://gitlab/DiffNote/364563881		Done in 596815c6232c6c28796e89535d39d8f761ab3182 :+1:	smelc	2020-06-19T14:03:01Z		False				-2	tezos/tezos	1887
gid://gitlab/DiffNote/364564989		Indeed :100: the `base_dir` was being created by the caller so the cleanup should be done by the caller too. Since removing `rmtree` yielded a oneliner fixture, I've removed it altogether.	smelc	2020-06-19T14:04:27Z		False				-2	tezos/tezos	1887
gid://gitlab/DiffNote/364566338		"I've reworded this paragraph as follows:

```python
""""""     ...

        This is done in two steps, because we want to create the mockup
        with a client that doesn't have ""--mode mockup"" (as per
        the public documentation) but we want to return a
        client that has ""--mode mockup"" and uses the base-dir created
        in the first step.
""""""
```

Let me know if it's clearer."	smelc	2020-06-19T14:06:12Z		False				-2	tezos/tezos	1887
gid://gitlab/DiffNote/364567121		Yes true :hole: I've removed the comment and completed the message of commit _Tests/python: simplify mockup client tests_ accordingly.	smelc	2020-06-19T14:07:18Z		False				-2	tezos/tezos	1887
gid://gitlab/DiffNote/364567397		Done in de8caf39.	smelc	2020-06-19T14:07:40Z		False				-2	tezos/tezos	1887
gid://gitlab/DiffNote/364567939		Cool I didn't know that `Path` had a `touch` method. I've changed it in de8caf39.	smelc	2020-06-19T14:08:23Z		False				-2	tezos/tezos	1887
gid://gitlab/DiffNote/365388113		"No, I don't think so, and I could not find anything by glancing in the manual. I think you would have to create a the parametric fixture, and then explicitely name each parameterization, i.e.:

    def parametric_fixture(param):
        return ...

    def fixture_foo():
        return parametric_fixture(param_foo)
    
    def fixture_bar():
        return parametric_fixture(param_bar)"	arvidnl	2020-06-22T07:26:27Z		False				0	tezos/tezos	1887
gid://gitlab/DiffNote/365390267		"Yes, it's clearer. When you say that you

```python
        [...] to create the mockup
        with a client that doesn't have ""--mode mockup"" (as per
        the public documentation)
```

why is it that you do not want to have that?"	arvidnl	2020-06-22T07:29:14Z		False				0	tezos/tezos	1887
gid://gitlab/DiffNote/365471048		"I wouldn't hard-code `paths.TEZOS_HOME` (if this is what you're saying). The idea is to keep sandbox generic. In particular, the configuration paths are defined at the ""top layer' (i.e. the tests and conftest.py).

I agree with Argvid's comment though. Overtime, the sandbox class has been modified to allow new testing behavior and the overall design could be rethought/simplified a little bit.

So maybe Arvid's comment can be addressed in a different MR? 

PS: I'm just jumping into the conversation and haven't looked at the complete MR yet"	bidinger	2020-06-22T09:07:33Z		False				-1	tezos/tezos	1887
gid://gitlab/DiffNote/365547495		It seems to me that `_wrap_path` could belong in `tools/paths.py`. But, this would create an unwanted dependency between `Sandbox` and this file, which violates the [hierarchy of the framework](http://tezos.gitlab.io/developer/python_testing_framework.html#code-organization). Perhaps the mockup client should have its own module in launchers, also parameterized by binaries path. if the _wrap_path method should be shared by sandbox and the new mockup launcher, then this can be accomplished either through inheritance or by some kind of helper class / function in the launcher layer.	arvidnl	2020-06-22T10:39:46Z		False				-1	tezos/tezos	1887
gid://gitlab/DiffNote/380041461		I've implemented this suggestion in 5255745efd0dfd487d261154f109473e60581e1c	smelc	2020-07-15T15:50:27Z		False				-2	tezos/tezos	1887
gid://gitlab/DiffNote/380043801		"Because `--mode mockup` is not required for creating a mockup. My feeling is that it is weird to specify it for creating a mockup, as when creating the mockup, you're not yet in mockup mode.

Note that I'm not saying we should forbid the combination of `--mode mockup` and `create mockup`. It works and it hence provides a resilient UX. We just have to stick to a way in the mockup's documentation and it is `create mockup` without `--mode mockup` right now. Which is why the tests should test this case.

Please resolve this thread if you're satisfied with this explanation."	smelc	2020-07-15T15:53:48Z		False				-2	tezos/tezos	1887
gid://gitlab/DiffNote/380462617		Okay, I see now. Thanks for the explanation.	arvidnl	2020-07-16T08:12:28Z		False				0	tezos/tezos	1887
gid://gitlab/DiffNote/380681742		I moved the fixture to `conftest.py` in bfb34f5106fed8593e8724efebf766b0aa4b2f23 after having parameterized the fixture by the two protocols that the mockup support. Hence it doesn't hardcode a specific protocol anymore.	smelc	2020-07-16T13:15:05Z		False				-2	tezos/tezos	1887
gid://gitlab/DiffNote/380702631		"Having an additional launcher dedicated to the mockup tests would also require duplicating the `sandbox` fixture in `conftest.py`, which sadly would be exactly the same except that it would call a new class with the extra `create_client` method. Let's call this class `MockStart`.

If we make `MockStart` a subtype of `Sandbox`, it wouldn't change any behavior of the existing `Sandbox` class; so subclassing would be overkill.

Or we could introduce a new class, featuring the `_wrap_path` method and the `binaries_path` field; and make both `Sandbox` and `MockStart` subtypes of this new class. This also looks overkill, for the sole purpose of avoiding `create_client` in `sandbox.py` (which depends twice on `self`-content, so it is a  legit class member!).

Please tell me which option you prefer:

1. Make `MockStart` a subtype of `Sandbox`
2. Make `MockStart` and `Sandbox` subtypes of a new class.
3. Keep the current state, i.e. add `create_client` to `sandbox.py`, my preference :joy_cat: 

Apart from this thread, this MR is ready for review a second time from my POV."	smelc	2020-07-16T13:46:27Z		False				-2	tezos/tezos	1887
gid://gitlab/DiffNote/380778224		Sounds like we can go with 3.	arvidnl	2020-07-16T15:11:17Z		False				-1	tezos/tezos	1887
gid://gitlab/DiffNote/383327605		"```suggestion:-0+0
        a mockup using custom arguments; you MUST do the same
```"	rafoo_	2020-07-21T20:16:57Z		False				0	tezos/tezos	1887
gid://gitlab/DiffNote/383327606		I suggest to give a name to the list of tested protocol to ease adding a protocol to the mockup tests in the future.	rafoo_	2020-07-21T20:16:57Z		False				0	tezos/tezos	1887
gid://gitlab/DiffNote/383327607		Why not adding the `--protocol` option to the command globally as is done for `--base-dir`?	rafoo_	2020-07-21T20:16:57Z		False				-1	tezos/tezos	1887
gid://gitlab/DiffNote/383328959		Caution, this line has moved to another file in a further commit.	rafoo_	2020-07-21T20:20:25Z		False				0	tezos/tezos	1887
gid://gitlab/DiffNote/383545005		Good idea, I've added `MOCKUP_PROTOCOLS` to `constant.py` to indeed share this definition in the fixture in `conftest.py` and in `test_mockup.py`, see https://gitlab.com/tezos/tezos/-/blob/907d7d3f8e8d660997c24d501dbc0bbeabb0fb40/tests_python/tools/constants.py#L72	smelc	2020-07-22T08:07:42Z		False				-2	tezos/tezos	1887
gid://gitlab/DiffNote/383550883		Perfect!	rafoo_	2020-07-22T08:14:10Z		False				0	tezos/tezos	1887
gid://gitlab/DiffNote/383555141		"I did not think of this possibility, but I think it should be postponed to another issue if we choose to do it:

1. It would affect all tests, not only the mockup ones; whereas at the moment, only the mockup tests fiddle with `--protocol`.
2. It would make harder to test that the mockup detects protocols mismatch correctly. https://gitlab.com/tezos/tezos/-/blob/e68cee40b878d3a734f0380630a53663fc33cd49/tests_python/tests/test_mockup.py#L635 (not merged yet) is such a test: it tests that the mockup fails as expected when mixing carthage and alpha (there is a bug right now on `master` on this matter).

If you're fine leaving the current state for now, please resolve this thread."	smelc	2020-07-22T08:19:52Z		False				-2	tezos/tezos	1887
gid://gitlab/DiffNote/383557248		OK, this wan't super important.	rafoo_	2020-07-22T08:23:24Z		False				-1	tezos/tezos	1887
gid://gitlab/DiffNote/383560575		Good catch :eyes: I've fixed that.	smelc	2020-07-22T08:28:51Z		False				-2	tezos/tezos	1887
gid://gitlab/DiffNote/390507210		Was `pv.pipeline <- None ;` removed on purpose?	vect0r	2020-08-04T15:33:27Z		False				1	tezos/tezos	1941
gid://gitlab/DiffNote/390507216		Missing copyright header	vect0r	2020-08-04T15:33:27Z		False				10	tezos/tezos	1941
gid://gitlab/DiffNote/390507226		Don't forget to add the notion of `mode` in the description.	vect0r	2020-08-04T15:33:27Z		False				-1	tezos/tezos	1941
gid://gitlab/DiffNote/390507229		Should we define a type shared with the bootstrap heuristic to avoid wilds polymorphic variant?	vect0r	2020-08-04T15:33:28Z		False				-1	tezos/tezos	1941
gid://gitlab/DiffNote/390507231		The convention encourages not to use capitalize letter when starting a log message.	vect0r	2020-08-04T15:33:28Z		False				0	tezos/tezos	1941
gid://gitlab/DiffNote/390507233		Why not 12? :laughing:	vect0r	2020-08-04T15:33:28Z		False				-1	tezos/tezos	1941
gid://gitlab/DiffNote/390507240		Hi there!	vect0r	2020-08-04T15:33:29Z		False				0	tezos/tezos	1941
gid://gitlab/DiffNote/390507243		Wrong argument list. It should be `t`.	vect0r	2020-08-04T15:33:29Z		False				-1	tezos/tezos	1941
gid://gitlab/DiffNote/390527544		Someone told me once to always initialize an `hash table` with a prime number.	Saroupille	2020-08-04T15:58:24Z		False				-2	tezos/tezos	1941
gid://gitlab/DiffNote/390532547		I would say that this does not concern this MR but you are right. I remember that @bidinger had arguments to use polymorphic variants.	Saroupille	2020-08-04T16:07:55Z		False				-2	tezos/tezos	1941
gid://gitlab/DiffNote/390534196		There is already a `pv.pipeline <- None` below so I thought it was redundant but may be not?	Saroupille	2020-08-04T16:11:05Z		False				-2	tezos/tezos	1941
gid://gitlab/DiffNote/390538994		I fix this in a next commit indeed. It is fixed in 776b36692	Saroupille	2020-08-04T16:21:12Z		False				-2	tezos/tezos	1941
gid://gitlab/DiffNote/390539134		Fix in e948fe9ed	Saroupille	2020-08-04T16:21:27Z		False				-2	tezos/tezos	1941
gid://gitlab/DiffNote/390539241		Fix in 386ecab07	Saroupille	2020-08-04T16:21:42Z		False				-2	tezos/tezos	1941
gid://gitlab/DiffNote/390539314		Fix in 535a0c6d2	Saroupille	2020-08-04T16:21:52Z		False				-2	tezos/tezos	1941
gid://gitlab/DiffNote/390539406		Fix in 2c800b025	Saroupille	2020-08-04T16:22:01Z		False				-2	tezos/tezos	1941
gid://gitlab/DiffNote/391855547		It was in the `~on_error`. Now, when an error is raised, it is not set to `None` any more.	vect0r	2020-08-06T12:40:10Z		False				1	tezos/tezos	1941
gid://gitlab/DiffNote/391855553		Ok, we can note and postpone that.	vect0r	2020-08-06T12:40:11Z		False				-1	tezos/tezos	1941
gid://gitlab/DiffNote/391855561		I'd like to know why. But it suits me!	vect0r	2020-08-06T12:40:11Z		False				-1	tezos/tezos	1941
gid://gitlab/DiffNote/407316139		"Are you fine with this explanation? 
> https://stackoverflow.com/questions/1145217/why-should-hash-functions-use-a-prime-number-modulus"	Saroupille	2020-09-04T07:09:55Z		False				-2	tezos/tezos	1941
gid://gitlab/DiffNote/407321677		I was completely mistaken. This is fixed in  1adadc1e	Saroupille	2020-09-04T07:20:45Z		False				-2	tezos/tezos	1941
gid://gitlab/DiffNote/408357414		Yes, thanks.	vect0r	2020-09-07T08:38:04Z		False				-1	tezos/tezos	1941
gid://gitlab/DiffNote/410016579		"This is never used. I'm not quite sure we actually want to cache `Context.t` values and if so: 
- Is this reasonable in memory
- When should we clear the table
- ... (TBD)"	vbotbol	2020-09-09T16:22:19Z		False				0	tezos/tezos	1941
gid://gitlab/DiffNote/410312545		"> This is never used. I'm not quite sure we actually want to cache `Context.t` values and if so:

I introduced this for another version with the switch of protocol. I forgot to remove it for this MR. The design with a switch of protocol may change so it is not clear this table is needed after all. But the current design requires to cache at least one context. This context is the first one after a switch of protocol."	Saroupille	2020-09-10T07:18:54Z		False				-2	tezos/tezos	1941
gid://gitlab/DiffNote/413194982		Should we remove this comment ?	phink	2020-09-15T19:34:08Z		False				0	tezos/tezos	1941
gid://gitlab/DiffNote/413194986		"It may not be a good idea to overload previous constructors.
Bootstrap here refers to `mode_pipeline` and `mode` (and the module `Bootstrap`).
Maybe we could choose different names."	phink	2020-09-15T19:34:08Z		False				0	tezos/tezos	1941
gid://gitlab/DiffNote/413194992		I am not sure this is valid. Maybe we should keep the original copyright and add the nomadic labs one.	phink	2020-09-15T19:34:09Z		False				-1	tezos/tezos	1941
gid://gitlab/DiffNote/413194997		Maybe we could not add the synch state of the node in the message `New_branch` but instead add a callback `get_sync_state` when creating the peer validator. That would make more sense to retrieve this information when deciding the pipeline mode instead of sending this one with the new branch message	phink	2020-09-15T19:34:09Z		False				-1	tezos/tezos	1941
gid://gitlab/DiffNote/413195005		Why do you think of renaming `choose` for `get` ? The word `choose` reminds me more the act of choosing more or less 'randomly', like the semantics of `Lwt.choose`. What do you think ?	phink	2020-09-15T19:34:09Z		False				0	tezos/tezos	1941
gid://gitlab/DiffNote/413195009		"```diff
- wait
+ waits
```"	phink	2020-09-15T19:34:10Z		False				0	tezos/tezos	1941
gid://gitlab/DiffNote/413195011		I know this is not exposed but maybe we can use an explicit name like `Pipeline` ?	phink	2020-09-15T19:34:10Z		False				-1	tezos/tezos	1941
gid://gitlab/DiffNote/413195014		I dont quite understand why you use the three aliases here as it does not really save space.	phink	2020-09-15T19:34:10Z		False				0	tezos/tezos	1941
gid://gitlab/DiffNote/413195017		What about using an error here ?	phink	2020-09-15T19:34:11Z		False				-1	tezos/tezos	1941
gid://gitlab/DiffNote/413195019		Maybe we should define `head` and `history` functions in the `Block_locator` instead of relying on the cast `:>` operator.	phink	2020-09-15T19:34:11Z		False				-1	tezos/tezos	1941
gid://gitlab/DiffNote/413195020		"```diff
- geneis
+ genesis
```"	phink	2020-09-15T19:34:11Z		False				-1	tezos/tezos	1941
gid://gitlab/DiffNote/413195023		I dont see any reference to batch_header_size in the codebase, maybe we should add some references/doc ?	phink	2020-09-15T19:34:12Z		False				0	tezos/tezos	1941
gid://gitlab/DiffNote/413195025		Type annotation is not required here.	phink	2020-09-15T19:34:12Z		False				-1	tezos/tezos	1941
gid://gitlab/DiffNote/413195030		"The function `Multipass_proto_validation.begin_partial_apply` returns a `tzresult`, maybe we should use the bind operator instead of ignoring the result.
```ml
Multipass_proto_validation.begin_partial_apply ~ancestor_context data 
>>?= fun _validation_state -> ...
```"	phink	2020-09-15T19:34:12Z		False				-1	tezos/tezos	1941
gid://gitlab/DiffNote/413195034		"It is a bit strange to use the `unit tzresult` type to index `t` and not only `unit`.
I think this may lead to some weird code parts such as `.. >>=? fun result -> Lwt.return result` below."	phink	2020-09-15T19:34:12Z		False				-1	tezos/tezos	1941
gid://gitlab/DiffNote/413195039		Should we add documentation for this function ?	phink	2020-09-15T19:34:13Z		False				-1	tezos/tezos	1941
gid://gitlab/DiffNote/413195043		Should we rely on `lib_worker` (like the `peer_validator` for instance) ?	phink	2020-09-15T19:34:13Z		False				-1	tezos/tezos	1941
gid://gitlab/DiffNote/413195047		Should we try to fix this FIXME ?	phink	2020-09-15T19:34:13Z		False				-1	tezos/tezos	1941
gid://gitlab/DiffNote/413195049		Is the event correct ?	phink	2020-09-15T19:34:14Z		False				-1	tezos/tezos	1941
gid://gitlab/DiffNote/413195051		Are we sure the reason for invalid block is always because of an incorrect `fitness_gap` ?	phink	2020-09-15T19:34:14Z		False				-1	tezos/tezos	1941
gid://gitlab/DiffNote/413195054		I think this `open` can be removed.	phink	2020-09-15T19:34:14Z		False				0	tezos/tezos	1941
gid://gitlab/DiffNote/413195057		I would suggest using `let data = {Multipass_validation.chain_id; ..}` instead of opening locally the module. That would avoid unexpected shadowing.	phink	2020-09-15T19:34:15Z		False				0	tezos/tezos	1941
gid://gitlab/DiffNote/413195059		Maybe we should precise what is `P` in `P.begin_partial_application` ?	phink	2020-09-15T19:34:15Z		False				-1	tezos/tezos	1941
gid://gitlab/DiffNote/413195061		Should we add some documentation ?	phink	2020-09-15T19:34:15Z		False				-1	tezos/tezos	1941
gid://gitlab/DiffNote/413195064		"```diff
- Block_validation:Make
+ Block_validation.Make
```"	phink	2020-09-15T19:34:16Z		False				-1	tezos/tezos	1941
gid://gitlab/DiffNote/413195066		Maybe `multipass_validation` is a more explicit field than `multipass_block`. What do you think ?	phink	2020-09-15T19:34:16Z		False				-1	tezos/tezos	1941
gid://gitlab/DiffNote/413195069		Should we add an `.mli` for this file ?	phink	2020-09-15T19:34:16Z		False				-1	tezos/tezos	1941
gid://gitlab/DiffNote/413195070		I think it would be a good thing to keep `Bootstrap_pipeline` and `Multipass_pipeline` here instead of renaming them. That would be more explicit.	phink	2020-09-15T19:34:16Z		False				0	tezos/tezos	1941
gid://gitlab/DiffNote/413195072		I think it is better to extend (increment) the list of tags instead of modifying the all list, I think it is less error prone.	phink	2020-09-15T19:34:17Z		False				-1	tezos/tezos	1941
gid://gitlab/DiffNote/420326806		Relying on `lib_worker` might be interesting but it is heavier to use. I think this could be done in a second step, in particular after the `bootstrap_pipeline` refactorisation.	Saroupille	2020-09-29T08:49:08Z		False				-2	tezos/tezos	1941
gid://gitlab/DiffNote/420332120		I am not good at finding names. Because one type is not exported I think it is fine though.	Saroupille	2020-09-29T08:56:05Z		False				-2	tezos/tezos	1941
gid://gitlab/DiffNote/420335958		That I am not good at finding names ^^ But I don't mind. Let's go for `multipass_validation`.	Saroupille	2020-09-29T09:01:01Z		False				-2	tezos/tezos	1941
gid://gitlab/DiffNote/320111821		marginally increase ?	abate	2020-04-08T12:59:42Z		False				-1	tezos/tezos	1739
gid://gitlab/DiffNote/320133082		I don't know by how much it increases honestly, so I just reused the `doc` string from the `mainnet` branch, so technically this is not an actual change from the released version point of view :)	romain.nl	2020-04-08T13:16:10Z		False				-2	tezos/tezos	1739
gid://gitlab/DiffNote/321185768		It may very well not be marginal if people decide to really put the testchain to use.	klakplok	2020-04-09T15:30:21Z		False				-1	tezos/tezos	1739
gid://gitlab/DiffNote/325332824		"`parameter %root unit` should also work and it takes a rather different path in the code (in script_ir_translator.ml); can you please also test it?

Maybe it could be part of another MR with the goal of improving the coverage of script_ir_translator.ml."	rafoo_	2020-04-16T14:01:05Z		False				0	tezos/tezos	1752
gid://gitlab/DiffNote/325360949		Indeed, I'll test that as well. However, it would seem simpler to me to piggyback that on this MR (the goal of this MR is also to increase the coverage).	arvidnl	2020-04-16T14:18:41Z		False				-2	tezos/tezos	1752
gid://gitlab/DiffNote/325362180		As you prefer.	rafoo_	2020-04-16T14:20:15Z		False				0	tezos/tezos	1752
gid://gitlab/DiffNote/325379149		Done.	arvidnl	2020-04-16T14:38:13Z		False				-2	tezos/tezos	1752
gid://gitlab/DiffNote/327090963		"```suggestion:-0+0
# this contract creates a contract
```"	mbouaziz	2020-04-20T08:06:09Z		False				0	tezos/tezos	1752
gid://gitlab/DiffNote/327090967		"```suggestion:-0+0
    # existence and type of the root entrypoint of the create contract.
```"	mbouaziz	2020-04-20T08:06:09Z		False				0	tezos/tezos	1752
gid://gitlab/DiffNote/327297745		You could use `session['contract']`.	rafoo_	2020-04-20T12:49:29Z		False				-1	tezos/tezos	1752
gid://gitlab/DiffNote/327299545		Shouldn't sentences start by a capital letter?	rafoo_	2020-04-20T12:52:22Z		False				0	tezos/tezos	1752
gid://gitlab/DiffNote/327299926		Thanks.	rafoo_	2020-04-20T12:52:54Z		False				0	tezos/tezos	1752
gid://gitlab/DiffNote/327402680		I think this usage of `session` a bit obscure when the origination and transfer to the originated script occurs in the same test. Returning the origination results from `originate` and fetching the contract address therefrom feels less ad hoc, and less like relying on an undocumented side effect of the originate function.	arvidnl	2020-04-20T14:56:15Z		False				-2	tezos/tezos	1752
gid://gitlab/DiffNote/327406586		Done.	arvidnl	2020-04-20T14:59:01Z		False				-2	tezos/tezos	1752
gid://gitlab/DiffNote/327923662		agreed during the merge party.	pirbo	2020-04-21T08:59:48Z		False				-1	tezos/tezos	1752
gid://gitlab/DiffNote/327933741		aint no party like a merge party!	arvidnl	2020-04-21T09:13:27Z		False				-2	tezos/tezos	1752
gid://gitlab/DiffNote/369893022		Fair enough!	arvidnl	2020-06-29T11:58:48Z		False				-1	tezos/tezos	1881
gid://gitlab/DiffNote/369897808		"Maybe you can include only the specific lines: https://www.sphinx-doc.org/en/1.5/markup/code.html. It seems the syntax is:

```
.. literalinclude:: ../../tezt/tests/basic.ml
   :lines: 5-20
```

untested though (fill relative paths outside the docs dir work?)."	arvidnl	2020-06-29T12:04:51Z		False				0	tezos/tezos	1881
gid://gitlab/DiffNote/370076339		The meaning of `origin` is nicely explained in the `.ml` file, perhaps this explanation should be in the interface rather?	arvidnl	2020-06-29T15:36:00Z		False				0	tezos/tezos	1881
gid://gitlab/DiffNote/370076342		"```suggestion:-0+0
(** Get the float value from a [`Float] or [`String] node.
```"	arvidnl	2020-06-29T15:36:00Z		False				0	tezos/tezos	1881
gid://gitlab/DiffNote/370076349		What's the rationale for treating `null` as an empty list?	arvidnl	2020-06-29T15:36:01Z		False				-1	tezos/tezos	1881
gid://gitlab/DiffNote/370076354		"I found this initially unclear until I read the rest of the file. Perhaps this is clearer:
```suggestion:-0+0
    - Absolutely no log has log level [Quiet]. 
      In other words, setting log level [Quiet] inhibits all logs.
```"	arvidnl	2020-06-29T15:36:01Z		False				-1	tezos/tezos	1881
gid://gitlab/DiffNote/370076358		What happens if `/tmp/tezt-1234/hello.ml` already exist? You return something like `hello0.ml`?	arvidnl	2020-06-29T15:36:01Z		False				10	tezos/tezos	1881
gid://gitlab/DiffNote/370076360		Standalone in the sense of no dependencies between tests?	arvidnl	2020-06-29T15:36:01Z		False				2	tezos/tezos	1881
gid://gitlab/DiffNote/370076376		Maybe use long form for the arguments here (not in the targets, but in the recipes), so that at least reading the makefile makes clear the distinction between tezt, tezt-i, ... etc is.	arvidnl	2020-06-29T15:36:02Z		False				0	tezos/tezos	1881
gid://gitlab/DiffNote/374011825		Could also add `Lwt.catch`, it can be useful to check for correct failure	sribar	2020-07-06T08:03:46Z		False				-1	tezos/tezos	1881
gid://gitlab/DiffNote/374011830		"missing licence, 

same for JSON.mli"	sribar	2020-07-06T08:03:47Z		False				-1	tezos/tezos	1881
gid://gitlab/DiffNote/374011832		I'm not sure to understand why the log level are define in `cli.ml` and not in `log.ml` ?	sribar	2020-07-06T08:03:47Z		False				-1	tezos/tezos	1881
gid://gitlab/DiffNote/374011839		"`Sys.readdir` doesn't return current and parent dir (""."" and ""..""), this function can be remove"	sribar	2020-07-06T08:03:47Z		False				0	tezos/tezos	1881
gid://gitlab/DiffNote/374011841		"I think it will be interesting to also have other protocol hash, (specially current activated one to test the amendment)

And so I think that this should be call `protocol_alpha_hash` instead"	sribar	2020-07-06T08:03:48Z		False				0	tezos/tezos	1881
gid://gitlab/DiffNote/374011846		"I would be interesting to return the stderr too if possible

Also related to that, I did not see (or maybe I missed it...) an easy way to check if a (client) command failed as expected."	sribar	2020-07-06T08:03:48Z		False				0	tezos/tezos	1881
gid://gitlab/DiffNote/376646169		The explanation in the `.ml` would not make much sense in the `.mli` since the type is abstract and the explanation refers to the concrete implementation. But I will add the part which does make sense.	romain.nl	2020-07-09T14:44:55Z		False				-2	tezos/tezos	1881
gid://gitlab/DiffNote/376671170		"If an object has a field which is a list, it is convenient to consider its default value (if the field is not present) to be the empty list. This is so that instead of writing `""x"":[]` we can just omit `x`.

Additionally, if a field is not present, it is convenient to consider its value to be `null` (in the JavaScript world, from which JSON originates, `x.f` is `null` if `x` does not contain `f`).

So, for consistency, if we want to be able to say ""get me the value of field x, which is supposed to contain a list"", if the field is not present, we can consider that its value is both `null` and `[]`, which should thus be considered to be equivalent for consistency.

In practice this allows to write:
```
JSON.(json |-> ""f"" |> as_list)
```
instead of:
```
let f = JSON.(json |-> ""f"") in
if JSON.is_null f then [] else JSON.as_list f
```
which is rather verbose and annoying to write.

Obviously, this goes against the philosophy of strongly-typed languages where you must check everything. In the context of parsing, there is a conflicting philosophy that can apply: be strict in what you send, but lenient in what you receive. It's a philosophy which is prone to create security issues though. So, this choice is definitely debatable.

I just expect that in practice we will more often want absent fields to have a default value of `[]` when viewed as arrays, than we'll want to check that they are actually present. I suggest that we keep an eye on how we use `as_list` and possibly review this strategy once we have more examples (for now it's only used twice)."	romain.nl	2020-07-09T15:12:18Z		False				-2	tezos/tezos	1881
gid://gitlab/DiffNote/376675658		"I return `/tmp/tezt-1234/hello.ml`. The idea is that `file` returns ""the file named hello.ml in my temporary directory"". You can thus for instance write `file ""tezos-node/config.json""` if you want to get the location of the configuration file for your node (which you did not create yourself)."	romain.nl	2020-07-09T15:17:00Z		False				-2	tezos/tezos	1881
gid://gitlab/DiffNote/376678109		Yes; a test should not depend on the output of another test, nor should it depend on whether this other test was run or not. If B depends on A and you run only B, it will fail and you will be confused.	romain.nl	2020-07-09T15:19:33Z		False				-2	tezos/tezos	1881
gid://gitlab/DiffNote/376682269		To be honest I'd rather we don't use exceptions for expected failures. I'd rather we use functions that return `result`s or `option`s. In the current version of Tezt, we don't raise exceptions except `Test.Failed`, which is abstract and thus cannot be caught.	romain.nl	2020-07-09T15:24:29Z		False				-2	tezos/tezos	1881
gid://gitlab/DiffNote/376683462		This is because `Log` depends on `Cli`, as it uses `Cli.options.log_level` to decide whether it should actually log or not. If we put the log levels in `Log`, we would have a circular dependency.	romain.nl	2020-07-09T15:26:11Z		False				-2	tezos/tezos	1881
gid://gitlab/DiffNote/376690606		This also applies to `protocol_parameter_file` so I will introduce a record type to hold the two values and declare `val alpha: protocol`.	romain.nl	2020-07-09T15:35:18Z		False				-2	tezos/tezos	1881
gid://gitlab/DiffNote/376715040		"Since you cannot catch `Failed` (which is an internal exception of the `Process` module), you would not be able to do anything with the contents of stderr. And since `Failed` is not exposed, you are right, there is no easy way to check expected errors, you currently have to use `Process.spawn` to re-implement the command yourself, which is not very convenient. Currently there is no test which checks that commands fail as expected so we had no need for that, but I agree that we will probably want to.

We could provide functions to check for errors in the `Process` module, such as:
```
type failure = {code:int; stderr:string}

(** Most general version. *)
val expect_failure: unit Lwt.t -> failure Lwt.t

(** Version provided for convenience.

    - If [code] is specified, check that the process exit code is [code].
    - If [stderr] is specified, check that the process stderr matches the regexp. *)
val should_fail: ?code:int -> ?stderr:rex -> unit Lwt.t -> unit Lwt.t
```
used as follow for instance:
```
Client.activate_protocol client |> Process.should_fail_with ~code:1 ~stderr:(rex ""invalid signature"")
```

I think that if we exposed `Process.Failed` we would face a whole lot of difficult design decisions regarding error handling (see https://gitlab.com/tezos/tezos/-/issues/853)."	romain.nl	2020-07-09T16:09:49Z		False				-2	tezos/tezos	1881
gid://gitlab/DiffNote/376723738		Done in https://gitlab.com/tezos/tezos/-/merge_requests/1881/diffs?commit_id=d3d3d6cd8fd7b922a5af232f2eb3f3e1462bd802	romain.nl	2020-07-09T16:23:55Z		False				-2	tezos/tezos	1881
gid://gitlab/DiffNote/376724162		Done in https://gitlab.com/tezos/tezos/-/merge_requests/1881/diffs?commit_id=f1ca146ea4fbacc531969e7ee345eb7e5acd634e	romain.nl	2020-07-09T16:24:41Z		False				-2	tezos/tezos	1881
gid://gitlab/DiffNote/376724274		Done in https://gitlab.com/tezos/tezos/-/merge_requests/1881/diffs?commit_id=e42e06999725694d535ebd76bb77be82b3afbf81	romain.nl	2020-07-09T16:24:52Z		False				-2	tezos/tezos	1881
gid://gitlab/DiffNote/376724450		Done in https://gitlab.com/tezos/tezos/-/merge_requests/1881/diffs?commit_id=3a86880d280b7ac02fa3e7c46bf52ead4d7c9434	romain.nl	2020-07-09T16:25:16Z		False				-2	tezos/tezos	1881
gid://gitlab/DiffNote/376724674		Done in https://gitlab.com/tezos/tezos/-/merge_requests/1881/diffs?commit_id=6ed22f31f6a7d79859e90e75477912356ed06875	romain.nl	2020-07-09T16:25:44Z		False				-2	tezos/tezos	1881
gid://gitlab/DiffNote/376724815		Done in https://gitlab.com/tezos/tezos/-/merge_requests/1881/diffs?commit_id=13e4a38e1bd62220b1e7dce1a2e73facbdb1a7b6	romain.nl	2020-07-09T16:26:00Z		False				-2	tezos/tezos	1881
gid://gitlab/DiffNote/376725012		Done in https://gitlab.com/tezos/tezos/-/merge_requests/1881/diffs?commit_id=c0f2c1f3848ec25860d6b4f0906658066f4aeb6e	romain.nl	2020-07-09T16:26:19Z		False				-2	tezos/tezos	1881
gid://gitlab/DiffNote/376725196		Done in https://gitlab.com/tezos/tezos/-/merge_requests/1881/diffs?commit_id=777b29232fe18295702340aa44a669abd5be967a	romain.nl	2020-07-09T16:26:36Z		False				-2	tezos/tezos	1881
gid://gitlab/DiffNote/377194482		Ok, I'm all for.	arvidnl	2020-07-10T10:23:13Z		False				-1	tezos/tezos	1881
gid://gitlab/DiffNote/377196324		"Ok, so the idea is not to return a ""fresh"" temporary filename, like `tempnam` or `tempfile`. I initially found this unclear but reading the full documentation of the function makes it clear."	arvidnl	2020-07-10T10:25:54Z		False				10	tezos/tezos	1881
gid://gitlab/DiffNote/377197878		Great. Off-topic, but what do you think of adding something like https://marmelab.com/blog/2016/02/29/auto-documented-makefile.html to our Makefile?	arvidnl	2020-07-10T10:28:09Z		False				0	tezos/tezos	1881
gid://gitlab/DiffNote/377198725		Not sure I understand the ramifications fully, but can Tezt be used to check that an Lwt function returns an exception for some input?	arvidnl	2020-07-10T10:29:12Z		False				-1	tezos/tezos	1881
gid://gitlab/DiffNote/377206179		Looks cool :)	romain.nl	2020-07-10T10:39:13Z		False				-2	tezos/tezos	1881
gid://gitlab/DiffNote/377209534		I see, thanks	sribar	2020-07-10T10:43:44Z		False				-1	tezos/tezos	1881
gid://gitlab/DiffNote/377209538		perfect, thanks !	sribar	2020-07-10T10:43:45Z		False				0	tezos/tezos	1881
gid://gitlab/DiffNote/377210437		"There is nothing to do that yet, since the exceptions that Tezt raise are not meant to be caught.

I have made a new commit to help test for errors: https://gitlab.com/tezos/tezos/-/merge_requests/1881/diffs?commit_id=7dc747e666b8a66cce70a9e879b8a98d0b41ff23

See the discussion with Sylvain here: https://gitlab.com/tezos/tezos/-/merge_requests/1881#note_374011846"	romain.nl	2020-07-10T10:44:53Z		False				-2	tezos/tezos	1881
gid://gitlab/DiffNote/377211992		"I made a commit to allow users to test errors: https://gitlab.com/tezos/tezos/-/merge_requests/1881/diffs?commit_id=7dc747e666b8a66cce70a9e879b8a98d0b41ff23 (new version: https://gitlab.com/tezos/tezos/-/merge_requests/1881/diffs?commit_id=de644cba489cd6dfb2418d162c60e77cb14f046d)

- `Process.Failed` is no longer exposed, it was a mistake (it was initially needed so that `Test.run` could catch it but now it does it differently).
- Added `Process.check`.
- Added variants for all commands: for instance there is `bake_for` (same as before) and also `spawn_bake_for`.

The `spawn_` versions of commands can be combined with `Process.check` to get the same behavior as the non-`_spawn` version. Or they can be used to read `stderr`, `stdout`, and the exit code."	romain.nl	2020-07-10T10:47:15Z		False				-2	tezos/tezos	1881
gid://gitlab/DiffNote/377220320		"That seems to be a pretty good way to go ! 
thanks"	sribar	2020-07-10T11:00:46Z		False				0	tezos/tezos	1881
gid://gitlab/DiffNote/377224252		"For me I think Romain solved the issue

I'm closing this thread but you can open a new one if you think the discussion needs to be continued"	sribar	2020-07-10T11:07:05Z		False				-1	tezos/tezos	1881
gid://gitlab/DiffNote/377225575		top	sribar	2020-07-10T11:09:20Z		False				-1	tezos/tezos	1881
gid://gitlab/DiffNote/380603397		Could be replaced by `Option.map open_out`	arvidnl	2020-07-16T11:04:14Z		False				0	tezos/tezos	1881
gid://gitlab/DiffNote/380634239		Done (fixed up into https://gitlab.com/tezos/tezos/-/merge_requests/1881/diffs?commit_id=10884eac71725cdd09b2350928c5d1d1476cd5bd#41bd684c70d7c72743903149d2dd984658e3f3ed)	romain.nl	2020-07-16T11:58:14Z		False				-2	tezos/tezos	1881
gid://gitlab/DiffNote/380676218		"I find this option a bit confusing (not sure what it will be used for: to get some extra verbosity but not too much?)

Just to understand, if the the logged messages (not necessarily output due to loglevel) are:

    MSG_OUTPUT_0
    MSG_IGNORED_1
    MSG_IGNORED_2
    MSG_IGNORED_3
    MSG_OUTPUT_4

and `log_buffer_size` is 2 then the output is:

    MSG_OUTPUT_0
    MSG_IGNORED_2
    MSG_IGNORED_3
    MSG_OUTPUT_4

?"	arvidnl	2020-07-16T13:06:09Z		False				-1	tezos/tezos	1881
gid://gitlab/DiffNote/380704064		"Yes, it's exactly that, assuming `MSG_OUTPUT_4` has level ""error"".

The goal is to see a clean, terse output, such as:
```
[13:38:34.878] [SUCCESS] node initialization (archive mode)
[13:38:36.609] [SUCCESS] node initialization (full mode)
[13:38:38.275] [SUCCESS] node initialization (rolling mode)
```
except if there is an error, in which case we want to see what happened before the error occurred:
```
[13:41:46.837] [SUCCESS] node initialization (archive mode)
[13:41:48.460] [SUCCESS] node initialization (full mode)
[13:41:49.080] [client1] ./tezos-client -P 19733 --base-dir /tmp/tezt-21799/client1 bake for bootstrap1 --minimal-timestamp
[13:41:49.080] [client1] Error:
[13:41:49.080] [client1]   Unrecognized command.
[13:41:49.080] [client1]   Try using the man command to get more information.
[13:41:49.080] client1 exited with code 1.
[13:41:49.080] [error] client1 exited with code 1 (full command: ./tezos-client -P 19733 --base-dir /tmp/tezt-21799/client1 bake for bootstrap1 --minimal-timestamp)
[13:41:49.097] [FAILURE] node initialization (rolling mode)
[13:41:49.097] Try again with: tezt/tests/main.exe --verbose --test 'node initialization (rolling mode)'
```

Since we don't know whether we will display a log message before there is an error, we have to buffer them. We buffer all messages since the last message that was displayed (otherwise we would get a weird message order). Option `--log-buffer-size` controls the size of this buffer.

It is useful when you run tests manually (where the default log buffer size is 50, which should often be enough without polluting your terminal too much), but also when you run tests in the CI. The CI has a limit on the size of the logs (about 5Mo I think). By only displaying log messages in case of an error, we ensure that we won't reach this limit (the log buffer size is set to 5000 for the CI).

I'm open to suggestions to make this option easier to understand (including changing its name). It took me a while to find a way to formulate what it does precisely and in a concise way for `--help` though ^^"	romain.nl	2020-07-16T13:48:32Z		False				-2	tezos/tezos	1881
gid://gitlab/DiffNote/380796805		"Okay okay, it makes sense to me. However, I'm not a fan of the output, wouldn't you rather like to have something like:

```
[13:41:46.837] [SUCCESS] node initialization (archive mode)
[13:41:48.460] [SUCCESS] node initialization (full mode)
[13:41:49.097] [FAILURE] node initialization (rolling mode)
[13:41:49.097]    Last X logs:
[13:41:49.080]       <previous messages pruned>
[13:41:49.080]       [client1] ./tezos-client -P 19733 --base-dir /tmp/tezt-21799/client1 bake for bootstrap1 --minimal-timestamp
[13:41:49.080]       [client1] Error:
[13:41:49.080]       [client1]   Unrecognized command.
[13:41:49.080]       [client1]   Try using the man command to get more information.
[13:41:49.080]       client1 exited with code 1.
[13:41:49.080]       [error] client1 exited with code 1 (full command: ./tezos-client -P 19733 --base-dir /tmp/tezt-21799/client1 bake for bootstrap1 --minimal-timestamp)
[13:41:49.097] Try again with: tezt/tests/main.exe --verbose --test 'node initialization (rolling mode)'
``` 

Might complicate stuff a bit though."	arvidnl	2020-07-16T15:31:43Z		False				-1	tezos/tezos	1881
gid://gitlab/DiffNote/380843033		"It would complicate a bit but probably not very much.

I prefer to have the `[FAILURE]` at the end, so that we can easily scroll down to the end of the logs to see the status of the test. Especially because in `Last X logs:`, the value of `X` can be as high as `5000` :p I guess it's a matter of preference."	romain.nl	2020-07-16T16:28:05Z		False				-2	tezos/tezos	1881
gid://gitlab/DiffNote/380845349		Also, I tried to make outputs consistent, even with various command-line options. I like the fact that `--log-buffer-size` just causes some lines to be shown instead of moving things around. I feel that it is less surprising.	romain.nl	2020-07-16T16:32:12Z		False				-2	tezos/tezos	1881
gid://gitlab/DiffNote/320294209		"you can remove a few empty lines here :)

(in fact I think ocamlformat will not be happy)"	romain.nl	2020-04-08T15:10:35Z		False				0	tezos/tezos	1740
gid://gitlab/DiffNote/320296683		You could probably put this in `make_section` itself.	romain.nl	2020-04-08T15:12:03Z		False				0	tezos/tezos	1740
gid://gitlab/DiffNote/320297503		"```suggestion:-0+0
    by the `Simple` module and the `Legacy_logging` module. *)
```"	romain.nl	2020-04-08T15:12:48Z		False				0	tezos/tezos	1740
gid://gitlab/DiffNote/320301876		"It's a bit unfortunate that we have to do that here, it would be better if it was done by the construction of the `Internal_event.EVENT` that is stored in `worker.logEvent`. But the section is not actually known at this point.

(I don't think you can do anything about that in this MR; feel free to convert into an issue if you want!)"	romain.nl	2020-04-08T15:16:59Z		False				0	tezos/tezos	1740
gid://gitlab/DiffNote/320313385		Fix in 084a80682 . Actually, I did not realized that `ocamlformat` was not running because of an error...	Saroupille	2020-04-08T15:32:14Z		False				-2	tezos/tezos	1740
gid://gitlab/DiffNote/320314771		Fix in 084a80682	Saroupille	2020-04-08T15:34:08Z		False				-2	tezos/tezos	1740
gid://gitlab/DiffNote/320314872		fix in 084a80682	Saroupille	2020-04-08T15:34:17Z		False				-2	tezos/tezos	1740
gid://gitlab/DiffNote/320318952		I propose to do that in another MR (see nomadic-labs/tezos#135).	Saroupille	2020-04-08T15:40:10Z		False				-2	tezos/tezos	1740
gid://gitlab/DiffNote/339670645		`unsafe_of_string`	vbmithr	2020-05-10T14:50:17Z		False				-1	tezos/tezos	1791
gid://gitlab/DiffNote/340264486		in any case there is no point is doing an allocation with `copy` and then use `fast_box_noalloc` later, it's clearer to just use `fast_box`.	paracetamolo	2020-05-11T14:24:46Z		False				-1	tezos/tezos	1791
gid://gitlab/DiffNote/340277832		boxzerobytes and zerobytes should be documented better in hacl.mli if they are still needed.	paracetamolo	2020-05-11T14:42:22Z		False				-1	tezos/tezos	1791
gid://gitlab/DiffNote/340280610		not sure why these are prefixed by `fast_`, they just seem the `_noalloc` version.	paracetamolo	2020-05-11T14:45:43Z		False				6	tezos/tezos	1791
gid://gitlab/DiffNote/340319118		`blockbytes` and `statebytes` should be documented	paracetamolo	2020-05-11T15:35:49Z		False				-1	tezos/tezos	1791
gid://gitlab/DiffNote/340319520		I would rename the `bytes` field in all the modules `length` or `size`.	paracetamolo	2020-05-11T15:36:26Z		False				-1	tezos/tezos	1791
gid://gitlab/DiffNote/340322755		is there a reason why blake2b is treated differently than other hashes?	paracetamolo	2020-05-11T15:40:57Z		False				3	tezos/tezos	1791
gid://gitlab/DiffNote/340323988		This signature is a subset of `S`, we could make a `S` with the minimal stuff and `Incremental` with the  rest. Thoughts?	paracetamolo	2020-05-11T15:42:47Z		False				1	tezos/tezos	1791
gid://gitlab/DiffNote/340337767		what difference would it make in this case to use the incremental interface?	paracetamolo	2020-05-11T16:02:19Z		False				-1	tezos/tezos	1791
gid://gitlab/DiffNote/341821324		not sure if the performance gain is important in tests	paracetamolo	2020-05-13T14:16:55Z		False				0	tezos/tezos	1791
gid://gitlab/DiffNote/342545133		No, HACL* doesn't provide an incremental interface for Blake2b but here using the direct interface is equivalent.	victor-dumitrescu	2020-05-14T13:03:28Z		False				-2	tezos/tezos	1791
gid://gitlab/DiffNote/342545700		"The Box API in HACL* has changed and no longer requires 0-padding, which is what zerobytes and boxzerobytes refer to in the original NaCl API. When using the ""easy"" interface, the tag is written in the same buffer as the ciphertext, so I thought using tag_length would be clearer."	victor-dumitrescu	2020-05-14T13:04:00Z		False				-2	tezos/tezos	1791
gid://gitlab/DiffNote/342546578		Looking at how `write_chunk` is used I also think it would be safe to overwrite the buffer so I made the suggested change. Perhaps someone else should also double check this?	victor-dumitrescu	2020-05-14T13:04:57Z		False				-2	tezos/tezos	1791
gid://gitlab/DiffNote/342546972		No, HACL* doesn't provide an incremental interface for SHA3.	victor-dumitrescu	2020-05-14T13:05:25Z		False				-2	tezos/tezos	1791
gid://gitlab/DiffNote/342548170		They're not, I removed all mentions of zerobytes and boxzerobytes.	victor-dumitrescu	2020-05-14T13:06:50Z		False				-2	tezos/tezos	1791
gid://gitlab/DiffNote/342548865		I kept the names from the previous bindings, where `fast_box` is just box. The noalloc versions don't allocate a buffer for the ciphertext, instead writing it in the plaintext buffer, with the tag written in a separate buffer. I have now documented this is both `hacl.mli` and `crypto_box.mli`.	victor-dumitrescu	2020-05-14T13:07:44Z		False				-2	tezos/tezos	1791
gid://gitlab/DiffNote/342549283		These were actually not used anywhere and indeed users are never expected to manipulate these values so I removed them from the interface.	victor-dumitrescu	2020-05-14T13:08:11Z		False				-2	tezos/tezos	1791
gid://gitlab/DiffNote/342550066		Actually probably not really, I just copied over the original definition in vendors. The fact that this is then heavily used in other places made me not want to change it, but we can discuss.	victor-dumitrescu	2020-05-14T13:09:15Z		False				-2	tezos/tezos	1791
gid://gitlab/DiffNote/342550562		I think this would be sensible, not yet sure how it affects things downstream.	victor-dumitrescu	2020-05-14T13:09:55Z		False				-2	tezos/tezos	1791
gid://gitlab/DiffNote/342676362		@vbmithr why `<` instead of `<>` ? it would also simplify the then case.	paracetamolo	2020-05-14T15:34:34Z		False				0	tezos/tezos	1791
gid://gitlab/DiffNote/342678722		"```suggestion:-0+0
  let to_bytes pk = Bytes.copy (Sign.unsafe_to_bytes pk)
```"	paracetamolo	2020-05-14T15:37:34Z		False				0	tezos/tezos	1791
gid://gitlab/DiffNote/342681573		same comment as above. Plus I would make `of_string_opt` use `of_bytes_opt` to avoid duplication	paracetamolo	2020-05-14T15:41:03Z		False				0	tezos/tezos	1791
gid://gitlab/DiffNote/343025034		"```suggestion:-0+0
```"	paracetamolo	2020-05-15T06:38:04Z		False				0	tezos/tezos	1791
gid://gitlab/DiffNote/343026083		"```suggestion:-0+0
      let pk = Bytes.create Sign.pkbytes in

```
we are sure to write pkbytes bytes"	paracetamolo	2020-05-15T06:40:20Z		False				0	tezos/tezos	1791
gid://gitlab/DiffNote/343036677		"```suggestion:-0+0
      match Bip39.index_of_word (Bytes.to_string word) with
```

same semantics as before and easier to read"	paracetamolo	2020-05-15T07:02:32Z		False				0	tezos/tezos	1791
gid://gitlab/DiffNote/343037399		same as above	paracetamolo	2020-05-15T07:04:03Z		False				0	tezos/tezos	1791
gid://gitlab/DiffNote/343042588		do they need to be 0s with the new interface? not a big deal	paracetamolo	2020-05-15T07:13:51Z		False				0	tezos/tezos	1791
gid://gitlab/DiffNote/343044236		same as above	paracetamolo	2020-05-15T07:16:41Z		False				0	tezos/tezos	1791
gid://gitlab/DiffNote/343046957		same as above	paracetamolo	2020-05-15T07:21:33Z		False				0	tezos/tezos	1791
gid://gitlab/DiffNote/343047810		same as above	paracetamolo	2020-05-15T07:23:00Z		False				0	tezos/tezos	1791
gid://gitlab/DiffNote/343056276		these 4 functions need a `Bytes.copy` to have the same semantics as before	paracetamolo	2020-05-15T07:37:03Z		False				0	tezos/tezos	1791
gid://gitlab/DiffNote/343068237		another `Bytes.copy`	paracetamolo	2020-05-15T07:56:18Z		False				0	tezos/tezos	1791
gid://gitlab/DiffNote/343069497		why the 64? shouldn't it be exactly `skbytes` long?	paracetamolo	2020-05-15T07:58:28Z		False				0	tezos/tezos	1791
gid://gitlab/DiffNote/343106258		You might want to read from a longer buffer… But then I agree that the function should then enable to select the position where to read it… `of_string ?pos` basically…	vbmithr	2020-05-15T08:46:17Z		False				0	tezos/tezos	1791
gid://gitlab/DiffNote/343109185		It should be clear from the names of the functions whether or not a copy is made or not	vbmithr	2020-05-15T08:48:10Z		False				0	tezos/tezos	1791
gid://gitlab/DiffNote/343116326		At some point we were retrocompatible with `Libsodium` secret key format which was actually a concatenation of pk and sk… so we sometimes had 64 bytes secret keys, that is when people still had config files dating from very early Tezos versions.	vbmithr	2020-05-15T08:52:30Z		False				0	tezos/tezos	1791
gid://gitlab/DiffNote/343118997		`Sign.unsafe_sk_of_bytes` actually requires it to be exactly skbytes long so I guess that's no longer the case.	victor-dumitrescu	2020-05-15T08:54:06Z		False				-2	tezos/tezos	1791
gid://gitlab/DiffNote/343124910		Ok then you can probably forget about the len = 64 stuff	vbmithr	2020-05-15T08:58:01Z		False				0	tezos/tezos	1791
gid://gitlab/DiffNote/344454462		We could have a `Box.to_bytes`. In a future MR.	paracetamolo	2020-05-18T13:11:29Z		False				-1	tezos/tezos	1791
gid://gitlab/DiffNote/344513394		We should rename all these `*bytes` filds to *_size`. For a future MR.	paracetamolo	2020-05-18T14:19:48Z		False				-1	tezos/tezos	1791
gid://gitlab/DiffNote/344975809		bad naming, it's not called diffie-hellman in the NaCl api, not sure we should.	paracetamolo	2020-05-19T08:29:18Z		False				-1	tezos/tezos	1791
gid://gitlab/DiffNote/345303879		Looks good to me.	paracetamolo	2020-05-19T15:24:23Z		False				-1	tezos/tezos	1791
gid://gitlab/DiffNote/319508660		"Note: maybe it's better to have the top error in a separate field but

(1) it's redundant information, and  
(2) if it is still better to have the top error then it might be better to present it as an error (`error_encoding`) rather than a string (`Data_encoding.string`).

In my opinion, the redundancy is not needed. Counter-points?"	raphael-proust	2020-04-07T20:20:09Z		False				-2	tezos/tezos	1734
gid://gitlab/DiffNote/319557035		I restored it so as to preserve the error message	raphael-proust	2020-04-07T21:59:06Z		False				-2	tezos/tezos	1734
gid://gitlab/DiffNote/344646302		Nit: using `trace` as a name is a better indication of what value the variable actually holds.	raphael-proust	2020-05-18T17:21:05Z		False				0	tezos/tezos	1770
gid://gitlab/DiffNote/344646304		The test I added passes even we remove this step naming mechanism. Is it necessary? Isn't the `mu` mechanism separate from the `registration` mechanism?	raphael-proust	2020-05-18T17:21:05Z		False				0	tezos/tezos	1770
gid://gitlab/DiffNote/345004899		"I think the issue is when you combine this with JSON schemas. If you generate the JSON schema for the error encoding, it requires different names for each ""version"" of the error encoding you generate; and there are several versions for some reason (probably because the encoding is used before it is completely defined).

Which may also mean that if you declare a recursive error `R`, have the encoding be created (`enc1`), then register another error `E`, the JSON schema for `enc1` may not allow to use `E` in `R`… Also, in the JSON schema we see the several ""versions"" of the error encoding, unfortunately.

And this is why this MR is still WIP. We could merge it if we believe that `consequence of bad union` is worse than an ugly JSON schema, but I want to be sure that we merge knowing that. I did not really investigate how hard it would be to have JSON schema be able to extend the definition of an existing type. Maybe it's just a matter of replacing the check ""one can only redefine a schema with the same name if the encoding is the same"" by a more lenient check ""one can only redefine a schema with the same name if the new encoding is a compatible extension of the existing one""?"	romain.nl	2020-05-19T09:03:51Z		False				-2	tezos/tezos	1770
gid://gitlab/DiffNote/345009962		Done, thanks!	romain.nl	2020-05-19T09:10:48Z		False				-2	tezos/tezos	1770
gid://gitlab/DiffNote/345012797		"I'll update the test to also generate json schemas.

In practice, I think that most of the errors will be registered before we generate any json schema. The only exception I think might happen is when we register a new protocol (`<Proto>`) which registers a new `<Proto>.Ecoproto_error of <Proto>.Error_monad.error list`."	raphael-proust	2020-05-19T09:14:57Z		False				0	tezos/tezos	1770
gid://gitlab/DiffNote/347185436		Thanks for the new test :)	romain.nl	2020-05-22T08:15:04Z		False				-2	tezos/tezos	1770
gid://gitlab/DiffNote/351727413		"Whilst investigating this chunk specifically…

I think that `Economic_protocol_error` only ever carries errors from the protocol that are wrapped in `Ecoproto_error`. However, I cannot find a registration for `Ecoproto_error`. I have doubts that the encoding defined in this chunk would succeed, because of that other encoding missing."	raphael-proust	2020-05-29T11:00:59Z		False				-1	tezos/tezos	1770
gid://gitlab/DiffNote/351789091		"It looks like it is using the so-called ""wrapped error"" mechanism to register it (in `environment_V0.ml`, line 545):
```
  let () =
    let id = Format.asprintf ""proto.%s.wrapper"" Param.name in
    register_wrapped_error_kind
      (module Wrapped_error_monad)
      ~id
      ~title:(""Error returned by protocol "" ^ Param.name)
      ~description:(""Wrapped error for economic protocol "" ^ Param.name ^ ""."")
```
In fact, maybe we could use this wrapped error mechanism to register `Economic_protocol_error` instead of using recursive errors, because I don't think we'll ever see an `Economic_protocol_error` inside an `Economic_protocol_error`. I'm not sure though because I'm not sure of the semantics of wrapped errors.

The use case that motivated this MR was the consequence of bad union you get when you run `activate protocol` with the wrong activation key. With this MR, it displays the correct ""invalid signature"" error. So, at least some errors are correctly encoded now. But maybe some other errors are not registered?"	romain.nl	2020-05-29T12:32:05Z		False				-2	tezos/tezos	1770
gid://gitlab/DiffNote/351821831		"Oh yes, you're write, it's using `register_wrapped_error_kind` but not registering the error directly.

So there are two things to consider:

- Can we provide a solution to the problem that originally motivated this work, without resorting to recursive errors?

- If so, is it worth supporting recursive errors anyway? Specifically, it could be use for managing the errors raised during: concurrent processing on lists (`iter_p` and friends) and error bundles in michelson parsing (`src/lib_micheline/micheline_parser.ml` abuses traces as sets of errors)."	raphael-proust	2020-05-29T13:13:13Z		False				-1	tezos/tezos	1770
gid://gitlab/DiffNote/359612819		During the last shell meeting, @julien.t confirmed he had a use case for recursive errors.	romain.nl	2020-06-11T14:15:47Z		False				-2	tezos/tezos	1770
gid://gitlab/DiffNote/362045326		This is now somewhat off-topic / a side concern.	raphael-proust	2020-06-16T12:51:30Z		False				-1	tezos/tezos	1770
gid://gitlab/DiffNote/371098502		We could produce the `mu` only if there is at least one `Recursive`, but guess it's fine as is.	klakplok	2020-06-30T17:10:17Z		False				-1	tezos/tezos	1770
gid://gitlab/DiffNote/371098835		"This is very weird code.

I mean, the original code is already weird, as I suppose the singleton union is only there to ""cast"" from case to encoding, but this one is especially weird.

This function is only there for producing the documentation, so I guess it's fine, but a cleanup refactoring when someone has the time wouldn't hurt."	klakplok	2020-06-30T17:10:33Z		False				-1	tezos/tezos	1770
gid://gitlab/DiffNote/374823830		Should we do a sanity check on `Prefix.id`? I'm thinking just failing hard if `Prefix.id` contains weird characters for some value of “weird” (non-printable? white-space? non-ASCII?)	raphael-proust	2020-07-07T09:27:13Z		False				0	tezos/tezos	1770
gid://gitlab/DiffNote/374823834		"Could we here pass something along the lines of a reference to the whole-error id?

The idea would be to generate a schema that gives a reference to the top-level error. This might be possible with something along the lines of

```
let trick =
  conv (* just so we can sneak in a schema *)
    (fun _ -> ())
    (fun () -> assert false)
    ~schema:<hand-crafted-schema-here>
    unit
in
Data_encoding.Json.schema
  Data_encoding.union [make_encoding_case trick]
```"	raphael-proust	2020-07-07T09:27:14Z		False				-1	tezos/tezos	1770
gid://gitlab/DiffNote/374823838		This part is inherited from the previous version. But it's not very good. As a compromise, I'll open an issue to get that fixed later.	raphael-proust	2020-07-07T09:27:14Z		False				-1	tezos/tezos	1770
gid://gitlab/DiffNote/374824606		I'll try it out	raphael-proust	2020-07-07T09:28:11Z		False				-1	tezos/tezos	1770
gid://gitlab/DiffNote/374940035		"Additionally, I noticed that the prefixes that are passed to the functor all end with a dot (`src/lib_protocol_environment/environment_V0.ml`, line 499). So the dash is not necessary for us.

Maybe we can change the way prefixes are passed: as a list of string that represent a kind of ""path"" (`[ ""proto""; ""alpha""]`)?"	raphael-proust	2020-07-07T11:52:57Z		False				0	tezos/tezos	1770
gid://gitlab/DiffNote/374940039		It already has a satisfying output when describing errors.	raphael-proust	2020-07-07T11:52:57Z		False				-1	tezos/tezos	1770
gid://gitlab/DiffNote/374950256		Fixed in most recent commit. Please review and check that it does what you had in mind.	raphael-proust	2020-07-07T12:08:26Z		False				-1	tezos/tezos	1770
gid://gitlab/DiffNote/374950259		"I think we need a big refactoring. One thing we should leverage is that encodings for errors are json-only. (The binary encoder is just a wrapper around the json one: `conv (Json.construct e) (Json.destruct e) json`.)

I'm opening an issue as a follow up and resolving this thread."	raphael-proust	2020-07-07T12:08:26Z		False				-1	tezos/tezos	1770
gid://gitlab/DiffNote/317410348		"The later `COPY --chown=tezos:nogroup --from=intermediate /home/tezos/scripts/ /usr/local/share/tezos` does not work with an absolute link here
`"	pirbo	2020-04-03T18:31:52Z		False				0	tezos/tezos	1719
gid://gitlab/DiffNote/317622553		"This still mentions ""alphanet"" twice. I think the name of the `michelson-alphanet` option should be changed in `michelson-mode.el` and I don't really understand the last sentence so I don't know what to do with it."	rafoo_	2020-04-04T13:53:16Z		False				0	tezos/tezos	1719
gid://gitlab/DiffNote/318410508		Replaced by a relative link.	romain.nl	2020-04-06T12:33:32Z		False				-2	tezos/tezos	1719
gid://gitlab/DiffNote/318411379		"Thank you, I updated the second occurrence (I had missed it).

I did not change the Emacs function name though, I fear I may disrupt the workflow of some users."	romain.nl	2020-04-06T12:34:32Z		False				-2	tezos/tezos	1719
gid://gitlab/DiffNote/318906633		"This value is exported in `lib_rpc/RPC_encoding.mli`. 
Would the dependencies allow to use it instead of modifying this interface ?"	richard.bonichon	2020-04-07T06:21:09Z		False				0	tezos/tezos	1720
gid://gitlab/DiffNote/352946499		The license preamble is missing here.	igarnier	2020-06-01T14:22:55Z		False				3	tezos/tezos	1790
gid://gitlab/DiffNote/352946643		The license preamble is missing on this file as well.	igarnier	2020-06-01T14:23:08Z		False				1	tezos/tezos	1790
gid://gitlab/DiffNote/352951759		Nit: I would rename this `chain_id_seed_arg` (same in `proto_alpha`)	igarnier	2020-06-01T14:31:02Z		False				0	tezos/tezos	1790
gid://gitlab/DiffNote/354235441		There I fixed it.	smelc	2020-06-03T08:20:13Z		False				3	tezos/tezos	1790
gid://gitlab/DiffNote/354235525		There I fixed it.	smelc	2020-06-03T08:20:17Z		False				1	tezos/tezos	1790
gid://gitlab/DiffNote/354245397		I changed that.	smelc	2020-06-03T08:27:43Z		False				0	tezos/tezos	1790
gid://gitlab/DiffNote/358723200		I don't see in the code that it returns `Chain_id.zero` when `sopt` is `None`; I think it returns `None` in this case.	rafoo_	2020-06-10T11:50:14Z		False				-1	tezos/tezos	1790
gid://gitlab/DiffNote/358727427		I think you could use `mapi` for this.	rafoo_	2020-06-10T11:56:09Z		False				-1	tezos/tezos	1790
gid://gitlab/DiffNote/358735196		None of the functions of this module seem to ever fail; I don't see any benefit of putting them in the monad.	rafoo_	2020-06-10T12:04:37Z		False				0	tezos/tezos	1790
gid://gitlab/DiffNote/358751981		"I think the word ""parameter"" is used with two different meanings in these two sentences; this might be a bit confusing. Maybe use ""mockup parameter"" and ""command-line parameter"" instead."	rafoo_	2020-06-10T12:17:00Z		False				0	tezos/tezos	1790
gid://gitlab/DiffNote/358763655		"I see two ways of querying the chain id but both have limitations:
- `mockup_client rpc get /chains/main/chain_id` limitation: depends on !1856 
- `mockup_client run script 'parameter unit; storage chain_id; code {DROP; CHAIN_ID; NIL operation; PAIR}' on storage 0x00000000 and input Unit` limitation: the output uses the so-called optimized 4-byte representation (fixed in https://gitlab.com/metastatedev/tezos/-/merge_requests/192)."	rafoo_	2020-06-10T12:29:29Z		False				0	tezos/tezos	1790
gid://gitlab/DiffNote/358774725		If we want to test that `chain_id` was correctly consumed, we can also wait for !1787 to have been merged as `config {init,show} mockup` will log `chain_id`. Hence augmenting !1787's [roundtrip test](https://gitlab.com/tezos/tezos/-/blob/653221caf948b659fde9b4b86705386f67eeca40/tests_python/tests/test_mockup.py#L465) (pass custom data with `--protocol-constants`, print it back using `config {show,init} mockup`, recreate mockup from this data, check everything is the same) so that it passes a custom `chain_id` will do the check we're talking about here.	smelc	2020-06-10T12:44:28Z		False				0	tezos/tezos	1790
gid://gitlab/DiffNote/358862680		Indeed. The documentation was not synced correctly with the code.	richard.bonichon	2020-06-10T14:30:28Z		False				-2	tezos/tezos	1790
gid://gitlab/DiffNote/358862685		"It used to be that way when `Client_keys.make_sk_uri` was not in the `tzresult Lwt.t` monad.
But, because of the change, the mapping function now has type `int -> string ->  bootstrap_secret tzresult Lwt.t`, so that `mapi` would return type  `bootstrap_secret tzresult Lwt.t list` and not the `bootstrap_secret list tzresult Lwt.t` type I'm after. `Lwt_list.mapi_{s,p}` exhibit the same kind of ""issue"". I have not found a library function that allows the kind of monad / list exchange that this here needs."	richard.bonichon	2020-06-10T14:30:29Z		False				-2	tezos/tezos	1790
gid://gitlab/DiffNote/358862690		I've updated these lines to follow your comments.	richard.bonichon	2020-06-10T14:30:29Z		False				-2	tezos/tezos	1790
gid://gitlab/DiffNote/358862691		This is indeed true.	richard.bonichon	2020-06-10T14:30:29Z		False				-2	tezos/tezos	1790
gid://gitlab/DiffNote/360331551		I was talking about `Error_monad.mapi_s : (int -> 'a -> 'b tzresult Lwt.t) -> 'a list -> 'b list tzresult Lwt.t`	rafoo_	2020-06-12T15:06:09Z		False				-1	tezos/tezos	1790
gid://gitlab/DiffNote/360334736		!1787 is merged, let's do this.	rafoo_	2020-06-12T15:11:01Z		False				0	tezos/tezos	1790
gid://gitlab/DiffNote/361156491		Fair enough. It's done	richard.bonichon	2020-06-15T11:57:09Z		False				-2	tezos/tezos	1790
gid://gitlab/DiffNote/361261122		Ok this is now addressed as well	richard.bonichon	2020-06-15T13:49:54Z		False				-2	tezos/tezos	1790
gid://gitlab/DiffNote/361344953		"```suggestion:-0+0
        and returns the computed chain id.
```"	rafoo_	2020-06-15T15:05:30Z		False				0	tezos/tezos	1790
gid://gitlab/DiffNote/361356016		Can you please move this regexp parsing of the client output to client_output.py?	rafoo_	2020-06-15T15:09:35Z		False				0	tezos/tezos	1790
gid://gitlab/DiffNote/361366601		It would be nice to record the output for regression testing. You can do that either by using a list of input-output pairs or by following https://tezos.gitlab.io/developer/python_testing_framework.html#regression-testing.	rafoo_	2020-06-15T15:14:43Z		False				0	tezos/tezos	1790
gid://gitlab/DiffNote/341757841		This looks like very generic code; might be better to move it to tools/utils.py. What do you think about this @bidinger?	rafoo_	2020-05-13T13:01:00Z		False				3	tezos/tezos	1746
gid://gitlab/DiffNote/341760771		"```suggestion:-0+0
@pytest.mark.skip(""depends on !1760"")  # Test is skipped for now because it depends
```"	rafoo_	2020-05-13T13:04:07Z		False				0	tezos/tezos	1746
gid://gitlab/DiffNote/341776622		"yes, it could go in `tools/utils.py` (but I think it's fine here too if it's not used anywhere else) but I wonder if it's needed in the first place. If I understand well, the purpose is to avoid generating the full list of split elements to save space. But do we really need this optimization in a test? Where there any performance issue with `string.split(sep)`?

(Also sometimes python library functions are much faster than clever re-implementations, even if asymptotic complexity seems bad.)"	bidinger	2020-05-13T13:23:43Z		False				3	tezos/tezos	1746
gid://gitlab/DiffNote/341780720		"Yes the point is to avoid generating the whole list of lines coming from the output.

I didn't want to allocate the whole list as I thought the output could grow large in the future and this test would be impacted uselessly, since the output it's looking lies in the first lines.

However, using a library function like `string.split` would be totally fine to me."	smelc	2020-05-13T13:29:00Z		False				-2	tezos/tezos	1746
gid://gitlab/DiffNote/341782288		This lacks comments. Just by glimpsing at this file, it's not obvious to me what it is testing. Could you add a docstrings for the module and each individual test?	bidinger	2020-05-13T13:31:04Z		False				1	tezos/tezos	1746
gid://gitlab/DiffNote/341794344		I would stick to `str.split`. It'll make the code easier to read and probably not impact performance.	bidinger	2020-05-13T13:45:43Z		False				3	tezos/tezos	1746
gid://gitlab/DiffNote/341796821		do you really need to split the output before searching for this regexp?	bidinger	2020-05-13T13:48:44Z		False				0	tezos/tezos	1746
gid://gitlab/DiffNote/341801226		"the `client.py` module shouldn't be aware that it is used for testing. It's a generic tezos-client wrapper, so mentioning tests here makes it more specific than what it should be.

Also there are way in pytest to test that a client call fails. 

See for instance `test_basic.py` for an example 
```
 with pytest.raises(client_output.InvalidClientOutput) as exc:
            client.rpc('get', path)
```

So you may be able to use the normal `transfer` command and test its failure from within `pytest`"	bidinger	2020-05-13T13:54:10Z		False				-1	tezos/tezos	1746
gid://gitlab/DiffNote/341803513		I've added comments in 8d68dc1fed32b26dfb581a40b3540c2eda513aa9.	smelc	2020-05-13T13:56:28Z		False				-2	tezos/tezos	1746
gid://gitlab/DiffNote/341812865		"I think this `base_dir` complexifies the `client` API a little bit. I'm wondering if there could be a more elegant solution.

Could we use instead a subclass `ClientMockup` that would redefine the base dir?"	bidinger	2020-05-13T14:07:56Z		False				-1	tezos/tezos	1746
gid://gitlab/DiffNote/341813048		":100: Indeed! This is an artifact of a previous version where multiple lines were being matched.

I've removed the loop and `_split_yielder` and its test in 42a86b19f1d30a72f8e3e337affb69fcacf6ac80."	smelc	2020-05-13T14:08:10Z		False				-2	tezos/tezos	1746
gid://gitlab/DiffNote/341827917		"I've removed `transfer_ko` altogether in d0e1c02c94d5887a060ac2b0927f8bfba47494bf. Indeed it was useless and a 
direct call to `run_generic` is simpler."	smelc	2020-05-13T14:24:29Z		False				-2	tezos/tezos	1746
gid://gitlab/DiffNote/341868520		"I don't see an obvious simpler way to do, I think the optional `base_dir` solution KISS.

Some mockup tests use a custom base_dir (i.e. pass `base_dir` to all calls done to methods in `client.py`), some mockup tests use the default base_dir created by `Client`'s `__init__`. So there's no good default behavior.

Also many mockup tests craft a custom base dir before doing a call to a method in `client.py`, which is something that would need to be done before the creation of `Client` if we wanted to have a subclass. This crafting is currently done with python's `with` resource manager, which is nice. It'd cumbersome I believe to integrate that with building and cleaning up a custom instance of `Client`."	smelc	2020-05-13T15:05:22Z		False				-2	tezos/tezos	1746
gid://gitlab/DiffNote/341871202		What about a `set_base_dir` method in the `Client` that would be invoked  before the tests that need a custom base dir?	rafoo_	2020-05-13T15:07:25Z		False				-1	tezos/tezos	1746
gid://gitlab/DiffNote/341893691		"Before this MR, the base dir was invisible to the client methods 

I'm just wondering if we could somehow keep the same model because after this MR, there are two different mechanisms to deal with base dir
1. one base dir is optionally passed to the constructor (possibly cleaned up with `client.cleanup` if created by the client) 
2. the custom base dir which is passed to the methods themselves

I haven't looked into details to the mockup client, but I'm wondering if we could follow the same model as before. In particular not expose a base dir to the client methods and set it up in the constructor instead?

I'll look into more details."	bidinger	2020-05-13T15:25:48Z		False				-1	tezos/tezos	1746
gid://gitlab/DiffNote/341894692		mode isn't documented. You could also be more defensive and add some assertion `assert mode in {...}`	bidinger	2020-05-13T15:27:07Z		False				-1	tezos/tezos	1746
gid://gitlab/DiffNote/341900082		"The code is organized into three layers

```
1. daemons, client and codec
2. launchers
3. tests, examples, tools
```

In particular, the client shouldn't have access to `tools`. These constants are defined in the test and should be passed as parameters to the client.

Not only, you may want the client to use a different protocol, but a dependency to `tools` will hinder packaging the launchers part (see !1472)."	bidinger	2020-05-13T15:34:30Z		False				0	tezos/tezos	1746
gid://gitlab/DiffNote/342308590		"> mode isn't documented

Good point.

> You could also be more defensive and add some assertion assert mode in {...}

According to !1499 (see the ""potential future modes"" section in the description), experimenting on several new client modes seems planed for the near future and we don't really know yet which will be the most interesting ones so I would be in favor of not trying to establish a fixed list of modes right now. 
@igarnier and @klakplok know probably more on this topic."	rafoo_	2020-05-14T08:50:13Z		False				-1	tezos/tezos	1746
gid://gitlab/DiffNote/342322397		"The next mode is going to be ""proxy"", there's also the vanilla ""client"" mode which does nothing."	igarnier	2020-05-14T09:08:22Z		False				-1	tezos/tezos	1746
gid://gitlab/DiffNote/342339880		We can always add modes in the assertion as they are introduced. I don't have a strong opinion on this detail, but overall, the most defensive the better.	bidinger	2020-05-14T09:26:33Z		False				-1	tezos/tezos	1746
gid://gitlab/DiffNote/342353791		I've moved this reference to `test_mockup.py` in cb0a0887.	smelc	2020-05-14T09:44:11Z		False				-2	tezos/tezos	1746
gid://gitlab/DiffNote/342354952		I've added the check in cb0a0887. Like @bidinger, I think the most defensive the better. If we need to change it in the future, it'll be easy to understand it.	smelc	2020-05-14T09:45:50Z		False				-2	tezos/tezos	1746
gid://gitlab/DiffNote/342356787		I've removed all `base_dir` fiddling from `client.py` in cb0a0887 and moved the burden to `test_mockup.py`, following @rafoo\_'s suggestion.	smelc	2020-05-14T09:48:15Z		False				-2	tezos/tezos	1746
gid://gitlab/DiffNote/315507769		"```suggestion:-0+0
            ""The storage of the multiple_entrypoints_counter contract should be None""
```"	rafoo_	2020-04-01T12:25:25Z		False				0	tezos/tezos	1707
gid://gitlab/DiffNote/316051451		Argh, your suggestion angered the linter ;)	arvidnl	2020-04-02T07:26:07Z		False				-2	tezos/tezos	1707
gid://gitlab/DiffNote/333672800		what will happen when new code without the explicit optional args (or curried as above) is introduced? In !1404 the CI jobs is set to `allow_failure: true`	tzemanovic	2020-04-29T12:38:52Z		False				-1	tezos/tezos	1714
gid://gitlab/DiffNote/333678249		"> In !1404 the CI jobs is set to `allow_failure: true`

In !1404, only the new CI job for computing the code coverage is allowed to fail. This is to produce a coverage report even though some test happens to fail.

The other ""regular"" test jobs on non-instrumented code are still not allowed to fail.

EDIT: I think I didn't understand your question!"	bidinger	2020-04-29T12:44:52Z		False				-1	tezos/tezos	1714
gid://gitlab/DiffNote/333707262		"If we wanted to enforce code to pass `bisect_ppx` instrumentation, we'd need to run the coverage job all the time and prevent failures from passing, but we don't want to run the job all the time as we consider it costly (that may change in the future).

> what will happen when new code without the explicit optional args (or curried as above) is introduced?

It will break the coverage job next time you run it.

Given that it occurs in very few places, I suggest that for now we do fix them manually if they ever happen.

For code in `proto_0*` that can't be changed and doesn't change, the solution will be to add an exclusion file to tell bisect_ppx to not instrument specific locations. For now we can just avoid instrumenting these protocols.

In the long term, I'd like bisect_ppx to do the rewriting for us. I thought about it but it isn't trivial, as detecting such cases requires types but ppx's don't have access to types..."	mbouaziz	2020-04-29T13:03:03Z		False				-2	tezos/tezos	1714
gid://gitlab/DiffNote/333726808		makes sense, I'm just asking because I think I might have some changes in my proto-proposal MRs that would break this	tzemanovic	2020-04-29T13:22:32Z		False				-1	tezos/tezos	1714
gid://gitlab/DiffNote/333790327		"What could we do so that the user isn't surprised when this happen? maybe a ""known issues"" paragraph in the doc (or/and a message in the CI)?"	bidinger	2020-04-29T14:33:33Z		False				-1	tezos/tezos	1714
gid://gitlab/DiffNote/333919130		"Right, both:
1. In the doc, will do.
2. In the CI, if `make` fails we should show an advice message (to be done in !1404)"	mbouaziz	2020-04-29T17:17:41Z		False				-2	tezos/tezos	1714
gid://gitlab/DiffNote/334516375		Added to the doc	mbouaziz	2020-04-30T14:07:35Z		False				-2	tezos/tezos	1714
gid://gitlab/DiffNote/335963999		"According to @pirbo this can be removed because it's now part of `tezos-tooling````suggestion:-0+0
    opam install merlin odoc --criteria=""-changed,-removed""
```"	mbouaziz	2020-05-04T13:55:30Z		False				-2	tezos/tezos	1714
gid://gitlab/DiffNote/335975395		"```suggestion:-0+0

```"	mbouaziz	2020-05-04T14:05:22Z		False				-2	tezos/tezos	1714
gid://gitlab/DiffNote/335983373		Done	mbouaziz	2020-05-04T14:13:14Z		False				-2	tezos/tezos	1714
gid://gitlab/DiffNote/335983375		Done	mbouaziz	2020-05-04T14:13:14Z		False				-2	tezos/tezos	1714
gid://gitlab/DiffNote/314243580		"I would prefer ""created mockup client base dir in ..."""	igarnier	2020-03-30T21:20:33Z		False				0	tezos/tezos	1703
gid://gitlab/DiffNote/321568658		Is the opam file consistent?	pirbo	2020-04-10T08:02:11Z		False				-1	tezos/tezos	1703
gid://gitlab/DiffNote/321571225		It is not.	igarnier	2020-04-10T08:06:57Z		False				-1	tezos/tezos	1703
gid://gitlab/DiffNote/321778587		"I fixed that on top of a7ecbe15 on @mrkkrp's fork: mrkkrp/tezos@5b8d94f7, but the MR did not get updated. I'm not familiar with the workflow yet, should I do something else?

edit: Ooops I had mismatched the name of my local branch and the remote one, MR is updated appropriately now; ignore the noise."	smelc	2020-04-10T14:23:00Z		False				-1	tezos/tezos	1703
gid://gitlab/DiffNote/323294712		@pirbo, the .opam is now fixed. Is there any other actions we should take? (running some script? I see merbocop complaining)	igarnier	2020-04-14T08:34:44Z		False				-1	tezos/tezos	1703
gid://gitlab/DiffNote/323744398		nope everything is fine	pirbo	2020-04-14T17:04:32Z		False				-1	tezos/tezos	1703
gid://gitlab/DiffNote/323652086		Should we add a comment/caveat justifying the choice of 1024 (in this case, the default limit in UNIX systems), as a service to someone playing with this limit?	germanD	2020-04-14T15:05:57Z		False				1	tezos/tezos	1748
gid://gitlab/DiffNote/323715767		"I don't like the fact that the caller passes this argument: it can lead to ""cheating"", i.e., to different calls being made with different values.

The only valid value for this parameter is `t.config.max_open_fd` (if I understand correctly). So why not have the function use this value directly?"	raphael-proust	2020-04-14T16:16:55Z		False				3	tezos/tezos	1748
gid://gitlab/DiffNote/323715770		`fun fd -> if … then … else …` seems more normal than to have a wildcard guarded pattern followed by a catch-all pattern.	raphael-proust	2020-04-14T16:16:56Z		False				0	tezos/tezos	1748
gid://gitlab/DiffNote/323715773		"I'm guessing we expect this counter to never wrap-around. It seems like a wrap-around is only problematic in that it will make the equality return false-positive. But I think that can only happen if we have extremely long-lived connections.

I'm ok with the current state of things, but I'd be even happier if another person would check it."	raphael-proust	2020-04-14T16:16:56Z		False				-1	tezos/tezos	1748
gid://gitlab/DiffNote/323715774		"Wouldn't it be better (for resilience to race-condition) to do

```
finalize
  (fun () -> Lwt_utils_unix.safe_close tt.fd)
  (fun () -> <code to decr counter and such>)
```

There is still a condition where another promise opens an fd between the two events which can cause issues, but at least it'd guarantee that the bound for p2p fds is followed strictly."	raphael-proust	2020-04-14T16:16:56Z		False				0	tezos/tezos	1748
gid://gitlab/DiffNote/323733577		This counter is incremented and decremented at each open/close. I don't think it can wrap up. It's always going to be bounded between 0 and max_open_fd ... I think ?	abate	2020-04-14T16:46:41Z		False				-2	tezos/tezos	1748
gid://gitlab/DiffNote/323733674		done	abate	2020-04-14T16:46:53Z		False				-2	tezos/tezos	1748
gid://gitlab/DiffNote/323733752		done	abate	2020-04-14T16:47:02Z		False				-2	tezos/tezos	1748
gid://gitlab/DiffNote/323735249		here I didn't want to carry on the entire config module everywhere ... we can do it. I'm not sure it's worth to do it now, or maybe later if we'll have to add another config parameter.	abate	2020-04-14T16:48:33Z		False				-2	tezos/tezos	1748
gid://gitlab/DiffNote/323736456		done	abate	2020-04-14T16:49:42Z		False				-2	tezos/tezos	1748
gid://gitlab/DiffNote/323873792		"`counter` is local to this function and is always ever incremented as far as I can tell. `/\<counter\>` only finds initialisation, increment, one use in log, one use in returning a `t`.

`total_open_fd_counter` is incremented and decremented with open and close, but that counter is different."	raphael-proust	2020-04-14T21:13:01Z		False				-1	tezos/tezos	1748
gid://gitlab/DiffNote/323873793		It doesn't matter to much, but if there is exactly `max_open_fd` then this condition is false, which means that there can be at most `max_open_fd + 1` connections. Or maybe I'm just confused by an off-by-one?	raphael-proust	2020-04-14T21:13:01Z		False				0	tezos/tezos	1748
gid://gitlab/DiffNote/323873794		If it's a dependency issue, it's ok.	raphael-proust	2020-04-14T21:13:01Z		False				3	tezos/tezos	1748
gid://gitlab/DiffNote/323882134		Ahhhh. right right. I didn't touch the variable `counter` at all in this MR. If this needs fix be fixed, I think it should be done in a different MR so not to mix things...	abate	2020-04-14T21:29:16Z		False				-2	tezos/tezos	1748
gid://gitlab/DiffNote/323883885		:thumbsup:	raphael-proust	2020-04-14T21:30:44Z		False				-1	tezos/tezos	1748
gid://gitlab/DiffNote/324346675		done	abate	2020-04-15T12:41:54Z		False				-2	tezos/tezos	1748
gid://gitlab/DiffNote/324366983		"```suggestion:-1+1
let create =
  let counter = ref 0 in
 fun max_open_fd fd ->
```

`max_open_fd` should be passed  after the counter creation to be sure that the counter is shared by all instances of the `create` function."	julien.t	2020-04-15T13:07:10Z		False				-1	tezos/tezos	1748
gid://gitlab/DiffNote/324722817		"```suggestion:-0+0
    let doc = ""The maximum number of file descriptors that can be open at the same time. For now, the limit only applies to file descriptors assigned to p2p connections."" in
```

Be careful, I wrote this without taking care of the expected ocamlformat formating."	julien.t	2020-04-15T20:51:53Z		False				0	tezos/tezos	1748
gid://gitlab/DiffNote/324722829		"```suggestion:-0+0
       We set the default cap of fd available for the
```"	julien.t	2020-04-15T20:51:53Z		False				0	tezos/tezos	1748
gid://gitlab/DiffNote/324722836		"This mutex is never used except in the wait that unlock it. It seems useless.

My understanding of mutex passed to wait is that you ensure that you release the mutex while you are waiting, and get the lock again before resuming.

There is no use for that here."	julien.t	2020-04-15T20:51:54Z		False				0	tezos/tezos	1748
gid://gitlab/DiffNote/324722838		"A warning should be issued in the log here or in create.

This is a situation that should not happen on a well configured node."	julien.t	2020-04-15T20:51:54Z		False				0	tezos/tezos	1748
gid://gitlab/DiffNote/324773367		indeed. I was under the false impression that it was a required argument of `Lwt_condition.wait`. Removed	abate	2020-04-15T21:27:20Z		False				-2	tezos/tezos	1748
gid://gitlab/DiffNote/324773379		done	abate	2020-04-15T21:27:20Z		False				-2	tezos/tezos	1748
gid://gitlab/DiffNote/335725009		@germanD can you resolve this thread if the change is satisfying? If it isn't, please explain in more details what you would like to see.	raphael-proust	2020-05-04T08:22:14Z		False				1	tezos/tezos	1748
gid://gitlab/DiffNote/335725023		"@julien.t can you resolve the thread if you're ok with the changes? Otherwise please discuss the changes and explain what you'd expect.

Same remark re: the thread below"	raphael-proust	2020-05-04T08:22:14Z		False				0	tezos/tezos	1748
gid://gitlab/DiffNote/335745340		I though I had resolved this already, sorry about the delay.	germanD	2020-05-04T08:51:35Z		False				1	tezos/tezos	1748
gid://gitlab/DiffNote/336801240		good.	julien.t	2020-05-05T16:22:33Z		False				0	tezos/tezos	1748
gid://gitlab/DiffNote/355199180		"This function mixes Lwt and non-Lwt flow control structures. Specifically: it either return a promise, or it raises an exception. This makes it non-trivial to use because Lwt has its own exception mechanism (rejection/`fail`/`Fail`).

I'd recommend to go full Lwt and use either `Lwt.fail` instead of `raise` (for minimal disruption) or wrap the function within `Lwt.apply` (although it's annoying here because of the multiple arguments and ref/fun mechanism).

Note that such a change requires a change to the `try`-`with` wrapping around the call to this function."	raphael-proust	2020-06-04T11:23:22Z		False				-1	tezos/tezos	1748
gid://gitlab/DiffNote/370541983		"This line exercises some code (the protocol compiler) whereas the two previous don't.

Should this line be moved with `test-code`?

Should non-code tests be renamed `lint-something`?"	mbouaziz	2020-06-30T07:19:24Z		False				0	tezos/tezos	1710
gid://gitlab/DiffNote/370542333		For coverage, we probably want to run all code-tests	mbouaziz	2020-06-30T07:19:59Z		False				0	tezos/tezos	1710
gid://gitlab/DiffNote/379937296		I remember there was a discussion but I can't find it anymore. What was the consensus for forcing/not the unit tests.	raphael-proust	2020-07-15T14:03:57Z		False				0	tezos/tezos	1710
gid://gitlab/DiffNote/379940241		The thread is on this MR. TLDR; the consensus matches your preference (not force). I will update the MR accordingly.	bidinger	2020-07-15T14:07:20Z		False				-2	tezos/tezos	1710
gid://gitlab/DiffNote/380007001		Haha! Not surprising I couldn't find it on slack!	raphael-proust	2020-07-15T15:11:41Z		False				0	tezos/tezos	1710
gid://gitlab/DiffNote/397189160		"- We don't run flextesa tests for coverage because they don't seem to work for that purpose (maybe because of the way they terminate nodes).
- moved `@dune build @runtest_out_of_opam` to target `test-proto-compile`.
- renamed `test-config` to `lint-opam-dune`.

I realize we could do a similar reorganization with `lint-*/check-*` targets. Also I'm not sure if there is a specific reason for `test` to depend on `lint-opam-dune` and not other linting target. I leave it for a subsequent MR to keep this one short."	bidinger	2020-08-17T16:35:49Z		False				-2	tezos/tezos	1710
gid://gitlab/DiffNote/404412731		lgtm	mbouaziz	2020-08-31T06:53:08Z		False				0	tezos/tezos	1710
gid://gitlab/DiffNote/408426902		We could have a target `coverage-tests` which would depend on all these `test-*` targets used for coverage	mbouaziz	2020-09-07T10:00:38Z		False				0	tezos/tezos	1710
gid://gitlab/DiffNote/409159591		"Yes, I thought about this but this

```
test-coverage: test-proto-compile test-unit test-python test-tezt
```

is not strictly equivalent to the current CI script as `make test-coverage` will stop at the first failing dependency. There may be a way to tell `make` to run them all but I didn't find how.

However, it may not be a big issue, the coverage tests *should* pass since we're running them *after* the previous CI stages. Note that it wasn't the case at the time this MR was written because the `test_coverage` was then *before* the other other stage, which means it could be run independently of the other stages. This reordering was done in the meantime by another MR.

Still, it may be the case that a flaky test breaks the whole job  (some test jobs are retried by gitlab, but not the tests in the coverage job) so I'd rather leave it as it is although I have no strong opinion."	bidinger	2020-09-08T14:04:40Z		False				-2	tezos/tezos	1710
gid://gitlab/DiffNote/409176176		"This?
```Makefile
coverage-tests:
  -$(MAKE) test-proto-compile
  -$(MAKE) test-unit
  -$(MAKE) test-python
  -$(MAKE) test-tezt
```"	mbouaziz	2020-09-08T14:23:38Z		False				0	tezos/tezos	1710
gid://gitlab/DiffNote/409198361		Doh! fixed.	bidinger	2020-09-08T14:50:08Z		False				-2	tezos/tezos	1710
gid://gitlab/DiffNote/409198771		"```suggestion:-0+0
.PHONY: test-coverage
test-coverage:
```"	mbouaziz	2020-09-08T14:50:37Z		False				-1	tezos/tezos	1710
gid://gitlab/DiffNote/360330788		![image](/uploads/2bb4b07abcfe498be855893ac18aa228/image.png)	mbouaziz	2020-06-12T15:04:58Z		False				0	tezos/tezos	1711
gid://gitlab/DiffNote/360330789		"Is there an MR for this?
Could you add it as a dependency of this one?"	mbouaziz	2020-06-12T15:04:58Z		False				1	tezos/tezos	1711
gid://gitlab/DiffNote/360330793		Should it be `cd tests_python && poetry run tests/...`?	mbouaziz	2020-06-12T15:04:58Z		False				-1	tezos/tezos	1711
gid://gitlab/DiffNote/361079708		Also same comment below on line 195 and 202.	arvidnl	2020-06-15T10:21:47Z		False				-1	tezos/tezos	1711
gid://gitlab/DiffNote/361175031		Is this still used? if so could you explain what it does?	bidinger	2020-06-15T12:23:50Z		False				0	tezos/tezos	1711
gid://gitlab/DiffNote/361304053		No, not used anymore. Thanks!	dannywillems	2020-06-15T14:30:45Z		False				-2	tezos/tezos	1711
gid://gitlab/DiffNote/361384497		https://gitlab.com/tezos/opam-repository/-/merge_requests/95 after this MR has been merged	dannywillems	2020-06-15T15:29:50Z		False				-2	tezos/tezos	1711
gid://gitlab/DiffNote/361385361		Yes, sorry I forgot to mention it. See https://gitlab.com/tezos/opam-repository/-/merge_requests/95	dannywillems	2020-06-15T15:30:40Z		False				-2	tezos/tezos	1711
gid://gitlab/DiffNote/361456211		Thanks! Fixed!	dannywillems	2020-06-15T17:24:27Z		False				-2	tezos/tezos	1711
gid://gitlab/DiffNote/362687662		Added opam-repository!95 as a dependency for this one.	arvidnl	2020-06-17T08:53:32Z		False				1	tezos/tezos	1711
gid://gitlab/DiffNote/362692946		Supposing that the user has installed both `pyenv` and `poetry`, but doesn't have `python3.7.7`. Could we described the steps that lead to `poetry run pytest examples/test_example.py` working properly?	bidinger	2020-06-17T09:00:05Z		False				-1	tezos/tezos	1711
gid://gitlab/DiffNote/362879565		That's related to pyenv usage. Not in the scope of the do as it might change.	dannywillems	2020-06-17T12:33:41Z		False				-1	tezos/tezos	1711
gid://gitlab/DiffNote/362885571		I think its worth giving some instructions. As I see it, we require the users to install `pyenv` and `poetry`, possibly specific versions. Installation is system-dependent so they are on their own. But once they have the software, (if possible) we should give specific instructions to go from there to running the tests.	bidinger	2020-06-17T12:41:24Z		False				-1	tezos/tezos	1711
gid://gitlab/DiffNote/366414839		"I added:
```
- `python 3.7.7`. It is recommended to use `pyenv
  <https://github.com/pyenv/pyenv>`_ to manage the python versions. If `pyenv`
  is used, you can use `pyenv install 3.7.7` followed by `pyenv global 3.7.7` to
  set the python version to `3.7.7` globally. If you want to use `python 3.7.7` only in the
  current shell, you can use `pyenv shell 3.7.7`.
```"	dannywillems	2020-06-23T11:30:35Z		False				-1	tezos/tezos	1711
gid://gitlab/DiffNote/366545145		Watch out: you should use double quotes `` and not single quotes ` to get monospace font in rst. You now have italics .See the formatted version https://nomadic-labs.gitlab.io/-/tezos/-/jobs/607553026/artifacts/docs/_build/developer/python_testing_framework.html#installation	arvidnl	2020-06-23T13:53:41Z		False				-1	tezos/tezos	1711
gid://gitlab/DiffNote/366589422		"Thanks! Updated.
So many syntax conventions :tired_face:"	dannywillems	2020-06-23T14:33:19Z		False				-1	tezos/tezos	1711
gid://gitlab/DiffNote/368397288		Following dumbly these instructions, it didn't work. I had to run `pyenv init` first (more specifically eval `$(pyenv init -)` first).	bidinger	2020-06-25T17:54:20Z		False				-1	tezos/tezos	1711
gid://gitlab/DiffNote/368398636		"I would say something like ""all poetry commands are to be run in tests_python/"""	bidinger	2020-06-25T17:57:15Z		False				-1	tezos/tezos	1711
gid://gitlab/DiffNote/368399429		shouldn't we run `poetry install` first?	bidinger	2020-06-25T17:59:04Z		False				-1	tezos/tezos	1711
gid://gitlab/DiffNote/368400571		why not `cd tests_python` in `before_script` instead of doing it everytime?	bidinger	2020-06-25T18:01:34Z		False				-1	tezos/tezos	1711
gid://gitlab/DiffNote/368405872		Tiny detail, but did you put this target first in the `Makefile` on purpose? I would expect another action as default.	bidinger	2020-06-25T18:10:17Z		False				-1	tezos/tezos	1711
gid://gitlab/DiffNote/370002408		"I added
```
Be sure ``eval $(pyenv init -)``
  has been executed first during the shell session.
```
Please resolve the thread if it is fine for you."	dannywillems	2020-06-29T14:07:19Z		False				-1	tezos/tezos	1711
gid://gitlab/DiffNote/370002578		Done. Please resolve the thread if it is fine for you.	dannywillems	2020-06-29T14:07:30Z		False				-1	tezos/tezos	1711
gid://gitlab/DiffNote/370002781		Good point. Added. Please resolve the thread if it is fine for you.	dannywillems	2020-06-29T14:07:46Z		False				-1	tezos/tezos	1711
gid://gitlab/DiffNote/370003815		Makes sense. Updated. Please resolve the thread if it is fine for you.	dannywillems	2020-06-29T14:09:02Z		False				-1	tezos/tezos	1711
gid://gitlab/DiffNote/381218883		See tezos/opam-repository!95	pirbo	2020-07-17T10:10:45Z		False				-1	tezos/tezos	1711
gid://gitlab/DiffNote/391798488		Duplicated comment	dannywillems	2020-08-06T10:58:52Z		False				-1	tezos/tezos	1711
gid://gitlab/DiffNote/401219617		Done	pirbo	2020-08-24T16:06:42Z		False				0	tezos/tezos	1711
gid://gitlab/DiffNote/315768155		I am unsure about this approach to get encoding of `msg`.	colin.g	2020-04-01T17:50:46Z		False				-2	tezos/tezos	1715
gid://gitlab/DiffNote/328112927		Do you mean `shutting`? (same in `~name` and `~msg`)	romain.nl	2020-04-21T12:39:38Z		False				0	tezos/tezos	1715
gid://gitlab/DiffNote/328114020		"```suggestion:-0+0
    ~msg:""read message: operations {message} from peer {peer_id}""
```
Also, I'm not sure why `operations`? Do you have an example of this log in practice?"	romain.nl	2020-04-21T12:41:11Z		False				0	tezos/tezos	1715
gid://gitlab/DiffNote/328114916		I would remove the parentheses (i.e. write `P2p_message.Message msg`) in case a value `msg` is added to `P2p_message`.	romain.nl	2020-04-21T12:42:26Z		False				0	tezos/tezos	1715
gid://gitlab/DiffNote/329799807		Oh yes of course, I don't know how that happened.	colin.g	2020-04-23T09:14:07Z		False				-2	tezos/tezos	1715
gid://gitlab/DiffNote/329817541		"The ""operations"" is a misunderstanding from my side. Fixed."	colin.g	2020-04-23T09:35:56Z		False				-2	tezos/tezos	1715
gid://gitlab/DiffNote/329817697		Done.	colin.g	2020-04-23T09:36:10Z		False				-2	tezos/tezos	1715
gid://gitlab/DiffNote/334304582		@colin.g Do you need help (in which case ping someone, possibly me), or are you satisfied with your further changes (in which case resolve the thread)?	raphael-proust	2020-04-30T09:43:14Z		False				-1	tezos/tezos	1715
gid://gitlab/DiffNote/334420418		No, thank you. I think it is fine.	colin.g	2020-04-30T12:04:21Z		False				-2	tezos/tezos	1715
gid://gitlab/DiffNote/348159393		"I think it would be interesting that in this MR, we make uniform the sections for the `distributed_db`. In particular, I think it would be better to have another layer with requester such as
```
let section = [""node""; ""distributed_db""; ""request""]
```"	Saroupille	2020-05-25T07:31:52Z		False				0	tezos/tezos	1715
gid://gitlab/DiffNote/348160388		"Same thing than for the `requester` event section. I suggest to use the name
```
let section = [""node""; ""distributed_db""; ""p2p_reader""]
```
instead."	Saroupille	2020-05-25T07:33:28Z		False				0	tezos/tezos	1715
gid://gitlab/DiffNote/348248388		I think it would be best to reference the `{peer_id}` before `{message}`. The latter can be quite big while the former is always short.	Saroupille	2020-05-25T09:31:37Z		False				0	tezos/tezos	1715
gid://gitlab/DiffNote/348408844		Ok, I will push the change, thank you for the insight! However, I believe that removing the logs and refactoring plus rephrasing log messages would be two different tasks giving priority to purging legacy logging from the whole shell.	colin.g	2020-05-25T13:41:41Z		False				-2	tezos/tezos	1715
gid://gitlab/DiffNote/348410555		Currently, the `{peer_id}` is already printed before the `{message}` but I suspect this MR will change this behavior, am I wrong?	Saroupille	2020-05-25T13:44:21Z		False				0	tezos/tezos	1715
gid://gitlab/DiffNote/348413742		You are right indeed.	colin.g	2020-05-25T13:49:18Z		False				-2	tezos/tezos	1715
gid://gitlab/DiffNote/351341930		Done.	colin.g	2020-05-28T19:19:22Z		False				-2	tezos/tezos	1715
gid://gitlab/DiffNote/351342006		Done.	colin.g	2020-05-28T19:19:33Z		False				-2	tezos/tezos	1715
gid://gitlab/DiffNote/351342209		Done.	colin.g	2020-05-28T19:20:11Z		False				-2	tezos/tezos	1715
gid://gitlab/DiffNote/354257537		"You should directly bind the appropriate module instead (and update the calls to `Events.` accordingly).

```suggestion:-0+0
module Events = Distributed_db_event.Requester_event
```"	vect0r	2020-06-03T08:41:03Z		False				0	tezos/tezos	1715
gid://gitlab/DiffNote/354257544		"Same here.

```suggestion:-0+0
module Events = Distributed_db_event.P2p_reader_event
```"	vect0r	2020-06-03T08:41:03Z		False				0	tezos/tezos	1715
gid://gitlab/DiffNote/323632879		"1.
```suggestion:-0+0
        yield log_dir
```
2. Also, swapping the two branches may be easier to read

3. In this case we don't need to create it?"	mbouaziz	2020-04-14T14:52:48Z		False				0	tezos/tezos	1744
gid://gitlab/DiffNote/325030976		"1. Fix in `0081ceb37`
2. Fix in `0081ceb37`
3. The current behavior is to already assume that this directory exists. I keep this behavior in this MR. 
I might change this if people wants to."	Saroupille	2020-04-16T08:07:43Z		False				-2	tezos/tezos	1744
gid://gitlab/DiffNote/325032451		A suggestion of @bidinger would be to not erase the default directory everytime but to keep each directory. For example by adding a timestamp or something similar in the name of the directory.	Saroupille	2020-04-16T08:09:54Z		False				-2	tezos/tezos	1744
gid://gitlab/DiffNote/327214027		"That works too even though we may end up with a lot of temporary files... how big are they?

A timestamp is good because it allows to find the latest one easily"	mbouaziz	2020-04-20T10:52:31Z		False				0	tezos/tezos	1744
gid://gitlab/DiffNote/331944142		"> That works too even though we may end up with a lot of temporary files... how big are they?

Using `make` I get 500Kb so I think it is fine to do it. I have changed this in 628e5e9a2 .

Now a directory `/tmp/tezos-pytest/<timestamp>` is created. The format of the `<timestamp>` is : `""%m-%d--%H-%M-%S""`."	Saroupille	2020-04-27T10:43:27Z		False				-2	tezos/tezos	1744
gid://gitlab/DiffNote/342713460		Have a look at the module `Path`: https://docs.python.org/3/library/pathlib.html#pathlib.Path.mkdir	dannywillems	2020-05-14T16:27:54Z		False				-1	tezos/tezos	1744
gid://gitlab/DiffNote/342714390		why `yield` and not `return`?	dannywillems	2020-05-14T16:29:20Z		False				-1	tezos/tezos	1744
gid://gitlab/DiffNote/342714637		Have a look at the module `path`	dannywillems	2020-05-14T16:29:41Z		False				-1	tezos/tezos	1744
gid://gitlab/DiffNote/342714896		use `return`.	dannywillems	2020-05-14T16:30:07Z		False				-1	tezos/tezos	1744
gid://gitlab/DiffNote/342715166		if you use `return` as suggested above, the `else` branch is not necessary -> better for :eyes:	dannywillems	2020-05-14T16:30:33Z		False				-1	tezos/tezos	1744
gid://gitlab/DiffNote/342716023		Quite dangerous to remove. I don't really like it.	dannywillems	2020-05-14T16:32:08Z		False				-1	tezos/tezos	1744
gid://gitlab/DiffNote/342716384		`path`	dannywillems	2020-05-14T16:32:43Z		False				-1	tezos/tezos	1744
gid://gitlab/DiffNote/342716449		`return`	dannywillems	2020-05-14T16:32:49Z		False				-1	tezos/tezos	1744
gid://gitlab/DiffNote/342717853		I would also rename the function to mention the directory is created if it does not exist, like with a parameter set to true by default.	dannywillems	2020-05-14T16:35:26Z		False				-1	tezos/tezos	1744
gid://gitlab/DiffNote/342718752		`tempfile` may also be an option to create temporary directories/files.	dannywillems	2020-05-14T16:37:10Z		False				-1	tezos/tezos	1744
gid://gitlab/DiffNote/346017631		Should be fixed in 4d682c755	Saroupille	2020-05-20T14:15:45Z		False				-2	tezos/tezos	1744
gid://gitlab/DiffNote/346018101		Should be fixed in 4d682c755	Saroupille	2020-05-20T14:15:54Z		False				-2	tezos/tezos	1744
gid://gitlab/DiffNote/346018657		Fixed in 4d682c755	Saroupille	2020-05-20T14:16:03Z		False				-2	tezos/tezos	1744
gid://gitlab/DiffNote/346019260		Fixed in 4d682c755	Saroupille	2020-05-20T14:16:15Z		False				-2	tezos/tezos	1744
gid://gitlab/DiffNote/346019982		Fixed in 4d682c755	Saroupille	2020-05-20T14:16:27Z		False				-2	tezos/tezos	1744
gid://gitlab/DiffNote/346020373		Fixed in 4d682c755	Saroupille	2020-05-20T14:16:35Z		False				-2	tezos/tezos	1744
gid://gitlab/DiffNote/346020822		Fixed in 4d682c755	Saroupille	2020-05-20T14:16:41Z		False				-2	tezos/tezos	1744
gid://gitlab/DiffNote/346020949		Fixed in 4d682c755	Saroupille	2020-05-20T14:16:48Z		False				-2	tezos/tezos	1744
gid://gitlab/DiffNote/315331657		"Here is another implementation of this which:
- handles other exceptions than `End_of_file`
- avoids the use of an option
- is tail-recursive
```
let half_naive_read_lines filename =
  let ic = open_in filename in
  let rec loop acc ic =
    match input_line ic with
      | exception End_of_file ->
        close_in ic;
        List.rev acc
      | exception exn ->
        close_in ic;
        raise exn
      | x ->
        loop (x :: acc) ic in
  loop [] ic
```"	romain.nl	2020-04-01T08:43:15Z		False				0	tezos/tezos	1709
gid://gitlab/DiffNote/315335124		Should we prefix this file with `bip39_`?	romain.nl	2020-04-01T08:47:50Z		False				0	tezos/tezos	1709
gid://gitlab/DiffNote/315336630		Shouldn't we keep this file?	romain.nl	2020-04-01T08:49:49Z		False				-1	tezos/tezos	1709
gid://gitlab/DiffNote/315340605		Same for this file?	romain.nl	2020-04-01T08:55:15Z		False				-1	tezos/tezos	1709
gid://gitlab/DiffNote/315358919		We are good here Vincent put the license in the ml files directly	pirbo	2020-04-01T09:19:40Z		False				-2	tezos/tezos	1709
gid://gitlab/DiffNote/315358922		Smart move	pirbo	2020-04-01T09:19:40Z		False				-2	tezos/tezos	1709
gid://gitlab/DiffNote/315358924		This is the non naive version! But sure, go for it!	pirbo	2020-04-01T09:19:40Z		False				-2	tezos/tezos	1709
gid://gitlab/DiffNote/315358927		Here, copyright is indeed not at the beginning of the ml* files and should be. Well spotted	pirbo	2020-04-01T09:19:41Z		False				-2	tezos/tezos	1709
gid://gitlab/DiffNote/316935485		We should make sure this is enforced at CI time	mbouaziz	2020-04-03T08:52:59Z		False				-1	tezos/tezos	1709
gid://gitlab/DiffNote/316939955		This is usually at the top of files, but why not...	mbouaziz	2020-04-03T08:59:01Z		False				-1	tezos/tezos	1709
gid://gitlab/DiffNote/316940348		-> tezos/tezos#758	mbouaziz	2020-04-03T08:59:37Z		False				-1	tezos/tezos	1709
gid://gitlab/DiffNote/318414101		I agree, I'm following Vincent habits here...	pirbo	2020-04-06T12:37:34Z		False				-2	tezos/tezos	1709
gid://gitlab/DiffNote/361204582		Yes. It is currently implement in a similar way: it is done through the `block_validator.on_close` worker ([see](https://gitlab.com/nomadic-labs/tezos/-/blob/master/src/lib_shell/block_validator.ml#L275)) which is stopped through node's `shutdown`.	vect0r	2020-06-15T12:56:48Z		False				0	tezos/tezos	1880
gid://gitlab/DiffNote/362965806		Ok, so as a follow-up to this MR, I'll work with the storage team to double check that it's all good, but otherwise I consider this to be ready.	raphael-proust	2020-06-17T14:13:24Z		False				-2	tezos/tezos	1880
gid://gitlab/DiffNote/362967507		I think the `after` parameter works well.	raphael-proust	2020-06-17T14:15:14Z		False				-2	tezos/tezos	1880
gid://gitlab/DiffNote/370527788		"I think we ca get rid of this `dont_wait`. The log could be emitted ""inline""."	julien.t	2020-06-30T07:01:31Z		False				2	tezos/tezos	1880
gid://gitlab/DiffNote/370527793		I don't think the node should crash because of an exception in fd handling. a big fat error message should be emitted though.	julien.t	2020-06-30T07:01:31Z		False				0	tezos/tezos	1880
gid://gitlab/DiffNote/370527794		Same here, exception in authentication should not be fatal to the node.	julien.t	2020-06-30T07:01:31Z		False				0	tezos/tezos	1880
gid://gitlab/DiffNote/370527800		Should not be fatal, but it should probably cancel the connection.	julien.t	2020-06-30T07:01:32Z		False				2	tezos/tezos	1880
gid://gitlab/DiffNote/370527801		not fatal.	julien.t	2020-06-30T07:01:32Z		False				1	tezos/tezos	1880
gid://gitlab/DiffNote/370527805		not fatal, should just issue a warning.	julien.t	2020-06-30T07:01:32Z		False				0	tezos/tezos	1880
gid://gitlab/DiffNote/370527810		not fatal, should just issue a warning.	julien.t	2020-06-30T07:01:32Z		False				0	tezos/tezos	1880
gid://gitlab/DiffNote/370558817		"The issue is that the log inherits its interface from `src/lib_event_logging/internal_event.mli` and that it only exports Lwt-ised logging mechanism (`val emit : 'a t -> 'a -> unit Lwt.t`).

Two solutions:
- We use `dont_wait` to wrap calls to `emit` when we need to log outside of Lwt.
- We provide `emit_dont_wait : 'a t -> 'a -> unit` in `src/lib_event_logging/internal_event.mli` and we use that.

The first approach is good in that it encourages the use of the Lwt version in Lwt contexts which helps keep logs in order. The second is good in that it's lighter syntax for logging outside of Lwt."	raphael-proust	2020-06-30T07:44:33Z		False				-2	tezos/tezos	1880
gid://gitlab/DiffNote/370558819		"I followed up on this specific call. I think it's worth completely changing the exception handling here. This is what happens currently:

`P2p_fd.close fd` is a call to

```
let close t =
  Events.(emit close_fd) (t.id, t.nread, t.nwrit)
  >>= fun () -> Lwt_utils_unix.safe_close t.fd
```

In which `Lwt_utils_unix.safe_close` is a call to

```
let safe_close fd =
  Lwt.catch (fun () -> Lwt_unix.close fd) (fun _ -> Lwt.return_unit)
```

So two bad things can happen:
- An exception during logging (`Events.emit`) prevents closing from actually happening.
- An exception during closing (`Lwt_unix.close`) can get un-reported.

Can't either of those cause fd leaks?"	raphael-proust	2020-06-30T07:44:33Z		False				-2	tezos/tezos	1880
gid://gitlab/DiffNote/370558820		"How serious of a warning? Should it also retry or something? Disconnecting from a peer/addr that the user is banning seems pretty important for spam management and security in general.

Should failures here be made to bubble up all the way back to the RPC so that the RPC answer informs the user and allows them to try again themselves via more RPC calls?"	raphael-proust	2020-06-30T07:44:33Z		False				-2	tezos/tezos	1880
gid://gitlab/DiffNote/370975799		We could capture the stack at registry time, or force the registerer to provide a `__LOC__` in order to better debug.	klakplok	2020-06-30T15:41:04Z		False				0	tezos/tezos	1880
gid://gitlab/DiffNote/370975803		What about a small time allowance before considering the second signal, so that if my fingers slip and I hit C-c twice by mistake, I don't risk corrupting my data dir ?	klakplok	2020-06-30T15:41:04Z		False				5	tezos/tezos	1880
gid://gitlab/DiffNote/370987045		"I think `__LOC__` is a good idea. The stack at registry time is less interesting I'd think: apart from the loc/pos of the top call, the rest is not very relevant to the clean-up. That's because you can set up some very generic functions for clean-ups – e.g., shutdown all the p2p connections.

I'll add `__LOC__` unless you think the stack at registration is useful?"	raphael-proust	2020-06-30T15:49:03Z		False				-2	tezos/tezos	1880
gid://gitlab/DiffNote/370987050		Normally keyboard/terminals have this small allowance built-in. But in case of a misconfigured system or such, I guess it could be useful. What's a good delay do you think? half a second, a full second?	raphael-proust	2020-06-30T15:49:04Z		False				-2	tezos/tezos	1880
gid://gitlab/DiffNote/371085034		I'm good with `__LOC__`.	klakplok	2020-06-30T16:53:19Z		False				0	tezos/tezos	1880
gid://gitlab/DiffNote/371086128		A second is fine I think.	klakplok	2020-06-30T16:54:03Z		False				5	tezos/tezos	1880
gid://gitlab/DiffNote/371136403		"We certainly should emit the log after closing the file in `P2p_fd.close` to ensure that log failure don't create fd leak. 

Exception on Lwt_unix.close if I followed the path well, could arise wrong file descriptor, IO or quota issues on NFS or interruption during the syscall close.
 
These exotic error should certainly be reported, though p2p_fd currently only deals with socket fd, eliminating most of the above cited causes of error.

If an interruption occurs during close syscall, it does't prevent the proper fd closing on most unix system according to linux manual."	julien.t	2020-06-30T17:49:34Z		False				0	tezos/tezos	1880
gid://gitlab/DiffNote/371136410		"Indeed, bubbling to the RPC call is probably the best course of action here. 
However, I'm not sure that cancelation through Lwt_canceler, which is what disconnect does, can produce an exception without the canceled worker being stopped.

In any case it is important to keep disconnections parallel and to not let them interfere: error in one disconnection should not prevent other disconnections."	julien.t	2020-06-30T17:49:34Z		False				0	tezos/tezos	1880
gid://gitlab/DiffNote/371582853		"Done.

Because of this the tests take longer (because we need a test that spends a second). But it's not a big deal as it can run in parallel with other unit tests and it's low CPU."	raphael-proust	2020-07-01T10:42:31Z		False				-2	tezos/tezos	1880
gid://gitlab/DiffNote/371585565		Done.	raphael-proust	2020-07-01T10:46:13Z		False				-2	tezos/tezos	1880
gid://gitlab/DiffNote/371844073		This and all other such comments should now be focused on https://gitlab.com/tezos/tezos/-/merge_requests/1947	raphael-proust	2020-07-01T15:28:12Z		False				-2	tezos/tezos	1880
gid://gitlab/DiffNote/371844078		Solved in https://gitlab.com/tezos/tezos/-/merge_requests/1947	raphael-proust	2020-07-01T15:28:12Z		False				-2	tezos/tezos	1880
gid://gitlab/DiffNote/380258272		Ok. I guess we can live with the `dont_wait` wrap.	julien.t	2020-07-15T23:32:30Z		False				2	tezos/tezos	1880
gid://gitlab/DiffNote/380572670		As a follow-up to an off-band discussion around this thread: https://gitlab.com/tezos/tezos/-/merge_requests/1973	raphael-proust	2020-07-16T10:17:51Z		False				-2	tezos/tezos	1880
gid://gitlab/DiffNote/382203723		I'm looking into adding to the MR also a few changes from this old MR : https://gitlab.com/tezos/tezos/-/merge_requests/1416	abate	2020-07-20T10:55:30Z		False				-2	tezos/tezos	1918
gid://gitlab/DiffNote/401178899		"```suggestion:-0+0
a static list of banned (blacklist) and trusted (whitelist) addresses and peers, and a greylist system
```
It would be good if this introductory paragraph defines what is the black and whitelist (as you do for the greylist).
The suggestion above could be one way of doing it."	arvidnl	2020-08-24T15:01:11Z		False				0	tezos/tezos	1918
gid://gitlab/DiffNote/401178906		"```suggestion:-1+0
block or whitelist individual IP addresses and peers (that is the identity
associated to a node).
```"	arvidnl	2020-08-24T15:01:12Z		False				0	tezos/tezos	1918
gid://gitlab/DiffNote/401178915		"```suggestion:-0+0
The greylist table, which is handled automatically by the P2P layer, can
```"	arvidnl	2020-08-24T15:01:12Z		False				0	tezos/tezos	1918
gid://gitlab/DiffNote/401178919		"```suggestion:-0+0
``greylist_timeout``. Peers and addresses that are greylisted are periodically
```"	arvidnl	2020-08-24T15:01:12Z		False				0	tezos/tezos	1918
gid://gitlab/DiffNote/401178924		Isn't banning = blacklisting?	arvidnl	2020-08-24T15:01:13Z		False				0	tezos/tezos	1918
gid://gitlab/DiffNote/401178928		"```suggestion:-0+0
addresses. Unbanning a peer does not ensure that its address is also unbanned,
```"	arvidnl	2020-08-24T15:01:13Z		False				0	tezos/tezos	1918
gid://gitlab/DiffNote/401178933		"```suggestion:-0+0
on the other hand, banning/unbanning an address has the same effect
```"	arvidnl	2020-08-24T15:01:13Z		False				0	tezos/tezos	1918
gid://gitlab/DiffNote/401178948		"```suggestion:-0+0
are the responsibility of the node administrator. The node administrator can
```"	arvidnl	2020-08-24T15:01:14Z		False				0	tezos/tezos	1918
gid://gitlab/DiffNote/401178951		"```suggestion:-0+0
using the same mechanism.
```"	arvidnl	2020-08-24T15:01:14Z		False				0	tezos/tezos	1918
gid://gitlab/DiffNote/401178953		block = ban = blacklist? Would be clearer if the same word is used throughout.	arvidnl	2020-08-24T15:01:15Z		False				0	tezos/tezos	1918
gid://gitlab/DiffNote/401178958		"is ip = address? If so:
```suggestion:-0+0
    of banned addresses and the greylist of addresses *)
```"	arvidnl	2020-08-24T15:01:15Z		False				0	tezos/tezos	1918
gid://gitlab/DiffNote/401178963		"banned = blacklist right? Then:
```suggestion:-0+0
    disconnected and blacklisted unless ban_peers is false.
```
Or use the word ban in the beginning of the comment as well."	arvidnl	2020-08-24T15:01:15Z		False				0	tezos/tezos	1918
gid://gitlab/DiffNote/401178970		Perhaps this comment, and that of `ban`, are redundant with the docstrings of the mli?	arvidnl	2020-08-24T15:01:16Z		False				0	tezos/tezos	1918
gid://gitlab/DiffNote/401178973		"```suggestion:-0+0
  (** [ban t point_id] marks the address of this point_id as blacklisted.
```"	arvidnl	2020-08-24T15:01:16Z		False				0	tezos/tezos	1918
gid://gitlab/DiffNote/401178983		"```suggestion:-0+0
  (** [unban t point_id] removes this point address from the black list.
```"	arvidnl	2020-08-24T15:01:16Z		False				0	tezos/tezos	1918
gid://gitlab/DiffNote/401178991		"Not sure if ""connectivity"" is the best word here (and above). The ""trust"" state? The ""permissions of a given peer""? 
Connectivity sounds like it is only an API for connecting/disconnecting a peer. Whereas you also allow/disallow future connections temporarily/permanently."	arvidnl	2020-08-24T15:01:17Z		False				0	tezos/tezos	1918
gid://gitlab/DiffNote/401178996		"```suggestion:-0+0
          ""Clear all greylist tables. This will unban all addresses and \
```"	arvidnl	2020-08-24T15:01:17Z		False				0	tezos/tezos	1918
gid://gitlab/DiffNote/401178998		Is it possible to also test that e.g., trusting a peer ensure that it is now in results of the RPCs that returns the state of the black/grey/whitelists?	arvidnl	2020-08-24T15:01:17Z		False				-1	tezos/tezos	1918
gid://gitlab/DiffNote/401708506		done.	abate	2020-08-25T12:41:10Z		False				-2	tezos/tezos	1918
gid://gitlab/DiffNote/401708907		removed	abate	2020-08-25T12:41:36Z		False				-2	tezos/tezos	1918
gid://gitlab/DiffNote/401709577		yes. we have ban/unban for blacklisting and trust/untrust for whitelisting. Clarified	abate	2020-08-25T12:42:14Z		False				-2	tezos/tezos	1918
gid://gitlab/DiffNote/431872139		"```suggestion:-0+0
The greylist table, which is handled automatically by the P2P layer, 
temporarily bans IP addresses and peers who misbehave. The delay to remove an IP
```"	arvidnl	2020-10-19T11:06:01Z		False				0	tezos/tezos	1918
gid://gitlab/DiffNote/431876997		"```suggestion:-7+0
          ""Change the permissions state of a given `IP:addr`. With `{ban : \
           true}` blacklist the given address and remove it from the \
           whitelist if present. With `{ban: false}` removes an address from \
           the blacklist. With `{trust: true}` trust a given address \
           permanently and remove it from the blacklist if present. \
           Connections from this address can still be closed on \
           authentication if the peer is greylisted. With `{trust: false}` \
           remove an address from the whitelist.""
```

I think you capitalized those verbs no purpose, but I'm not so sure it looks good. 
I've also revived the change of ""connectivity"" to ""permissions state"" here."	arvidnl	2020-10-19T11:13:54Z		False				0	tezos/tezos	1918
gid://gitlab/DiffNote/431877004		This change seems to have disappeared in the latest version. Weird! I've added a new suggestion to bring it back.	arvidnl	2020-10-19T11:13:54Z		False				0	tezos/tezos	1918
gid://gitlab/DiffNote/314518125		Why wrapping it into the error monad?	vect0r	2020-03-31T08:56:01Z		False				0	tezos/tezos	1701
gid://gitlab/DiffNote/314518139		Why no type specialisation here ? Such as `Internal_validator_process.t`	vect0r	2020-03-31T08:56:01Z		False				0	tezos/tezos	1701
gid://gitlab/DiffNote/314518141		Same here, with `External_validator_process.t`.	vect0r	2020-03-31T08:56:01Z		False				0	tezos/tezos	1701
gid://gitlab/DiffNote/314518145		Missing `s`: `Block_validator_process.failed_to_get_live_blocks`	vect0r	2020-03-31T08:56:02Z		False				0	tezos/tezos	1701
gid://gitlab/DiffNote/314518150		I'm not sure to understand why introducing a local exception unless you want to return the set of operation hashes (or force computation outside the error monad/Lwt scheduler?). However, the returned value seems to be ignored later on.	vect0r	2020-03-31T08:56:02Z		False				-1	tezos/tezos	1701
gid://gitlab/DiffNote/314518153		Similar remark here.	vect0r	2020-03-31T08:56:02Z		False				-1	tezos/tezos	1701
gid://gitlab/DiffNote/314518156		"It could be nice to enforce the fact that:
- internal: the block is validated within the same Lwt instance as the node (ie the validation is blocking for the node)
- external: the block is validated on another process (validation is non-blocking for the node)"	vect0r	2020-03-31T08:56:02Z		False				-1	tezos/tezos	1701
gid://gitlab/DiffNote/314518158		Indeed.	vect0r	2020-03-31T08:56:03Z		False				-1	tezos/tezos	1701
gid://gitlab/DiffNote/315016688		"The point of the exception here is to interrupt the execution of the loop is something goes wrong. Then the error is handled via the `error_monad`. I used a local exception so that it is local to the function.

In this part of the code, I remove the `Lwt` monad and this is why I cannot rely on `fold_left_s` or `iter_s` which already implement this shortcut maybe?"	Saroupille	2020-03-31T19:29:21Z		False				-2	tezos/tezos	1701
gid://gitlab/DiffNote/315017135		Have you any suggestion? I can put it in `lib_shell/block_validator_process.ml` but I was wondering whether there was an explication to have this function here.	Saroupille	2020-03-31T19:30:25Z		False				-2	tezos/tezos	1701
gid://gitlab/DiffNote/316639241		So that the `Internal_validator` and the `external_validator` shares a common interface, but because the `init` function is not in the module `S` maybe I could remove it indeed.	Saroupille	2020-04-02T20:42:39Z		False				-2	tezos/tezos	1701
gid://gitlab/DiffNote/316652506		Done in 934e256a7	Saroupille	2020-04-02T21:17:34Z		False				-2	tezos/tezos	1701
gid://gitlab/DiffNote/316652531		934e256a7	Saroupille	2020-04-02T21:17:38Z		False				-2	tezos/tezos	1701
gid://gitlab/DiffNote/328111856		"Yes, `fold_left_s` and `iter_s` already implement the shortcut.
NOT using the error monad is probably faster though.

You can avoid returning the set using a `match` instead:
```ocaml
  match
    List.fold_left ...
  with
  | _ops -> ok ()
  | exception (Duplicate err) -> error ...
```

Btw, I would rather wrap only `oph` in the local exception and use `Replayed_operation` in the exception branch, but it's up to you..."	mbouaziz	2020-04-21T12:38:05Z		False				-1	tezos/tezos	1701
gid://gitlab/DiffNote/328111857		"```suggestion:-0+0
    part). The main function of this module is [apply] which calls the one of
```"	mbouaziz	2020-04-21T12:38:06Z		False				0	tezos/tezos	1701
gid://gitlab/DiffNote/328111858		"```suggestion:-0+0
    there are no duplicate operations and that it is not outdated *)
```"	mbouaziz	2020-04-21T12:38:06Z		False				0	tezos/tezos	1701
gid://gitlab/DiffNote/328111861		"The comment brings zero information
```suggestion:-0+0
```

Same below"	mbouaziz	2020-04-21T12:38:06Z		False				0	tezos/tezos	1701
gid://gitlab/DiffNote/328111866		"```suggestion:-0+0
    the operations and then calls [Block_validation.apply] *)
```"	mbouaziz	2020-04-21T12:38:06Z		False				0	tezos/tezos	1701
gid://gitlab/DiffNote/328111867		"```suggestion:-1+1
(** For performance reasons, it may be interesting to use another OS process
    to validate blocks (External). However, in that case, only
    one process has a write access to the context. Currently information
    is exchanged via the file system. *)
```"	mbouaziz	2020-04-21T12:38:06Z		False				0	tezos/tezos	1701
gid://gitlab/DiffNote/328111870		Why GADTizing this type?	mbouaziz	2020-04-21T12:38:07Z		False				0	tezos/tezos	1701
gid://gitlab/DiffNote/328111876		"```suggestion:-0+0
(* A common interface for the two types of validation *)
```"	mbouaziz	2020-04-21T12:38:07Z		False				2	tezos/tezos	1701
gid://gitlab/DiffNote/328111884		"```suggestion:-0+0
  let init_test_chain _validator forking_block =
```"	mbouaziz	2020-04-21T12:38:07Z		False				0	tezos/tezos	1701
gid://gitlab/DiffNote/330948544		"Ok. I usually use a handmade recursive function to do such a cut instead of raising ""artificial"" exception and breaking the workflow (which is error prone, I believe).

If you keep this flavor, I think that @mbouaziz's suggestion is good."	vect0r	2020-04-24T13:10:41Z		False				-1	tezos/tezos	1701
gid://gitlab/DiffNote/330948549		Well yes, it seems to be a good candidate. I would put `check_liveness` there, if there is no reason to expose it through `Lib_validation.Block_validation`.	vect0r	2020-04-24T13:10:41Z		False				-1	tezos/tezos	1701
gid://gitlab/DiffNote/332042717		Fix in 5f8c9eb3b	Saroupille	2020-04-27T13:04:19Z		False				-2	tezos/tezos	1701
gid://gitlab/DiffNote/332042815		Fix in 5f8c9eb3b	Saroupille	2020-04-27T13:04:25Z		False				-2	tezos/tezos	1701
gid://gitlab/DiffNote/332042918		Fix in 5f8c9eb3b	Saroupille	2020-04-27T13:04:33Z		False				-2	tezos/tezos	1701
gid://gitlab/DiffNote/332043009		Fix in 5f8c9eb3b	Saroupille	2020-04-27T13:04:39Z		False				-2	tezos/tezos	1701
gid://gitlab/DiffNote/332043111		Fix in 5f8c9eb3b	Saroupille	2020-04-27T13:04:46Z		False				-2	tezos/tezos	1701
gid://gitlab/DiffNote/332043225		Fix in 5f8c9eb3b	Saroupille	2020-04-27T13:04:55Z		False				-2	tezos/tezos	1701
gid://gitlab/DiffNote/332043299		Fix in 5f8c9eb3b	Saroupille	2020-04-27T13:05:00Z		False				-2	tezos/tezos	1701
gid://gitlab/DiffNote/332043471		Fix in 05716e77c	Saroupille	2020-04-27T13:05:14Z		False				-2	tezos/tezos	1701
gid://gitlab/DiffNote/332043682		Fix in 05716e77c	Saroupille	2020-04-27T13:05:31Z		False				-2	tezos/tezos	1701
gid://gitlab/DiffNote/332043796		Fix in 05716e77c	Saroupille	2020-04-27T13:05:39Z		False				-2	tezos/tezos	1701
gid://gitlab/DiffNote/332044354		Here is a fix 05716e77c , let me know what you think.	Saroupille	2020-04-27T13:06:20Z		False				-2	tezos/tezos	1701
gid://gitlab/DiffNote/333502270		"Actually I am not sure that the `lib_shell/block_validator_process.ml` is a good place. Several checks are already done in `lib_validation/block_validation.ml` and the purpose of the `block_validator_process.ml` is just to switch between `singleprocess` mode and `external` mode. 

Maybe `lib_validation/block_validation.ml` is a better place."	Saroupille	2020-04-29T08:50:34Z		False				-2	tezos/tezos	1701
gid://gitlab/DiffNote/352904765		I feel this comment doesn't add any information to the actual code. What isn't obvious from the interface that would deserve additional information is the `start_testchain` parameter, and also, in which cases this call can fail (`tzresult`).	bidinger	2020-06-01T13:31:13Z		False				0	tezos/tezos	1701
gid://gitlab/DiffNote/352905511		`validates`.	bidinger	2020-06-01T13:32:24Z		False				0	tezos/tezos	1701
gid://gitlab/DiffNote/352909183		"This is quite incomplete. I understand it's tedious to specify exactly each parameters, but you should specify at least what is tricky/ not obvious. For instance the side effects (committing blocks), and the return type (error cases?).

Also what happens if the precondition you mention doesn't hold."	bidinger	2020-06-01T13:36:56Z		False				-1	tezos/tezos	1701
gid://gitlab/DiffNote/358152615		limits	bidinger	2020-06-09T15:31:41Z		False				0	tezos/tezos	1701
gid://gitlab/DiffNote/320156491		"Please use `trace_encoding` directly. Also avoid using `errors` as a field name and prefer `trace`. This is not a collection of errors, it is a trace.

This is important for two reasons:  
- `errors` is not precise and does not imply that there is any structure to the bundle that is provided whereas `trace` is immediately clear, and  
- future changes in the `Error_monad` library may make traces abstract or change them from a list to another data-structure."	raphael-proust	2020-04-08T13:35:38Z		False				0	tezos/tezos	1705
gid://gitlab/DiffNote/320156492		I am not fond of adding redundant information. Here the first error appears once as a string and another time in the trace. It makes the message better so I understand that it's a trade off. And don't have a strong opinion on the matter; I just want to open a conversation.	raphael-proust	2020-04-08T13:35:38Z		False				0	tezos/tezos	1705
gid://gitlab/DiffNote/320156495		"Traces can really never be empty. The Error_monad library actually has an `assert false` on an empty trace.

In theory it can because the `type trace` is not abstract nor private so it can be artificially constructed as empty. But in practice all the convenient constructors from the Error_monad library (`fail` and such) never construct en empty trace.

The Error_monad library will eventually be upgraded to have a more statically guaranteed guarnatee on that matter. But I think it's safe to use `List.hd` directly."	raphael-proust	2020-04-08T13:35:39Z		False				0	tezos/tezos	1705
gid://gitlab/DiffNote/320196304		I agree. We discussed it [here](https://gitlab.com/tezos/tezos/-/merge_requests/1663#note_319176668). Unless @romain.nl disagrees I'll switch to just `List.hd`.	arvidnl	2020-04-08T14:18:09Z		False				-2	tezos/tezos	1705
gid://gitlab/DiffNote/320197365		I understand your point of view. For reference, this solution is the one that we agreed upon [here](https://gitlab.com/tezos/tezos/-/merge_requests/1663#note_312835695). Without this hack, the trace simply pretty prints as `<list>` in the output. ~~However, maybe this is fixed by using the appropriate encoding for `errors`?~~ -> nope, still `<list>`	arvidnl	2020-04-08T14:20:25Z		False				-2	tezos/tezos	1705
gid://gitlab/DiffNote/320249384		I won't fight this if you think it's safe :)	romain.nl	2020-04-08T14:53:31Z		False				0	tezos/tezos	1705
gid://gitlab/DiffNote/320258900		"Yeah until we have a way to override the pretty-printer for structured values like this one, I think this is the best compromise.

I still have ""add `?ppN` arguments"" on my TODO-list :) We can change the message later. What we don't want to change too much is the structured value: I think our position should be that ""messages can be changed at any time, but we try to make structured event values backward-compatible if possible""."	romain.nl	2020-04-08T14:57:05Z		False				0	tezos/tezos	1705
gid://gitlab/DiffNote/321171623		"Why print just the top of the trace?

Was this the previous behaviour? If so I am not sure why."	klakplok	2020-04-09T15:12:05Z		False				-1	tezos/tezos	1705
gid://gitlab/DiffNote/321274035		"I think indeed that this pp merits some documentation. You'll find the context in this thread: https://gitlab.com/tezos/tezos/-/merge_requests/1663#note_312835695
basicallly, this is a middle ground between showing everything/nothing in the output. Regardless, the full trace is in the json output."	arvidnl	2020-04-09T17:34:13Z		False				-2	tezos/tezos	1705
gid://gitlab/DiffNote/321319587		"It is kind of a strange place for this code. It's unrelated to the shell.

I see two alternatives:  
- place it in the Error_monad because it's about errors, or
- place it in the simple-event system because it's related to logging the errors.

I'd prefer the second option. And that could even be the default for printing traces in error messages."	raphael-proust	2020-04-09T18:46:08Z		False				-1	tezos/tezos	1705
gid://gitlab/DiffNote/325020062		"This commit comes from MR !1663 that is already merged (when submitting a MR that depends on another MR, the list of commits for the second contains the commits of the first. This confuses the review. I'm not sure how to avoid that? Perhaps I should just WIP the second MR until the first is merged). 

I can however move `pp_first_error_of_trace` in this MR. @romain.nl does it makes sense to add the function to the `Simple` module in `internal_event.ml`?"	arvidnl	2020-04-16T07:51:31Z		False				-2	tezos/tezos	1705
gid://gitlab/DiffNote/325037485		"I think I would put this in `lib_error_monad`, next to `pp_print_error`. Or maybe modify `pp_print_error` to take a `?only_first` flag.

Although I agree that putting this in `Internal_event` also kind of makes sense because it will indeed mostly be used for printing errors. (Not sure that it seems to be in `Simple` though, as it could be used for non-simple events as well?)

So, do whatever you think is best, or wait for more opinions ;)"	romain.nl	2020-04-16T08:17:35Z		False				-1	tezos/tezos	1705
gid://gitlab/DiffNote/328119572		"```suggestion:-0+0
    ""Should have a p2p bootstrapping event""
```"	romain.nl	2020-04-21T12:48:56Z		False				0	tezos/tezos	1705
gid://gitlab/DiffNote/328119974		"```suggestion:-0+0
    ""Should have a p2p_maintain_started event""
```"	romain.nl	2020-04-21T12:49:32Z		False				0	tezos/tezos	1705
gid://gitlab/DiffNote/328125086		"```suggestion:-0+1
      ""context corruption detected: restoring integrity, this may take a \
       while""
```
Reason:
- the period `.` would imply a second sentence, so `this` should be capitalized; but I think it's better if each event is a single phrase (and not really a sentence);
- removing `...` because I think we already removed it in other events (because those events possibly had parameters in parentheses after the message so it would have looked weird)"	romain.nl	2020-04-21T12:56:41Z		False				0	tezos/tezos	1705
gid://gitlab/DiffNote/328125545		"```suggestion:-0+0
    ~msg:""error while scanning the context: {trace}""
```"	romain.nl	2020-04-21T12:57:13Z		False				0	tezos/tezos	1705
gid://gitlab/DiffNote/328125815		"```suggestion:-0+0
    ~msg:""closing state""
```"	romain.nl	2020-04-21T12:57:37Z		False				0	tezos/tezos	1705
gid://gitlab/DiffNote/328127476		"Could `status` be a typed variant instead of a string?
```
type status =
  | P2p_layer_disabled
  | Bootstrapping
  | P2p_maintain_started
```
Although maybe those could just be three separate events instead.

(and I'm not sure that `status` is a good name)"	romain.nl	2020-04-21T12:59:57Z		False				-1	tezos/tezos	1705
gid://gitlab/DiffNote/328957376		The reason I didn't make three separate events was retain some compatibility with the previous JSON output. If that is no longer important, I'd rather make three separate events.	arvidnl	2020-04-22T11:53:42Z		False				-2	tezos/tezos	1705
gid://gitlab/DiffNote/328958054		I've moved it to `Internal_event`.	arvidnl	2020-04-22T11:54:41Z		False				-2	tezos/tezos	1705
gid://gitlab/DiffNote/333600251		It is ok if this MR simply translates the existing the existing loggings into the recent framework. Improving the logging messages can be done in a separate MR. Please open an issue if you think that improvements are needed. ping @romain.nl @arvidnl	raphael-proust	2020-04-29T11:03:01Z		False				-1	tezos/tezos	1705
gid://gitlab/DiffNote/344520086		Ok, let's merge as is for now.	romain.nl	2020-05-18T14:26:20Z		False				-1	tezos/tezos	1705
gid://gitlab/DiffNote/314183151		"```suggestion:-0+0
YAML. Her main purpose is to serve as the concrete syntax for the
```"	rafoo_	2020-03-30T19:21:50Z		False				-2	tezos/tezos	1704
gid://gitlab/DiffNote/314672353		"I get that Micheline is a female name but calling it ""her"" still reads very weirdly to me."	arvidnl	2020-03-31T12:21:19Z		False				0	tezos/tezos	1704
gid://gitlab/DiffNote/314690014		"```suggestion:-0+0
   ASCII, namely characters with codes from within `[32, 126]` range,
```"	arvidnl	2020-03-31T12:43:50Z		False				0	tezos/tezos	1704
gid://gitlab/DiffNote/314690018		"```suggestion:-0+0
Micheline is a data format comparable to JSON, XML, S-expressions, and
```"	arvidnl	2020-03-31T12:43:50Z		False				0	tezos/tezos	1704
gid://gitlab/DiffNote/314690022		"```suggestion:-0+0
one of the five following constructs:
```"	arvidnl	2020-03-31T12:43:51Z		False				0	tezos/tezos	1704
gid://gitlab/DiffNote/314690024		"```suggestion:-0+0
2. A character string delimited by the double quotation character ``""``.
```"	arvidnl	2020-03-31T12:43:51Z		False				0	tezos/tezos	1704
gid://gitlab/DiffNote/314690034		"```suggestion:-0+0
on primitives can also be put to achieve the equivalent of JSON and
```"	arvidnl	2020-03-31T12:43:51Z		False				0	tezos/tezos	1704
gid://gitlab/DiffNote/314690042		the document mixes spelling serialization / serialisation, the majority of cases being the latter.	arvidnl	2020-03-31T12:43:52Z		False				0	tezos/tezos	1704
gid://gitlab/DiffNote/314690045		"```suggestion:-0+0
Micheline nodes can be converted to JSON and binary formats. The OPCODES_CONTRACT_PATH, \
```"	arvidnl	2020-03-31T12:43:52Z		False				0	tezos/tezos	1704
gid://gitlab/DiffNote/314690052		"```suggestion:-0+0
they are lost when serializing Micheline nodes to either JSON or
```

personally the JSon capitalization looks very weird to me, haven't seen it elsewhere. I won't comment on subsequent occurrences of which there are too many ;)"	arvidnl	2020-03-31T12:43:52Z		False				0	tezos/tezos	1704
gid://gitlab/DiffNote/314690054		"```suggestion:-0+0
The `Micheline_parser` module can be used to produce Micheline nodes
```"	arvidnl	2020-03-31T12:43:53Z		False				0	tezos/tezos	1704
gid://gitlab/DiffNote/314690057		"```suggestion:-0+0
function that uses the ``uutf`` OCaml library to decode UTF-8
```"	arvidnl	2020-03-31T12:43:53Z		False				0	tezos/tezos	1704
gid://gitlab/DiffNote/314690065		"```suggestion:-0+0
named ``lib_micheline``. This library is used in the Tezos client
```

Unsure, depends on how you want to format."	arvidnl	2020-03-31T12:43:53Z		False				0	tezos/tezos	1704
gid://gitlab/DiffNote/314690071		"```suggestion:-0+0
reimplementations of parts of ``lib_micheline`` in other tools and
```"	arvidnl	2020-03-31T12:43:53Z		False				0	tezos/tezos	1704
gid://gitlab/DiffNote/314817560		I prefer `Its`.	klakplok	2020-03-31T14:51:34Z		False				0	tezos/tezos	1704
gid://gitlab/DiffNote/318488013		"""serialization"" seems much more common in our code base."	rafoo_	2020-04-06T13:56:18Z		False				-2	tezos/tezos	1704
gid://gitlab/DiffNote/318488500		"```suggestion:-0+0
Micheline nodes can be converted to JSON and binary formats. The JSON
```"	rafoo_	2020-04-06T13:56:50Z		False				-2	tezos/tezos	1704
gid://gitlab/DiffNote/318596665		I have put serialization everywhere.	rafoo_	2020-04-06T15:57:02Z		False				-2	tezos/tezos	1704
gid://gitlab/DiffNote/318597431		I have put JSON everywhere and I have no idea why I was convinced that it was be written JSon.	rafoo_	2020-04-06T15:58:09Z		False				-2	tezos/tezos	1704
gid://gitlab/DiffNote/327895387		"?
```suggestion:-0+0
  <bytes> ::= 0x<hexadecimal>+
```"	mbouaziz	2020-04-21T08:23:30Z		False				-1	tezos/tezos	1704
gid://gitlab/DiffNote/327895391		"```suggestion:-0+0
  <integer> ::= <natural> | - <natural>
```"	mbouaziz	2020-04-21T08:23:31Z		False				0	tezos/tezos	1704
gid://gitlab/DiffNote/327895393		I thought it was the hexadecimal form as a string	mbouaziz	2020-04-21T08:23:31Z		False				0	tezos/tezos	1704
gid://gitlab/DiffNote/327895397		"```suggestion:-0+0
first canonicalize its locations using the ``extract_locations`` function
```"	mbouaziz	2020-04-21T08:23:31Z		False				0	tezos/tezos	1704
gid://gitlab/DiffNote/327895822		More generally, should we Britishise or Americanize everything?	mbouaziz	2020-04-21T08:24:14Z		False				0	tezos/tezos	1704
gid://gitlab/DiffNote/327920343		My firm opinion is Americanize, as I've argued earlier in #editorial-board. But there are diverging opinions ;)	arvidnl	2020-04-21T08:56:02Z		False				0	tezos/tezos	1704
gid://gitlab/DiffNote/328066514		![image](/uploads/5618998bfe4ee64db1c5b8baabfae8d0/image.png)	mbouaziz	2020-04-21T11:55:56Z		False				0	tezos/tezos	1704
gid://gitlab/DiffNote/328071545		The empty sequence of bytes (i.e. `[] : byte list` if you want) is written `0x` in Micheline.	arvidnl	2020-04-21T12:03:56Z		False				-1	tezos/tezos	1704
gid://gitlab/DiffNote/328134004		Nice	mbouaziz	2020-04-21T13:08:33Z		False				-1	tezos/tezos	1704
gid://gitlab/DiffNote/328212638		Apparently this is debated (https://english.stackexchange.com/questions/58411/whats-the-verb-for-to-form-a-canonical-representation) but I have no strong opinion so go for it!	rafoo_	2020-04-21T14:42:05Z		False				-2	tezos/tezos	1704
gid://gitlab/DiffNote/328215188		You are right, I have just checked it with `tezos-client -l typecheck data 0x0123456789abcdef against type bytes`.	rafoo_	2020-04-21T14:45:12Z		False				-2	tezos/tezos	1704
gid://gitlab/DiffNote/328217498		"```suggestion:-0+0
  field whose value is a JSON string containing the hexadecimal representation of the byte sequence without the ``0x`` prefix.
```"	rafoo_	2020-04-21T14:46:53Z		False				-2	tezos/tezos	1704
gid://gitlab/DiffNote/328284445		Only this *t*christ uses canonize, not surprising though :laughing:	mbouaziz	2020-04-21T16:07:54Z		False				0	tezos/tezos	1704
